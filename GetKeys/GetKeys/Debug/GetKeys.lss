
GetKeys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026a  00800100  000022c2  00002356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000084e  0080036a  0080036a  000025c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004327  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000127c  00000000  00000000  00006bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024df  00000000  00000000  00007e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  0000a33c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001219  00000000  00000000  0000aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022e6  00000000  00000000  0000bc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000df1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c1       	rjmp	.+666    	; 0x29c <__ctors_end>
       2:	00 00       	nop
       4:	69 c1       	rjmp	.+722    	; 0x2d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c1       	rjmp	.+718    	; 0x2d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c1       	rjmp	.+714    	; 0x2d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c1       	rjmp	.+710    	; 0x2d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c1       	rjmp	.+706    	; 0x2d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c1       	rjmp	.+702    	; 0x2d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c1       	rjmp	.+698    	; 0x2d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c1       	rjmp	.+694    	; 0x2d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c1       	rjmp	.+690    	; 0x2d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c1       	rjmp	.+686    	; 0x2d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c1       	rjmp	.+682    	; 0x2d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c1       	rjmp	.+678    	; 0x2d8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_13>
      38:	4f c1       	rjmp	.+670    	; 0x2d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c1       	rjmp	.+666    	; 0x2d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c1       	rjmp	.+662    	; 0x2d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c1       	rjmp	.+658    	; 0x2d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c1       	rjmp	.+654    	; 0x2d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c1       	rjmp	.+650    	; 0x2d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c1       	rjmp	.+646    	; 0x2d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c1       	rjmp	.+642    	; 0x2d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c1       	rjmp	.+638    	; 0x2d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c1       	rjmp	.+634    	; 0x2d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c1       	rjmp	.+630    	; 0x2d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c1       	rjmp	.+626    	; 0x2d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c1       	rjmp	.+622    	; 0x2d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c1       	rjmp	.+618    	; 0x2d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c1       	rjmp	.+614    	; 0x2d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c1       	rjmp	.+610    	; 0x2d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c1       	rjmp	.+606    	; 0x2d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c1       	rjmp	.+602    	; 0x2d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c1       	rjmp	.+598    	; 0x2d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c1       	rjmp	.+594    	; 0x2d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c1       	rjmp	.+590    	; 0x2d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ef 05       	cpc	r30, r15
      8e:	2d 06       	cpc	r2, r29
      90:	4d 06       	cpc	r4, r29
      92:	3d 06       	cpc	r3, r29
      94:	5d 06       	cpc	r5, r29
      96:	8a 06       	cpc	r8, r26
      98:	ab 06       	cpc	r10, r27
      9a:	09 07       	cpc	r16, r25
      9c:	23 07       	cpc	r18, r19
      9e:	3d 07       	cpc	r19, r29
      a0:	26 08       	sbc	r2, r6
      a2:	51 07       	cpc	r21, r17
      a4:	72 07       	cpc	r23, r18
      a6:	f9 07       	cpc	r31, r25
      a8:	13 08       	sbc	r1, r3
      aa:	33 08       	sbc	r3, r3
      ac:	7f 08       	sbc	r7, r15
      ae:	8f 08       	sbc	r8, r15
      b0:	9f 08       	sbc	r9, r15
      b2:	af 08       	sbc	r10, r15
      b4:	cc 08       	sbc	r12, r12
      b6:	df 08       	sbc	r13, r15
      b8:	06 09       	sbc	r16, r6
      ba:	15 09       	sbc	r17, r5

000000bc <CHARSET>:
      bc:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      cc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      dc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      ec:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      fc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     10c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     11c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     12c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     13c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     14c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     15c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     16c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     17c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     18c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     19c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1ac:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1bc:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1cc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1dc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1ec:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1fc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     20c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     21c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     22c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     23c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     24c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     25c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     26c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     27c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     28c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000029c <__ctors_end>:
     29c:	11 24       	eor	r1, r1
     29e:	1f be       	out	0x3f, r1	; 63
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
     2a2:	d0 e4       	ldi	r29, 0x40	; 64
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	cd bf       	out	0x3d, r28	; 61

000002a8 <__do_copy_data>:
     2a8:	13 e0       	ldi	r17, 0x03	; 3
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	e2 ec       	ldi	r30, 0xC2	; 194
     2b0:	f2 e2       	ldi	r31, 0x22	; 34
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	aa 36       	cpi	r26, 0x6A	; 106
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	2b e0       	ldi	r18, 0x0B	; 11
     2c4:	aa e6       	ldi	r26, 0x6A	; 106
     2c6:	b3 e0       	ldi	r27, 0x03	; 3
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a8 3b       	cpi	r26, 0xB8	; 184
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>
     2d2:	ed d7       	rcall	.+4058   	; 0x12ae <main>
     2d4:	0c 94 5f 11 	jmp	0x22be	; 0x22be <_exit>

000002d8 <__bad_interrupt>:
     2d8:	93 ce       	rjmp	.-730    	; 0x0 <__vectors>

000002da <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     2e0:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     2e4:	20 91 6a 03 	lds	r18, 0x036A	; 0x80036a <__data_end>
     2e8:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <__data_end+0x1>
     2ec:	c9 01       	movw	r24, r18
     2ee:	8c 0f       	add	r24, r28
     2f0:	9d 1f       	adc	r25, r29
     2f2:	8c 3d       	cpi	r24, 0xDC	; 220
     2f4:	45 e0       	ldi	r20, 0x05	; 5
     2f6:	94 07       	cpc	r25, r20
     2f8:	58 f4       	brcc	.+22     	; 0x310 <pvPortMalloc+0x36>
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	58 f4       	brcc	.+22     	; 0x316 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     300:	e9 01       	movw	r28, r18
     302:	c4 59       	subi	r28, 0x94	; 148
     304:	dc 4f       	sbci	r29, 0xFC	; 252
			xNextFreeByte += xWantedSize;			
     306:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <__data_end+0x1>
     30a:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <__data_end>
     30e:	05 c0       	rjmp	.+10     	; 0x31a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     310:	c0 e0       	ldi	r28, 0x00	; 0
     312:	d0 e0       	ldi	r29, 0x00	; 0
     314:	02 c0       	rjmp	.+4      	; 0x31a <pvPortMalloc+0x40>
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     31a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     31e:	ce 01       	movw	r24, r28
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     326:	08 95       	ret

00000328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     328:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     32a:	03 96       	adiw	r24, 0x03	; 3
     32c:	92 83       	std	Z+2, r25	; 0x02
     32e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     330:	2f ef       	ldi	r18, 0xFF	; 255
     332:	3f ef       	ldi	r19, 0xFF	; 255
     334:	34 83       	std	Z+4, r19	; 0x04
     336:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     338:	96 83       	std	Z+6, r25	; 0x06
     33a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     33c:	90 87       	std	Z+8, r25	; 0x08
     33e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     340:	10 82       	st	Z, r1
     342:	08 95       	ret

00000344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     344:	fc 01       	movw	r30, r24
     346:	11 86       	std	Z+9, r1	; 0x09
     348:	10 86       	std	Z+8, r1	; 0x08
     34a:	08 95       	ret

0000034c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	fc 01       	movw	r30, r24
     352:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     354:	21 81       	ldd	r18, Z+1	; 0x01
     356:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     358:	e9 01       	movw	r28, r18
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	9b 81       	ldd	r25, Y+3	; 0x03
     35e:	13 96       	adiw	r26, 0x03	; 3
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
     364:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     366:	81 81       	ldd	r24, Z+1	; 0x01
     368:	92 81       	ldd	r25, Z+2	; 0x02
     36a:	15 96       	adiw	r26, 0x05	; 5
     36c:	9c 93       	st	X, r25
     36e:	8e 93       	st	-X, r24
     370:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	9b 81       	ldd	r25, Y+3	; 0x03
     376:	ec 01       	movw	r28, r24
     378:	7d 83       	std	Y+5, r23	; 0x05
     37a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     37c:	e9 01       	movw	r28, r18
     37e:	7b 83       	std	Y+3, r23	; 0x03
     380:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     382:	72 83       	std	Z+2, r23	; 0x02
     384:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     386:	19 96       	adiw	r26, 0x09	; 9
     388:	fc 93       	st	X, r31
     38a:	ee 93       	st	-X, r30
     38c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     38e:	80 81       	ld	r24, Z
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 83       	st	Z, r24
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     3a0:	48 81       	ld	r20, Y
     3a2:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     3a4:	4f 3f       	cpi	r20, 0xFF	; 255
     3a6:	2f ef       	ldi	r18, 0xFF	; 255
     3a8:	52 07       	cpc	r21, r18
     3aa:	31 f4       	brne	.+12     	; 0x3b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     3ac:	dc 01       	movw	r26, r24
     3ae:	17 96       	adiw	r26, 0x07	; 7
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	18 97       	sbiw	r26, 0x08	; 8
     3b6:	17 c0       	rjmp	.+46     	; 0x3e6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     3b8:	fc 01       	movw	r30, r24
     3ba:	33 96       	adiw	r30, 0x03	; 3
     3bc:	dc 01       	movw	r26, r24
     3be:	15 96       	adiw	r26, 0x05	; 5
     3c0:	2d 91       	ld	r18, X+
     3c2:	3c 91       	ld	r19, X
     3c4:	16 97       	sbiw	r26, 0x06	; 6
     3c6:	d9 01       	movw	r26, r18
     3c8:	2d 91       	ld	r18, X+
     3ca:	3c 91       	ld	r19, X
     3cc:	42 17       	cp	r20, r18
     3ce:	53 07       	cpc	r21, r19
     3d0:	50 f0       	brcs	.+20     	; 0x3e6 <vListInsert+0x4c>
     3d2:	02 80       	ldd	r0, Z+2	; 0x02
     3d4:	f3 81       	ldd	r31, Z+3	; 0x03
     3d6:	e0 2d       	mov	r30, r0
     3d8:	a2 81       	ldd	r26, Z+2	; 0x02
     3da:	b3 81       	ldd	r27, Z+3	; 0x03
     3dc:	2d 91       	ld	r18, X+
     3de:	3c 91       	ld	r19, X
     3e0:	42 17       	cp	r20, r18
     3e2:	53 07       	cpc	r21, r19
     3e4:	b0 f7       	brcc	.-20     	; 0x3d2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     3e6:	a2 81       	ldd	r26, Z+2	; 0x02
     3e8:	b3 81       	ldd	r27, Z+3	; 0x03
     3ea:	bb 83       	std	Y+3, r27	; 0x03
     3ec:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     3ee:	15 96       	adiw	r26, 0x05	; 5
     3f0:	dc 93       	st	X, r29
     3f2:	ce 93       	st	-X, r28
     3f4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     3f6:	fd 83       	std	Y+5, r31	; 0x05
     3f8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     3fa:	d3 83       	std	Z+3, r29	; 0x03
     3fc:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     3fe:	99 87       	std	Y+9, r25	; 0x09
     400:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     402:	fc 01       	movw	r30, r24
     404:	20 81       	ld	r18, Z
     406:	2f 5f       	subi	r18, 0xFF	; 255
     408:	20 83       	st	Z, r18
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     410:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     412:	a2 81       	ldd	r26, Z+2	; 0x02
     414:	b3 81       	ldd	r27, Z+3	; 0x03
     416:	84 81       	ldd	r24, Z+4	; 0x04
     418:	95 81       	ldd	r25, Z+5	; 0x05
     41a:	15 96       	adiw	r26, 0x05	; 5
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
     420:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     422:	a4 81       	ldd	r26, Z+4	; 0x04
     424:	b5 81       	ldd	r27, Z+5	; 0x05
     426:	82 81       	ldd	r24, Z+2	; 0x02
     428:	93 81       	ldd	r25, Z+3	; 0x03
     42a:	13 96       	adiw	r26, 0x03	; 3
     42c:	9c 93       	st	X, r25
     42e:	8e 93       	st	-X, r24
     430:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     432:	a0 85       	ldd	r26, Z+8	; 0x08
     434:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	8d 91       	ld	r24, X+
     43a:	9c 91       	ld	r25, X
     43c:	12 97       	sbiw	r26, 0x02	; 2
     43e:	e8 17       	cp	r30, r24
     440:	f9 07       	cpc	r31, r25
     442:	31 f4       	brne	.+12     	; 0x450 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     444:	84 81       	ldd	r24, Z+4	; 0x04
     446:	95 81       	ldd	r25, Z+5	; 0x05
     448:	12 96       	adiw	r26, 0x02	; 2
     44a:	9c 93       	st	X, r25
     44c:	8e 93       	st	-X, r24
     44e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     450:	11 86       	std	Z+9, r1	; 0x09
     452:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     454:	8c 91       	ld	r24, X
     456:	81 50       	subi	r24, 0x01	; 1
     458:	8c 93       	st	X, r24
     45a:	08 95       	ret

0000045c <GetKeypadKey>:


enum GetKeyState {gk_init,gk_no_user, gk_no_drink, gk_timer, gk_user, gk_door, gk_math, gk_unlock_key, gk_timer_init} get_key_state;
	
void GetKey_Init(){
	get_key_state = gk_init;
     45c:	8e ef       	ldi	r24, 0xFE	; 254
     45e:	88 b9       	out	0x08, r24	; 8
     460:	00 00       	nop
     462:	86 b1       	in	r24, 0x06	; 6
     464:	80 95       	com	r24
     466:	84 fd       	sbrc	r24, 4
     468:	46 c0       	rjmp	.+140    	; 0x4f6 <GetKeypadKey+0x9a>
     46a:	86 b1       	in	r24, 0x06	; 6
     46c:	80 95       	com	r24
     46e:	85 fd       	sbrc	r24, 5
     470:	44 c0       	rjmp	.+136    	; 0x4fa <GetKeypadKey+0x9e>
     472:	86 b1       	in	r24, 0x06	; 6
     474:	80 95       	com	r24
     476:	86 fd       	sbrc	r24, 6
     478:	42 c0       	rjmp	.+132    	; 0x4fe <GetKeypadKey+0xa2>
     47a:	86 b1       	in	r24, 0x06	; 6
     47c:	80 95       	com	r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	88 0f       	add	r24, r24
     482:	89 2f       	mov	r24, r25
     484:	88 1f       	adc	r24, r24
     486:	99 0b       	sbc	r25, r25
     488:	91 95       	neg	r25
     48a:	89 2b       	or	r24, r25
     48c:	d1 f5       	brne	.+116    	; 0x502 <GetKeypadKey+0xa6>
     48e:	8d ef       	ldi	r24, 0xFD	; 253
     490:	88 b9       	out	0x08, r24	; 8
     492:	00 00       	nop
     494:	86 b1       	in	r24, 0x06	; 6
     496:	80 95       	com	r24
     498:	84 fd       	sbrc	r24, 4
     49a:	35 c0       	rjmp	.+106    	; 0x506 <GetKeypadKey+0xaa>
     49c:	86 b1       	in	r24, 0x06	; 6
     49e:	80 95       	com	r24
     4a0:	85 fd       	sbrc	r24, 5
     4a2:	33 c0       	rjmp	.+102    	; 0x50a <GetKeypadKey+0xae>
     4a4:	86 b1       	in	r24, 0x06	; 6
     4a6:	80 95       	com	r24
     4a8:	86 fd       	sbrc	r24, 6
     4aa:	31 c0       	rjmp	.+98     	; 0x50e <GetKeypadKey+0xb2>
     4ac:	86 b1       	in	r24, 0x06	; 6
     4ae:	80 95       	com	r24
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	88 0f       	add	r24, r24
     4b4:	89 2f       	mov	r24, r25
     4b6:	88 1f       	adc	r24, r24
     4b8:	99 0b       	sbc	r25, r25
     4ba:	91 95       	neg	r25
     4bc:	89 2b       	or	r24, r25
     4be:	49 f5       	brne	.+82     	; 0x512 <GetKeypadKey+0xb6>
     4c0:	8b ef       	ldi	r24, 0xFB	; 251
     4c2:	88 b9       	out	0x08, r24	; 8
     4c4:	00 00       	nop
     4c6:	86 b1       	in	r24, 0x06	; 6
     4c8:	80 95       	com	r24
     4ca:	84 fd       	sbrc	r24, 4
     4cc:	24 c0       	rjmp	.+72     	; 0x516 <GetKeypadKey+0xba>
     4ce:	86 b1       	in	r24, 0x06	; 6
     4d0:	80 95       	com	r24
     4d2:	85 fd       	sbrc	r24, 5
     4d4:	22 c0       	rjmp	.+68     	; 0x51a <GetKeypadKey+0xbe>
     4d6:	86 b1       	in	r24, 0x06	; 6
     4d8:	80 95       	com	r24
     4da:	86 fd       	sbrc	r24, 6
     4dc:	20 c0       	rjmp	.+64     	; 0x51e <GetKeypadKey+0xc2>
     4de:	86 b1       	in	r24, 0x06	; 6
     4e0:	80 95       	com	r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	88 0f       	add	r24, r24
     4e6:	89 2f       	mov	r24, r25
     4e8:	88 1f       	adc	r24, r24
     4ea:	99 0b       	sbc	r25, r25
     4ec:	91 95       	neg	r25
     4ee:	89 2b       	or	r24, r25
     4f0:	c1 f4       	brne	.+48     	; 0x522 <GetKeypadKey+0xc6>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	08 95       	ret
     4f6:	81 e3       	ldi	r24, 0x31	; 49
     4f8:	08 95       	ret
     4fa:	84 e3       	ldi	r24, 0x34	; 52
     4fc:	08 95       	ret
     4fe:	87 e3       	ldi	r24, 0x37	; 55
     500:	08 95       	ret
     502:	8a e2       	ldi	r24, 0x2A	; 42
     504:	08 95       	ret
     506:	82 e3       	ldi	r24, 0x32	; 50
     508:	08 95       	ret
     50a:	85 e3       	ldi	r24, 0x35	; 53
     50c:	08 95       	ret
     50e:	88 e3       	ldi	r24, 0x38	; 56
     510:	08 95       	ret
     512:	80 e3       	ldi	r24, 0x30	; 48
     514:	08 95       	ret
     516:	83 e3       	ldi	r24, 0x33	; 51
     518:	08 95       	ret
     51a:	86 e3       	ldi	r24, 0x36	; 54
     51c:	08 95       	ret
     51e:	89 e3       	ldi	r24, 0x39	; 57
     520:	08 95       	ret
     522:	83 e2       	ldi	r24, 0x23	; 35
     524:	08 95       	ret

00000526 <removeusers_intro>:
     526:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <number_of_users>
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	b9 f4       	brne	.+46     	; 0x55c <removeusers_intro+0x36>
     52e:	3e d7       	rcall	.+3708   	; 0x13ac <nokia_lcd_clear>
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	88 e7       	ldi	r24, 0x78	; 120
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 bc 0a 	call	0x1578	; 0x1578 <nokia_lcd_write_string>
     53a:	6a e0       	ldi	r22, 0x0A	; 10
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 ce 0a 	call	0x159c	; 0x159c <nokia_lcd_set_cursor>
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	84 e8       	ldi	r24, 0x84	; 132
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 bc 0a 	call	0x1578	; 0x1578 <nokia_lcd_write_string>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	0e 94 bc 0a 	call	0x1578	; 0x1578 <nokia_lcd_write_string>
     556:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <nokia_lcd_render>
     55a:	08 95       	ret
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	09 f5       	brne	.+66     	; 0x5a2 <removeusers_intro+0x7c>
     560:	25 d7       	rcall	.+3658   	; 0x13ac <nokia_lcd_clear>
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	88 e7       	ldi	r24, 0x78	; 120
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 bc 0a 	call	0x1578	; 0x1578 <nokia_lcd_write_string>
     56c:	6a e0       	ldi	r22, 0x0A	; 10
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 ce 0a 	call	0x159c	; 0x159c <nokia_lcd_set_cursor>
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	84 e8       	ldi	r24, 0x84	; 132
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	fe d7       	rcall	.+4092   	; 0x1578 <nokia_lcd_write_string>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	fa d7       	rcall	.+4084   	; 0x1578 <nokia_lcd_write_string>
     584:	64 e1       	ldi	r22, 0x14	; 20
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 ce 0a 	call	0x159c	; 0x159c <nokia_lcd_set_cursor>
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	88 e8       	ldi	r24, 0x88	; 136
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	f2 d7       	rcall	.+4068   	; 0x1578 <nokia_lcd_write_string>
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	8c e1       	ldi	r24, 0x1C	; 28
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	ee d7       	rcall	.+4060   	; 0x1578 <nokia_lcd_write_string>
     59c:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <nokia_lcd_render>
     5a0:	08 95       	ret
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	41 f5       	brne	.+80     	; 0x5f6 <removeusers_intro+0xd0>
     5a6:	02 d7       	rcall	.+3588   	; 0x13ac <nokia_lcd_clear>
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	88 e7       	ldi	r24, 0x78	; 120
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	e4 d7       	rcall	.+4040   	; 0x1578 <nokia_lcd_write_string>
     5b0:	6a e0       	ldi	r22, 0x0A	; 10
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	f3 d7       	rcall	.+4070   	; 0x159c <nokia_lcd_set_cursor>
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	84 e8       	ldi	r24, 0x84	; 132
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	dd d7       	rcall	.+4026   	; 0x1578 <nokia_lcd_write_string>
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	d9 d7       	rcall	.+4018   	; 0x1578 <nokia_lcd_write_string>
     5c6:	64 e1       	ldi	r22, 0x14	; 20
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	e8 d7       	rcall	.+4048   	; 0x159c <nokia_lcd_set_cursor>
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	88 e8       	ldi	r24, 0x88	; 136
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	d2 d7       	rcall	.+4004   	; 0x1578 <nokia_lcd_write_string>
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8c e1       	ldi	r24, 0x1C	; 28
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	ce d7       	rcall	.+3996   	; 0x1578 <nokia_lcd_write_string>
     5dc:	6e e1       	ldi	r22, 0x1E	; 30
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	dd d7       	rcall	.+4026   	; 0x159c <nokia_lcd_set_cursor>
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	8c e8       	ldi	r24, 0x8C	; 140
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	c7 d7       	rcall	.+3982   	; 0x1578 <nokia_lcd_write_string>
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	87 e3       	ldi	r24, 0x37	; 55
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	c3 d7       	rcall	.+3974   	; 0x1578 <nokia_lcd_write_string>
     5f2:	d9 c7       	rjmp	.+4018   	; 0x15a6 <nokia_lcd_render>
     5f4:	08 95       	ret
     5f6:	84 30       	cpi	r24, 0x04	; 4
     5f8:	09 f0       	breq	.+2      	; 0x5fc <removeusers_intro+0xd6>
     5fa:	33 c0       	rjmp	.+102    	; 0x662 <removeusers_intro+0x13c>
     5fc:	d7 d6       	rcall	.+3502   	; 0x13ac <nokia_lcd_clear>
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	88 e7       	ldi	r24, 0x78	; 120
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	b9 d7       	rcall	.+3954   	; 0x1578 <nokia_lcd_write_string>
     606:	6a e0       	ldi	r22, 0x0A	; 10
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	c8 d7       	rcall	.+3984   	; 0x159c <nokia_lcd_set_cursor>
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	84 e8       	ldi	r24, 0x84	; 132
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	b2 d7       	rcall	.+3940   	; 0x1578 <nokia_lcd_write_string>
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	ae d7       	rcall	.+3932   	; 0x1578 <nokia_lcd_write_string>
     61c:	64 e1       	ldi	r22, 0x14	; 20
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	bd d7       	rcall	.+3962   	; 0x159c <nokia_lcd_set_cursor>
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	88 e8       	ldi	r24, 0x88	; 136
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	a7 d7       	rcall	.+3918   	; 0x1578 <nokia_lcd_write_string>
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	8c e1       	ldi	r24, 0x1C	; 28
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	a3 d7       	rcall	.+3910   	; 0x1578 <nokia_lcd_write_string>
     632:	6e e1       	ldi	r22, 0x1E	; 30
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	b2 d7       	rcall	.+3940   	; 0x159c <nokia_lcd_set_cursor>
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	8c e8       	ldi	r24, 0x8C	; 140
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9c d7       	rcall	.+3896   	; 0x1578 <nokia_lcd_write_string>
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	87 e3       	ldi	r24, 0x37	; 55
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	98 d7       	rcall	.+3888   	; 0x1578 <nokia_lcd_write_string>
     648:	68 e2       	ldi	r22, 0x28	; 40
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	a7 d7       	rcall	.+3918   	; 0x159c <nokia_lcd_set_cursor>
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	80 e9       	ldi	r24, 0x90	; 144
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	91 d7       	rcall	.+3874   	; 0x1578 <nokia_lcd_write_string>
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	82 e5       	ldi	r24, 0x52	; 82
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	8d d7       	rcall	.+3866   	; 0x1578 <nokia_lcd_write_string>
     65e:	a3 c7       	rjmp	.+3910   	; 0x15a6 <nokia_lcd_render>
     660:	08 95       	ret
     662:	a4 d6       	rcall	.+3400   	; 0x13ac <nokia_lcd_clear>
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	84 e9       	ldi	r24, 0x94	; 148
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	86 d7       	rcall	.+3852   	; 0x1578 <nokia_lcd_write_string>
     66c:	9c c7       	rjmp	.+3896   	; 0x15a6 <nokia_lcd_render>
     66e:	08 95       	ret

00000670 <remove_password_verification>:
     670:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <user_to_remove>
     674:	8b e1       	ldi	r24, 0x1B	; 27
     676:	e8 9f       	mul	r30, r24
     678:	d0 01       	movw	r26, r0
     67a:	11 24       	eor	r1, r1
     67c:	af 5f       	subi	r26, 0xFF	; 255
     67e:	be 4f       	sbci	r27, 0xFE	; 254
     680:	52 96       	adiw	r26, 0x12	; 18
     682:	9c 91       	ld	r25, X
     684:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <temporary_password>
     688:	98 13       	cpse	r25, r24
     68a:	13 c0       	rjmp	.+38     	; 0x6b2 <remove_password_verification+0x42>
     68c:	8b e1       	ldi	r24, 0x1B	; 27
     68e:	e8 9f       	mul	r30, r24
     690:	f0 01       	movw	r30, r0
     692:	11 24       	eor	r1, r1
     694:	ec 5e       	subi	r30, 0xEC	; 236
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	a5 e5       	ldi	r26, 0x55	; 85
     69a:	b9 e0       	ldi	r27, 0x09	; 9
     69c:	2c e5       	ldi	r18, 0x5C	; 92
     69e:	39 e0       	ldi	r19, 0x09	; 9
     6a0:	91 91       	ld	r25, Z+
     6a2:	8d 91       	ld	r24, X+
     6a4:	98 13       	cpse	r25, r24
     6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <remove_password_verification+0x46>
     6a8:	a2 17       	cp	r26, r18
     6aa:	b3 07       	cpc	r27, r19
     6ac:	c9 f7       	brne	.-14     	; 0x6a0 <remove_password_verification+0x30>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	08 95       	ret
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	08 95       	ret

000006ba <UserVerify_Tick>:
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	80 91 b5 0b 	lds	r24, 0x0BB5	; 0x800bb5 <user_verify_state>
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	49 f0       	breq	.+18     	; 0x6de <UserVerify_Tick+0x24>
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	21 f1       	breq	.+72     	; 0x718 <UserVerify_Tick+0x5e>
     6d0:	cd c0       	rjmp	.+410    	; 0x86c <UserVerify_Tick+0x1b2>
     6d2:	8f e4       	ldi	r24, 0x4F	; 79
     6d4:	93 ec       	ldi	r25, 0xC3	; 195
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <UserVerify_Tick+0x1c>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <UserVerify_Tick+0x22>
     6dc:	00 00       	nop
     6de:	be de       	rcall	.-644    	; 0x45c <GetKeypadKey>
     6e0:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <uv_selection>
     6e4:	88 23       	and	r24, r24
     6e6:	a9 f3       	breq	.-22     	; 0x6d2 <UserVerify_Tick+0x18>
     6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <UserVerify_Tick+0x3c>
     6ea:	ef e4       	ldi	r30, 0x4F	; 79
     6ec:	f3 ec       	ldi	r31, 0xC3	; 195
     6ee:	31 97       	sbiw	r30, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <UserVerify_Tick+0x34>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <UserVerify_Tick+0x3a>
     6f4:	00 00       	nop
     6f6:	b2 de       	rcall	.-668    	; 0x45c <GetKeypadKey>
     6f8:	80 93 4f 09 	sts	0x094F, r24	; 0x80094f <uv_prev_select>
     6fc:	90 91 50 09 	lds	r25, 0x0950	; 0x800950 <uv_selection>
     700:	89 17       	cp	r24, r25
     702:	99 f3       	breq	.-26     	; 0x6ea <UserVerify_Tick+0x30>
     704:	91 53       	subi	r25, 0x31	; 49
     706:	90 93 50 09 	sts	0x0950, r25	; 0x800950 <uv_selection>
     70a:	b0 c0       	rjmp	.+352    	; 0x86c <UserVerify_Tick+0x1b2>
     70c:	8f e4       	ldi	r24, 0x4F	; 79
     70e:	93 ec       	ldi	r25, 0xC3	; 195
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <UserVerify_Tick+0x56>
     714:	00 c0       	rjmp	.+0      	; 0x716 <UserVerify_Tick+0x5c>
     716:	00 00       	nop
     718:	a1 de       	rcall	.-702    	; 0x45c <GetKeypadKey>
     71a:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <uv_selection>
     71e:	88 23       	and	r24, r24
     720:	a9 f3       	breq	.-22     	; 0x70c <UserVerify_Tick+0x52>
     722:	06 c0       	rjmp	.+12     	; 0x730 <UserVerify_Tick+0x76>
     724:	ef e4       	ldi	r30, 0x4F	; 79
     726:	f3 ec       	ldi	r31, 0xC3	; 195
     728:	31 97       	sbiw	r30, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <UserVerify_Tick+0x6e>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <UserVerify_Tick+0x74>
     72e:	00 00       	nop
     730:	95 de       	rcall	.-726    	; 0x45c <GetKeypadKey>
     732:	80 93 4f 09 	sts	0x094F, r24	; 0x80094f <uv_prev_select>
     736:	90 91 50 09 	lds	r25, 0x0950	; 0x800950 <uv_selection>
     73a:	89 17       	cp	r24, r25
     73c:	99 f3       	breq	.-26     	; 0x724 <UserVerify_Tick+0x6a>
     73e:	cc e5       	ldi	r28, 0x5C	; 92
     740:	d9 e0       	ldi	r29, 0x09	; 9
     742:	04 e5       	ldi	r16, 0x54	; 84
     744:	19 e0       	ldi	r17, 0x09	; 9
     746:	0f 2e       	mov	r0, r31
     748:	fa e2       	ldi	r31, 0x2A	; 42
     74a:	ff 2e       	mov	r15, r31
     74c:	f0 2d       	mov	r31, r0
     74e:	75 c0       	rjmp	.+234    	; 0x83a <UserVerify_Tick+0x180>
     750:	88 23       	and	r24, r24
     752:	09 f4       	brne	.+2      	; 0x756 <UserVerify_Tick+0x9c>
     754:	5f c0       	rjmp	.+190    	; 0x814 <UserVerify_Tick+0x15a>
     756:	8a 32       	cpi	r24, 0x2A	; 42
     758:	a1 f1       	breq	.+104    	; 0x7c2 <UserVerify_Tick+0x108>
     75a:	20 91 53 09 	lds	r18, 0x0953	; 0x800953 <password_size>
     75e:	28 30       	cpi	r18, 0x08	; 8
     760:	08 f0       	brcs	.+2      	; 0x764 <UserVerify_Tick+0xaa>
     762:	58 c0       	rjmp	.+176    	; 0x814 <UserVerify_Tick+0x15a>
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	f9 01       	movw	r30, r18
     768:	ec 5a       	subi	r30, 0xAC	; 172
     76a:	f6 4f       	sbci	r31, 0xF6	; 246
     76c:	80 83       	st	Z, r24
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	3f 4f       	sbci	r19, 0xFF	; 255
     772:	28 30       	cpi	r18, 0x08	; 8
     774:	31 05       	cpc	r19, r1
     776:	24 f4       	brge	.+8      	; 0x780 <UserVerify_Tick+0xc6>
     778:	f9 01       	movw	r30, r18
     77a:	ec 5a       	subi	r30, 0xAC	; 172
     77c:	f6 4f       	sbci	r31, 0xF6	; 246
     77e:	f0 82       	st	Z, r15
     780:	15 d6       	rcall	.+3114   	; 0x13ac <nokia_lcd_clear>
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	8c ec       	ldi	r24, 0xCC	; 204
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	f7 d6       	rcall	.+3566   	; 0x1578 <nokia_lcd_write_string>
     78a:	6a e0       	ldi	r22, 0x0A	; 10
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	06 d7       	rcall	.+3596   	; 0x159c <nokia_lcd_set_cursor>
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	82 ed       	ldi	r24, 0xD2	; 210
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	f0 d6       	rcall	.+3552   	; 0x1578 <nokia_lcd_write_string>
     798:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <uv_password_fails>
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	80 5d       	subi	r24, 0xD0	; 208
     7a0:	41 d6       	rcall	.+3202   	; 0x1424 <nokia_lcd_write_char>
     7a2:	64 e1       	ldi	r22, 0x14	; 20
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	fa d6       	rcall	.+3572   	; 0x159c <nokia_lcd_set_cursor>
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	c8 01       	movw	r24, r16
     7ac:	e5 d6       	rcall	.+3530   	; 0x1578 <nokia_lcd_write_string>
     7ae:	fb d6       	rcall	.+3574   	; 0x15a6 <nokia_lcd_render>
     7b0:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <password_size>
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <password_size>
     7ba:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <uv_selection>
     7be:	8a 32       	cpi	r24, 0x2A	; 42
     7c0:	49 f5       	brne	.+82     	; 0x814 <UserVerify_Tick+0x15a>
     7c2:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <password_size>
     7c6:	e4 e5       	ldi	r30, 0x54	; 84
     7c8:	f9 e0       	ldi	r31, 0x09	; 9
     7ca:	11 92       	st	Z+, r1
     7cc:	ce 17       	cp	r28, r30
     7ce:	df 07       	cpc	r29, r31
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <UserVerify_Tick+0x110>
     7d2:	f8 01       	movw	r30, r16
     7d4:	f0 82       	st	Z, r15
     7d6:	ea d5       	rcall	.+3028   	; 0x13ac <nokia_lcd_clear>
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	8c ec       	ldi	r24, 0xCC	; 204
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	cc d6       	rcall	.+3480   	; 0x1578 <nokia_lcd_write_string>
     7e0:	6a e0       	ldi	r22, 0x0A	; 10
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	db d6       	rcall	.+3510   	; 0x159c <nokia_lcd_set_cursor>
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	82 ed       	ldi	r24, 0xD2	; 210
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	c5 d6       	rcall	.+3466   	; 0x1578 <nokia_lcd_write_string>
     7ee:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <uv_password_fails>
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	80 5d       	subi	r24, 0xD0	; 208
     7f6:	16 d6       	rcall	.+3116   	; 0x1424 <nokia_lcd_write_char>
     7f8:	64 e1       	ldi	r22, 0x14	; 20
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	cf d6       	rcall	.+3486   	; 0x159c <nokia_lcd_set_cursor>
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	c8 01       	movw	r24, r16
     802:	ba d6       	rcall	.+3444   	; 0x1578 <nokia_lcd_write_string>
     804:	d0 d6       	rcall	.+3488   	; 0x15a6 <nokia_lcd_render>
     806:	06 c0       	rjmp	.+12     	; 0x814 <UserVerify_Tick+0x15a>
     808:	8f e4       	ldi	r24, 0x4F	; 79
     80a:	93 ec       	ldi	r25, 0xC3	; 195
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <UserVerify_Tick+0x152>
     810:	00 c0       	rjmp	.+0      	; 0x812 <UserVerify_Tick+0x158>
     812:	00 00       	nop
     814:	23 de       	rcall	.-954    	; 0x45c <GetKeypadKey>
     816:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <uv_selection>
     81a:	88 23       	and	r24, r24
     81c:	a9 f3       	breq	.-22     	; 0x808 <UserVerify_Tick+0x14e>
     81e:	06 c0       	rjmp	.+12     	; 0x82c <UserVerify_Tick+0x172>
     820:	ef e4       	ldi	r30, 0x4F	; 79
     822:	f3 ec       	ldi	r31, 0xC3	; 195
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <UserVerify_Tick+0x16a>
     828:	00 c0       	rjmp	.+0      	; 0x82a <UserVerify_Tick+0x170>
     82a:	00 00       	nop
     82c:	17 de       	rcall	.-978    	; 0x45c <GetKeypadKey>
     82e:	80 93 4f 09 	sts	0x094F, r24	; 0x80094f <uv_prev_select>
     832:	90 91 50 09 	lds	r25, 0x0950	; 0x800950 <uv_selection>
     836:	89 17       	cp	r24, r25
     838:	99 f3       	breq	.-26     	; 0x820 <UserVerify_Tick+0x166>
     83a:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <uv_selection>
     83e:	83 32       	cpi	r24, 0x23	; 35
     840:	09 f0       	breq	.+2      	; 0x844 <UserVerify_Tick+0x18a>
     842:	86 cf       	rjmp	.-244    	; 0x750 <UserVerify_Tick+0x96>
     844:	15 df       	rcall	.-470    	; 0x670 <remove_password_verification>
     846:	81 11       	cpse	r24, r1
     848:	06 c0       	rjmp	.+12     	; 0x856 <UserVerify_Tick+0x19c>
     84a:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <uv_password_fails>
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 93 4e 09 	sts	0x094E, r24	; 0x80094e <uv_password_fails>
     854:	0b c0       	rjmp	.+22     	; 0x86c <UserVerify_Tick+0x1b2>
     856:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <uv_password_fails>
     85a:	80 91 b5 0b 	lds	r24, 0x0BB5	; 0x800bb5 <user_verify_state>
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	e9 f0       	breq	.+58     	; 0x89c <UserVerify_Tick+0x1e2>
     862:	68 f0       	brcs	.+26     	; 0x87e <UserVerify_Tick+0x1c4>
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	09 f0       	breq	.+2      	; 0x86a <UserVerify_Tick+0x1b0>
     868:	e9 c0       	rjmp	.+466    	; 0xa3c <UserVerify_Tick+0x382>
     86a:	67 c0       	rjmp	.+206    	; 0x93a <UserVerify_Tick+0x280>
     86c:	80 91 b5 0b 	lds	r24, 0x0BB5	; 0x800bb5 <user_verify_state>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	a1 f0       	breq	.+40     	; 0x89c <UserVerify_Tick+0x1e2>
     874:	20 f0       	brcs	.+8      	; 0x87e <UserVerify_Tick+0x1c4>
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	09 f4       	brne	.+2      	; 0x87c <UserVerify_Tick+0x1c2>
     87a:	5b c0       	rjmp	.+182    	; 0x932 <UserVerify_Tick+0x278>
     87c:	df c0       	rjmp	.+446    	; 0xa3c <UserVerify_Tick+0x382>
     87e:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <user_verify_flag>
     882:	88 23       	and	r24, r24
     884:	09 f4       	brne	.+2      	; 0x888 <UserVerify_Tick+0x1ce>
     886:	da c0       	rjmp	.+436    	; 0xa3c <UserVerify_Tick+0x382>
     888:	4e de       	rcall	.-868    	; 0x526 <removeusers_intro>
     88a:	85 e0       	ldi	r24, 0x05	; 5
     88c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <user_to_remove>
     890:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <correct_user_credentials>
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <user_verify_state>
     89a:	d0 c0       	rjmp	.+416    	; 0xa3c <UserVerify_Tick+0x382>
     89c:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <uv_selection>
     8a0:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <number_of_users>
     8a4:	89 17       	cp	r24, r25
     8a6:	80 f5       	brcc	.+96     	; 0x908 <UserVerify_Tick+0x24e>
     8a8:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <user_verify_flag>
     8ac:	99 23       	and	r25, r25
     8ae:	81 f1       	breq	.+96     	; 0x910 <UserVerify_Tick+0x256>
     8b0:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <user_to_remove>
     8b4:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <uv_password_fails>
     8b8:	79 d5       	rcall	.+2802   	; 0x13ac <nokia_lcd_clear>
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	8c ec       	ldi	r24, 0xCC	; 204
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	5b d6       	rcall	.+3254   	; 0x1578 <nokia_lcd_write_string>
     8c2:	6a e0       	ldi	r22, 0x0A	; 10
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	6a d6       	rcall	.+3284   	; 0x159c <nokia_lcd_set_cursor>
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	82 ed       	ldi	r24, 0xD2	; 210
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	54 d6       	rcall	.+3240   	; 0x1578 <nokia_lcd_write_string>
     8d0:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <uv_password_fails>
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	80 5d       	subi	r24, 0xD0	; 208
     8d8:	a5 d5       	rcall	.+2890   	; 0x1424 <nokia_lcd_write_char>
     8da:	64 e1       	ldi	r22, 0x14	; 20
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	5e d6       	rcall	.+3260   	; 0x159c <nokia_lcd_set_cursor>
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	8d ed       	ldi	r24, 0xDD	; 221
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	48 d6       	rcall	.+3216   	; 0x1578 <nokia_lcd_write_string>
     8e8:	5e d6       	rcall	.+3260   	; 0x15a6 <nokia_lcd_render>
     8ea:	e4 e5       	ldi	r30, 0x54	; 84
     8ec:	f9 e0       	ldi	r31, 0x09	; 9
     8ee:	8c e5       	ldi	r24, 0x5C	; 92
     8f0:	99 e0       	ldi	r25, 0x09	; 9
     8f2:	11 92       	st	Z+, r1
     8f4:	e8 17       	cp	r30, r24
     8f6:	f9 07       	cpc	r31, r25
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <UserVerify_Tick+0x238>
     8fa:	8a e2       	ldi	r24, 0x2A	; 42
     8fc:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <temporary_password>
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <user_verify_state>
     906:	9a c0       	rjmp	.+308    	; 0xa3c <UserVerify_Tick+0x382>
     908:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <user_verify_flag>
     90c:	81 11       	cpse	r24, r1
     90e:	96 c0       	rjmp	.+300    	; 0xa3c <UserVerify_Tick+0x382>
     910:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <uv_password_fails>
     914:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <password_size>
     918:	e4 e5       	ldi	r30, 0x54	; 84
     91a:	f9 e0       	ldi	r31, 0x09	; 9
     91c:	8c e5       	ldi	r24, 0x5C	; 92
     91e:	99 e0       	ldi	r25, 0x09	; 9
     920:	11 92       	st	Z+, r1
     922:	e8 17       	cp	r30, r24
     924:	f9 07       	cpc	r31, r25
     926:	e1 f7       	brne	.-8      	; 0x920 <UserVerify_Tick+0x266>
     928:	10 92 54 09 	sts	0x0954, r1	; 0x800954 <temporary_password>
     92c:	10 92 b5 0b 	sts	0x0BB5, r1	; 0x800bb5 <user_verify_state>
     930:	85 c0       	rjmp	.+266    	; 0xa3c <UserVerify_Tick+0x382>
     932:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <uv_password_fails>
     936:	81 11       	cpse	r24, r1
     938:	1a c0       	rjmp	.+52     	; 0x96e <UserVerify_Tick+0x2b4>
     93a:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <user_verify_flag>
     93e:	88 23       	and	r24, r24
     940:	09 f4       	brne	.+2      	; 0x944 <UserVerify_Tick+0x28a>
     942:	6c c0       	rjmp	.+216    	; 0xa1c <UserVerify_Tick+0x362>
     944:	33 d5       	rcall	.+2662   	; 0x13ac <nokia_lcd_clear>
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	8f ed       	ldi	r24, 0xDF	; 223
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	15 d6       	rcall	.+3114   	; 0x1578 <nokia_lcd_write_string>
     94e:	6a e0       	ldi	r22, 0x0A	; 10
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	24 d6       	rcall	.+3144   	; 0x159c <nokia_lcd_set_cursor>
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	8f ee       	ldi	r24, 0xEF	; 239
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e d6       	rcall	.+3100   	; 0x1578 <nokia_lcd_write_string>
     95c:	24 d6       	rcall	.+3144   	; 0x15a6 <nokia_lcd_render>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <correct_user_credentials>
     964:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
     968:	10 92 b5 0b 	sts	0x0BB5, r1	; 0x800bb5 <user_verify_state>
     96c:	67 c0       	rjmp	.+206    	; 0xa3c <UserVerify_Tick+0x382>
     96e:	83 30       	cpi	r24, 0x03	; 3
     970:	39 f5       	brne	.+78     	; 0x9c0 <UserVerify_Tick+0x306>
     972:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <user_verify_flag>
     976:	88 23       	and	r24, r24
     978:	09 f4       	brne	.+2      	; 0x97c <UserVerify_Tick+0x2c2>
     97a:	50 c0       	rjmp	.+160    	; 0xa1c <UserVerify_Tick+0x362>
     97c:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <uv_password_fails>
     980:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <password_size>
     984:	e4 e5       	ldi	r30, 0x54	; 84
     986:	f9 e0       	ldi	r31, 0x09	; 9
     988:	8c e5       	ldi	r24, 0x5C	; 92
     98a:	99 e0       	ldi	r25, 0x09	; 9
     98c:	11 92       	st	Z+, r1
     98e:	8e 17       	cp	r24, r30
     990:	9f 07       	cpc	r25, r31
     992:	e1 f7       	brne	.-8      	; 0x98c <UserVerify_Tick+0x2d2>
     994:	10 92 54 09 	sts	0x0954, r1	; 0x800954 <temporary_password>
     998:	09 d5       	rcall	.+2578   	; 0x13ac <nokia_lcd_clear>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	8f ed       	ldi	r24, 0xDF	; 223
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	eb d5       	rcall	.+3030   	; 0x1578 <nokia_lcd_write_string>
     9a2:	6a e0       	ldi	r22, 0x0A	; 10
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	fa d5       	rcall	.+3060   	; 0x159c <nokia_lcd_set_cursor>
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	8d ee       	ldi	r24, 0xED	; 237
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	e4 d5       	rcall	.+3016   	; 0x1578 <nokia_lcd_write_string>
     9b0:	fa d5       	rcall	.+3060   	; 0x15a6 <nokia_lcd_render>
     9b2:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <correct_user_credentials>
     9b6:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
     9ba:	10 92 b5 0b 	sts	0x0BB5, r1	; 0x800bb5 <user_verify_state>
     9be:	3e c0       	rjmp	.+124    	; 0xa3c <UserVerify_Tick+0x382>
     9c0:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <user_verify_flag>
     9c4:	88 23       	and	r24, r24
     9c6:	51 f1       	breq	.+84     	; 0xa1c <UserVerify_Tick+0x362>
     9c8:	f1 d4       	rcall	.+2530   	; 0x13ac <nokia_lcd_clear>
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	8c ec       	ldi	r24, 0xCC	; 204
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	d3 d5       	rcall	.+2982   	; 0x1578 <nokia_lcd_write_string>
     9d2:	6a e0       	ldi	r22, 0x0A	; 10
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	e2 d5       	rcall	.+3012   	; 0x159c <nokia_lcd_set_cursor>
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	82 ed       	ldi	r24, 0xD2	; 210
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	cc d5       	rcall	.+2968   	; 0x1578 <nokia_lcd_write_string>
     9e0:	80 91 4e 09 	lds	r24, 0x094E	; 0x80094e <uv_password_fails>
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	80 5d       	subi	r24, 0xD0	; 208
     9e8:	1d d5       	rcall	.+2618   	; 0x1424 <nokia_lcd_write_char>
     9ea:	64 e1       	ldi	r22, 0x14	; 20
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	d6 d5       	rcall	.+2988   	; 0x159c <nokia_lcd_set_cursor>
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	8d ed       	ldi	r24, 0xDD	; 221
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	c0 d5       	rcall	.+2944   	; 0x1578 <nokia_lcd_write_string>
     9f8:	d6 d5       	rcall	.+2988   	; 0x15a6 <nokia_lcd_render>
     9fa:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <password_size>
     9fe:	e4 e5       	ldi	r30, 0x54	; 84
     a00:	f9 e0       	ldi	r31, 0x09	; 9
     a02:	8c e5       	ldi	r24, 0x5C	; 92
     a04:	99 e0       	ldi	r25, 0x09	; 9
     a06:	11 92       	st	Z+, r1
     a08:	8e 17       	cp	r24, r30
     a0a:	9f 07       	cpc	r25, r31
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <UserVerify_Tick+0x34c>
     a0e:	8a e2       	ldi	r24, 0x2A	; 42
     a10:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <temporary_password>
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <user_verify_state>
     a1a:	10 c0       	rjmp	.+32     	; 0xa3c <UserVerify_Tick+0x382>
     a1c:	10 92 4e 09 	sts	0x094E, r1	; 0x80094e <uv_password_fails>
     a20:	10 92 53 09 	sts	0x0953, r1	; 0x800953 <password_size>
     a24:	e4 e5       	ldi	r30, 0x54	; 84
     a26:	f9 e0       	ldi	r31, 0x09	; 9
     a28:	8c e5       	ldi	r24, 0x5C	; 92
     a2a:	99 e0       	ldi	r25, 0x09	; 9
     a2c:	11 92       	st	Z+, r1
     a2e:	e8 17       	cp	r30, r24
     a30:	f9 07       	cpc	r31, r25
     a32:	e1 f7       	brne	.-8      	; 0xa2c <UserVerify_Tick+0x372>
     a34:	10 92 54 09 	sts	0x0954, r1	; 0x800954 <temporary_password>
     a38:	10 92 b5 0b 	sts	0x0BB5, r1	; 0x800bb5 <user_verify_state>
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	08 95       	ret

00000a48 <UserVerifyTask>:
     a48:	10 92 b5 0b 	sts	0x0BB5, r1	; 0x800bb5 <user_verify_state>
     a4c:	36 de       	rcall	.-916    	; 0x6ba <UserVerify_Tick>
     a4e:	84 e6       	ldi	r24, 0x64	; 100
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <vTaskDelay>
     a56:	fa cf       	rjmp	.-12     	; 0xa4c <UserVerifyTask+0x4>

00000a58 <UserVerifyPulse>:
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	a1 2c       	mov	r10, r1
     a68:	b1 2c       	mov	r11, r1
     a6a:	c1 2c       	mov	r12, r1
     a6c:	d1 2c       	mov	r13, r1
     a6e:	e1 2c       	mov	r14, r1
     a70:	f1 2c       	mov	r15, r1
     a72:	08 2f       	mov	r16, r24
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	45 e5       	ldi	r20, 0x55	; 85
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	6c ef       	ldi	r22, 0xFC	; 252
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	84 e2       	ldi	r24, 0x24	; 36
     a82:	95 e0       	ldi	r25, 0x05	; 5
     a84:	37 d7       	rcall	.+3694   	; 0x18f4 <xTaskGenericCreate>
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	08 95       	ret

00000a96 <GetDrink_Tick>:
     a96:	80 91 b7 0b 	lds	r24, 0x0BB7	; 0x800bb7 <get_drink_state>
     a9a:	83 30       	cpi	r24, 0x03	; 3
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <GetDrink_Tick+0xa>
     a9e:	47 c0       	rjmp	.+142    	; 0xb2e <GetDrink_Tick+0x98>
     aa0:	28 f4       	brcc	.+10     	; 0xaac <GetDrink_Tick+0x16>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	81 f0       	breq	.+32     	; 0xac6 <GetDrink_Tick+0x30>
     aa6:	82 30       	cpi	r24, 0x02	; 2
     aa8:	41 f1       	breq	.+80     	; 0xafa <GetDrink_Tick+0x64>
     aaa:	8c c0       	rjmp	.+280    	; 0xbc4 <GetDrink_Tick+0x12e>
     aac:	85 30       	cpi	r24, 0x05	; 5
     aae:	09 f4       	brne	.+2      	; 0xab2 <GetDrink_Tick+0x1c>
     ab0:	52 c0       	rjmp	.+164    	; 0xb56 <GetDrink_Tick+0xc0>
     ab2:	86 30       	cpi	r24, 0x06	; 6
     ab4:	09 f4       	brne	.+2      	; 0xab8 <GetDrink_Tick+0x22>
     ab6:	80 c0       	rjmp	.+256    	; 0xbb8 <GetDrink_Tick+0x122>
     ab8:	85 c0       	rjmp	.+266    	; 0xbc4 <GetDrink_Tick+0x12e>
     aba:	8f e4       	ldi	r24, 0x4F	; 79
     abc:	93 ec       	ldi	r25, 0xC3	; 195
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <GetDrink_Tick+0x28>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <GetDrink_Tick+0x2e>
     ac4:	00 00       	nop
     ac6:	ca dc       	rcall	.-1644   	; 0x45c <GetKeypadKey>
     ac8:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <gd_selection>
     acc:	88 23       	and	r24, r24
     ace:	a9 f3       	breq	.-22     	; 0xaba <GetDrink_Tick+0x24>
     ad0:	06 c0       	rjmp	.+12     	; 0xade <GetDrink_Tick+0x48>
     ad2:	8f e4       	ldi	r24, 0x4F	; 79
     ad4:	93 ec       	ldi	r25, 0xC3	; 195
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <GetDrink_Tick+0x40>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <GetDrink_Tick+0x46>
     adc:	00 00       	nop
     ade:	be dc       	rcall	.-1668   	; 0x45c <GetKeypadKey>
     ae0:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <gd_prev_select>
     ae4:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <gd_selection>
     ae8:	89 17       	cp	r24, r25
     aea:	99 f3       	breq	.-26     	; 0xad2 <GetDrink_Tick+0x3c>
     aec:	6b c0       	rjmp	.+214    	; 0xbc4 <GetDrink_Tick+0x12e>
     aee:	8f e4       	ldi	r24, 0x4F	; 79
     af0:	93 ec       	ldi	r25, 0xC3	; 195
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <GetDrink_Tick+0x5c>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <GetDrink_Tick+0x62>
     af8:	00 00       	nop
     afa:	b0 dc       	rcall	.-1696   	; 0x45c <GetKeypadKey>
     afc:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <gd_selection>
     b00:	88 23       	and	r24, r24
     b02:	a9 f3       	breq	.-22     	; 0xaee <GetDrink_Tick+0x58>
     b04:	06 c0       	rjmp	.+12     	; 0xb12 <GetDrink_Tick+0x7c>
     b06:	8f e4       	ldi	r24, 0x4F	; 79
     b08:	93 ec       	ldi	r25, 0xC3	; 195
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <GetDrink_Tick+0x74>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <GetDrink_Tick+0x7a>
     b10:	00 00       	nop
     b12:	a4 dc       	rcall	.-1720   	; 0x45c <GetKeypadKey>
     b14:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <gd_prev_select>
     b18:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <gd_selection>
     b1c:	89 17       	cp	r24, r25
     b1e:	99 f3       	breq	.-26     	; 0xb06 <GetDrink_Tick+0x70>
     b20:	51 c0       	rjmp	.+162    	; 0xbc4 <GetDrink_Tick+0x12e>
     b22:	8f e4       	ldi	r24, 0x4F	; 79
     b24:	93 ec       	ldi	r25, 0xC3	; 195
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <GetDrink_Tick+0x90>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <GetDrink_Tick+0x96>
     b2c:	00 00       	nop
     b2e:	96 dc       	rcall	.-1748   	; 0x45c <GetKeypadKey>
     b30:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <gd_selection>
     b34:	88 23       	and	r24, r24
     b36:	a9 f3       	breq	.-22     	; 0xb22 <GetDrink_Tick+0x8c>
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <GetDrink_Tick+0xb0>
     b3a:	8f e4       	ldi	r24, 0x4F	; 79
     b3c:	93 ec       	ldi	r25, 0xC3	; 195
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <GetDrink_Tick+0xa8>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <GetDrink_Tick+0xae>
     b44:	00 00       	nop
     b46:	8a dc       	rcall	.-1772   	; 0x45c <GetKeypadKey>
     b48:	80 93 4b 09 	sts	0x094B, r24	; 0x80094b <gd_prev_select>
     b4c:	90 91 4c 09 	lds	r25, 0x094C	; 0x80094c <gd_selection>
     b50:	89 17       	cp	r24, r25
     b52:	99 f3       	breq	.-26     	; 0xb3a <GetDrink_Tick+0xa4>
     b54:	37 c0       	rjmp	.+110    	; 0xbc4 <GetDrink_Tick+0x12e>
     b56:	80 b1       	in	r24, 0x00	; 0
     b58:	80 95       	com	r24
     b5a:	83 ff       	sbrs	r24, 3
     b5c:	12 c0       	rjmp	.+36     	; 0xb82 <GetDrink_Tick+0xec>
     b5e:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <user_to_remove>
     b62:	9b e1       	ldi	r25, 0x1B	; 27
     b64:	e9 9f       	mul	r30, r25
     b66:	f0 01       	movw	r30, r0
     b68:	11 24       	eor	r1, r1
     b6a:	ef 5f       	subi	r30, 0xFF	; 255
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	81 89       	ldd	r24, Z+17	; 0x11
     b70:	87 30       	cpi	r24, 0x07	; 7
     b72:	21 f4       	brne	.+8      	; 0xb7c <GetDrink_Tick+0xe6>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     b7a:	18 c0       	rjmp	.+48     	; 0xbac <GetDrink_Tick+0x116>
     b7c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     b80:	15 c0       	rjmp	.+42     	; 0xbac <GetDrink_Tick+0x116>
     b82:	80 b1       	in	r24, 0x00	; 0
     b84:	80 95       	com	r24
     b86:	82 ff       	sbrs	r24, 2
     b88:	11 c0       	rjmp	.+34     	; 0xbac <GetDrink_Tick+0x116>
     b8a:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <user_to_remove>
     b8e:	8b e1       	ldi	r24, 0x1B	; 27
     b90:	e8 9f       	mul	r30, r24
     b92:	f0 01       	movw	r30, r0
     b94:	11 24       	eor	r1, r1
     b96:	ef 5f       	subi	r30, 0xFF	; 255
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	81 89       	ldd	r24, Z+17	; 0x11
     b9c:	8a 30       	cpi	r24, 0x0A	; 10
     b9e:	21 f4       	brne	.+8      	; 0xba8 <GetDrink_Tick+0x112>
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <GetDrink_Tick+0x116>
     ba8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     bac:	80 b1       	in	r24, 0x00	; 0
     bae:	80 95       	com	r24
     bb0:	81 70       	andi	r24, 0x01	; 1
     bb2:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <key_door_sensor>
     bb6:	ae c0       	rjmp	.+348    	; 0xd14 <GetDrink_Tick+0x27e>
     bb8:	80 b1       	in	r24, 0x00	; 0
     bba:	80 95       	com	r24
     bbc:	81 70       	andi	r24, 0x01	; 1
     bbe:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <key_door_sensor>
     bc2:	c9 c0       	rjmp	.+402    	; 0xd56 <GetDrink_Tick+0x2c0>
     bc4:	e0 91 b7 0b 	lds	r30, 0x0BB7	; 0x800bb7 <get_drink_state>
     bc8:	8e 2f       	mov	r24, r30
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	87 30       	cpi	r24, 0x07	; 7
     bce:	91 05       	cpc	r25, r1
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <GetDrink_Tick+0x13e>
     bd2:	d7 c0       	rjmp	.+430    	; 0xd82 <GetDrink_Tick+0x2ec>
     bd4:	fc 01       	movw	r30, r24
     bd6:	ea 5b       	subi	r30, 0xBA	; 186
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__tablejump2__>
     bde:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <get_drink_flag>
     be2:	88 23       	and	r24, r24
     be4:	09 f4       	brne	.+2      	; 0xbe8 <GetDrink_Tick+0x152>
     be6:	cf c0       	rjmp	.+414    	; 0xd86 <GetDrink_Tick+0x2f0>
     be8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <number_of_users>
     bec:	81 11       	cpse	r24, r1
     bee:	0c c0       	rjmp	.+24     	; 0xc08 <GetDrink_Tick+0x172>
     bf0:	dd d3       	rcall	.+1978   	; 0x13ac <nokia_lcd_clear>
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	84 e9       	ldi	r24, 0x94	; 148
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	bf d4       	rcall	.+2430   	; 0x1578 <nokia_lcd_write_string>
     bfa:	d5 d4       	rcall	.+2474   	; 0x15a6 <nokia_lcd_render>
     bfc:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <get_drink_state>
     c06:	08 95       	ret
     c08:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <type_of_drink>
     c0c:	81 11       	cpse	r24, r1
     c0e:	0c c0       	rjmp	.+24     	; 0xc28 <GetDrink_Tick+0x192>
     c10:	cd d3       	rcall	.+1946   	; 0x13ac <nokia_lcd_clear>
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	8b e0       	ldi	r24, 0x0B	; 11
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	af d4       	rcall	.+2398   	; 0x1578 <nokia_lcd_write_string>
     c1a:	c5 d4       	rcall	.+2442   	; 0x15a6 <nokia_lcd_render>
     c1c:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <get_drink_state>
     c26:	08 95       	ret
     c28:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <drink_has_been_removed>
     c2c:	88 23       	and	r24, r24
     c2e:	61 f0       	breq	.+24     	; 0xc48 <GetDrink_Tick+0x1b2>
     c30:	bd d3       	rcall	.+1914   	; 0x13ac <nokia_lcd_clear>
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	83 e4       	ldi	r24, 0x43	; 67
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	9f d4       	rcall	.+2366   	; 0x1578 <nokia_lcd_write_string>
     c3a:	b5 d4       	rcall	.+2410   	; 0x15a6 <nokia_lcd_render>
     c3c:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <get_drink_state>
     c46:	08 95       	ret
     c48:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <correct_user_credentials>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <user_verify_flag>
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <get_drink_state>
     c58:	08 95       	ret
     c5a:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <gd_selection>
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <GetDrink_Tick+0x1ce>
     c62:	91 c0       	rjmp	.+290    	; 0xd86 <GetDrink_Tick+0x2f0>
     c64:	a3 d3       	rcall	.+1862   	; 0x13ac <nokia_lcd_clear>
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	80 e7       	ldi	r24, 0x70	; 112
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	85 d4       	rcall	.+2314   	; 0x1578 <nokia_lcd_write_string>
     c6e:	9b d4       	rcall	.+2358   	; 0x15a6 <nokia_lcd_render>
     c70:	10 92 4d 09 	sts	0x094D, r1	; 0x80094d <get_drink_flag>
     c74:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     c78:	08 95       	ret
     c7a:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <gd_selection>
     c7e:	88 23       	and	r24, r24
     c80:	09 f4       	brne	.+2      	; 0xc84 <GetDrink_Tick+0x1ee>
     c82:	81 c0       	rjmp	.+258    	; 0xd86 <GetDrink_Tick+0x2f0>
     c84:	93 d3       	rcall	.+1830   	; 0x13ac <nokia_lcd_clear>
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	80 e7       	ldi	r24, 0x70	; 112
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	75 d4       	rcall	.+2282   	; 0x1578 <nokia_lcd_write_string>
     c8e:	8b d4       	rcall	.+2326   	; 0x15a6 <nokia_lcd_render>
     c90:	10 92 4d 09 	sts	0x094D, r1	; 0x80094d <get_drink_flag>
     c94:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     c98:	08 95       	ret
     c9a:	80 91 4c 09 	lds	r24, 0x094C	; 0x80094c <gd_selection>
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <GetDrink_Tick+0x20e>
     ca2:	71 c0       	rjmp	.+226    	; 0xd86 <GetDrink_Tick+0x2f0>
     ca4:	83 d3       	rcall	.+1798   	; 0x13ac <nokia_lcd_clear>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 e7       	ldi	r24, 0x70	; 112
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	65 d4       	rcall	.+2250   	; 0x1578 <nokia_lcd_write_string>
     cae:	7b d4       	rcall	.+2294   	; 0x15a6 <nokia_lcd_render>
     cb0:	10 92 4d 09 	sts	0x094D, r1	; 0x80094d <get_drink_flag>
     cb4:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     cb8:	08 95       	ret
     cba:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <user_verify_flag>
     cbe:	81 11       	cpse	r24, r1
     cc0:	62 c0       	rjmp	.+196    	; 0xd86 <GetDrink_Tick+0x2f0>
     cc2:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <correct_user_credentials>
     cc6:	88 23       	and	r24, r24
     cc8:	c9 f0       	breq	.+50     	; 0xcfc <GetDrink_Tick+0x266>
     cca:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <current_user>
     cce:	85 30       	cpi	r24, 0x05	; 5
     cd0:	21 f4       	brne	.+8      	; 0xcda <GetDrink_Tick+0x244>
     cd2:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <user_to_remove>
     cd6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <current_user>
     cda:	68 d3       	rcall	.+1744   	; 0x13ac <nokia_lcd_clear>
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	8a e7       	ldi	r24, 0x7A	; 122
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	4a d4       	rcall	.+2196   	; 0x1578 <nokia_lcd_write_string>
     ce4:	60 d4       	rcall	.+2240   	; 0x15a6 <nokia_lcd_render>
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <key_door_signal>
     cf2:	28 9a       	sbi	0x05, 0	; 5
     cf4:	85 e0       	ldi	r24, 0x05	; 5
     cf6:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <get_drink_state>
     cfa:	08 95       	ret
     cfc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <get_key_flag>
     d00:	81 11       	cpse	r24, r1
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <GetDrink_Tick+0x274>
     d04:	85 e0       	ldi	r24, 0x05	; 5
     d06:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <current_user>
     d0a:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <correct_user_credentials>
     d0e:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     d12:	08 95       	ret
     d14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	a9 f1       	breq	.+106    	; 0xd86 <GetDrink_Tick+0x2f0>
     d1c:	81 11       	cpse	r24, r1
     d1e:	0b c0       	rjmp	.+22     	; 0xd36 <GetDrink_Tick+0x2a0>
     d20:	45 d3       	rcall	.+1674   	; 0x13ac <nokia_lcd_clear>
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	87 e8       	ldi	r24, 0x87	; 135
     d26:	92 e0       	ldi	r25, 0x02	; 2
     d28:	27 d4       	rcall	.+2126   	; 0x1578 <nokia_lcd_write_string>
     d2a:	3d d4       	rcall	.+2170   	; 0x15a6 <nokia_lcd_render>
     d2c:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <correct_user_credentials>
     d30:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     d34:	08 95       	ret
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	31 f5       	brne	.+76     	; 0xd86 <GetDrink_Tick+0x2f0>
     d3a:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <key_door_sensor>
     d3e:	81 11       	cpse	r24, r1
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <GetDrink_Tick+0x2b8>
     d42:	34 d3       	rcall	.+1640   	; 0x13ac <nokia_lcd_clear>
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	86 e9       	ldi	r24, 0x96	; 150
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	16 d4       	rcall	.+2092   	; 0x1578 <nokia_lcd_write_string>
     d4c:	2c d4       	rcall	.+2136   	; 0x15a6 <nokia_lcd_render>
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <get_drink_state>
     d54:	08 95       	ret
     d56:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <key_door_sensor>
     d5a:	88 23       	and	r24, r24
     d5c:	a1 f0       	breq	.+40     	; 0xd86 <GetDrink_Tick+0x2f0>
     d5e:	26 d3       	rcall	.+1612   	; 0x13ac <nokia_lcd_clear>
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	85 ea       	ldi	r24, 0xA5	; 165
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	08 d4       	rcall	.+2064   	; 0x1578 <nokia_lcd_write_string>
     d68:	1e d4       	rcall	.+2108   	; 0x15a6 <nokia_lcd_render>
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <drink_has_been_removed>
     d70:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <key_door_signal>
     d74:	28 98       	cbi	0x05, 0	; 5
     d76:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <liquor_door_signal>
     d7a:	29 9a       	sbi	0x05, 1	; 5
     d7c:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     d80:	08 95       	ret
     d82:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     d86:	08 95       	ret

00000d88 <GetDrinkTask>:
     d88:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <get_drink_state>
     d8c:	84 de       	rcall	.-760    	; 0xa96 <GetDrink_Tick>
     d8e:	84 e6       	ldi	r24, 0x64	; 100
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <vTaskDelay>
     d96:	fa cf       	rjmp	.-12     	; 0xd8c <GetDrinkTask+0x4>

00000d98 <GetDrinkPulse>:
     d98:	af 92       	push	r10
     d9a:	bf 92       	push	r11
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	a1 2c       	mov	r10, r1
     da8:	b1 2c       	mov	r11, r1
     daa:	c1 2c       	mov	r12, r1
     dac:	d1 2c       	mov	r13, r1
     dae:	e1 2c       	mov	r14, r1
     db0:	f1 2c       	mov	r15, r1
     db2:	08 2f       	mov	r16, r24
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	45 e5       	ldi	r20, 0x55	; 85
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	6c ea       	ldi	r22, 0xAC	; 172
     dbe:	72 e0       	ldi	r23, 0x02	; 2
     dc0:	84 ec       	ldi	r24, 0xC4	; 196
     dc2:	96 e0       	ldi	r25, 0x06	; 6
     dc4:	97 d5       	rcall	.+2862   	; 0x18f4 <xTaskGenericCreate>
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	08 95       	ret

00000dd6 <GetKey_Tick>:
}

void GetKey_Tick(){
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
	//Actions
	switch(get_key_state){
     dea:	e0 91 b6 0b 	lds	r30, 0x0BB6	; 0x800bb6 <get_key_state>
     dee:	8e 2f       	mov	r24, r30
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	fc 01       	movw	r30, r24
     df4:	31 97       	sbiw	r30, 0x01	; 1
     df6:	e8 30       	cpi	r30, 0x08	; 8
     df8:	f1 05       	cpc	r31, r1
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <GetKey_Tick+0x28>
     dfc:	27 c1       	rjmp	.+590    	; 0x104c <GetKey_Tick+0x276>
     dfe:	e3 5b       	subi	r30, 0xB3	; 179
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__tablejump2__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e06:	8f e4       	ldi	r24, 0x4F	; 79
     e08:	93 ec       	ldi	r25, 0xC3	; 195
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <GetKey_Tick+0x34>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <GetKey_Tick+0x3a>
     e10:	00 00       	nop
		case gk_init:
			break;
			
		case gk_no_user:
			while((gk_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     e12:	24 db       	rcall	.-2488   	; 0x45c <GetKeypadKey>
     e14:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <gk_selection>
     e18:	88 23       	and	r24, r24
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <GetKey_Tick+0x30>
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <GetKey_Tick+0x54>
     e1e:	8f e4       	ldi	r24, 0x4F	; 79
     e20:	93 ec       	ldi	r25, 0xC3	; 195
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <GetKey_Tick+0x4c>
     e26:	00 c0       	rjmp	.+0      	; 0xe28 <GetKey_Tick+0x52>
			while((gk_prev_select = GetKeypadKey()) == gk_selection){ _delay_ms(200); }
     e28:	00 00       	nop
     e2a:	18 db       	rcall	.-2512   	; 0x45c <GetKeypadKey>
     e2c:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <gk_prev_select>
     e30:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <gk_selection>
     e34:	89 17       	cp	r24, r25
     e36:	99 f3       	breq	.-26     	; 0xe1e <GetKey_Tick+0x48>
     e38:	09 c1       	rjmp	.+530    	; 0x104c <GetKey_Tick+0x276>
     e3a:	8f e4       	ldi	r24, 0x4F	; 79
     e3c:	93 ec       	ldi	r25, 0xC3	; 195
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <GetKey_Tick+0x68>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <GetKey_Tick+0x6e>
			break;
			
		case gk_no_drink:
			while((gk_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     e44:	00 00       	nop
     e46:	0a db       	rcall	.-2540   	; 0x45c <GetKeypadKey>
     e48:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <gk_selection>
     e4c:	88 23       	and	r24, r24
     e4e:	a9 f3       	breq	.-22     	; 0xe3a <GetKey_Tick+0x64>
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <GetKey_Tick+0x88>
     e52:	8f e4       	ldi	r24, 0x4F	; 79
     e54:	93 ec       	ldi	r25, 0xC3	; 195
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <GetKey_Tick+0x80>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <GetKey_Tick+0x86>
			while((gk_prev_select = GetKeypadKey()) == gk_selection){ _delay_ms(200); }
     e5c:	00 00       	nop
     e5e:	fe da       	rcall	.-2564   	; 0x45c <GetKeypadKey>
     e60:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <gk_prev_select>
     e64:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <gk_selection>
     e68:	89 17       	cp	r24, r25
     e6a:	99 f3       	breq	.-26     	; 0xe52 <GetKey_Tick+0x7c>
     e6c:	ef c0       	rjmp	.+478    	; 0x104c <GetKey_Tick+0x276>
     e6e:	8f e4       	ldi	r24, 0x4F	; 79
     e70:	93 ec       	ldi	r25, 0xC3	; 195
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <GetKey_Tick+0x9c>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <GetKey_Tick+0xa2>
			break;
			
		case gk_timer:
			while((gk_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     e78:	00 00       	nop
     e7a:	f0 da       	rcall	.-2592   	; 0x45c <GetKeypadKey>
     e7c:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <gk_selection>
     e80:	88 23       	and	r24, r24
     e82:	a9 f3       	breq	.-22     	; 0xe6e <GetKey_Tick+0x98>
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <GetKey_Tick+0xbc>
     e86:	8f e4       	ldi	r24, 0x4F	; 79
     e88:	93 ec       	ldi	r25, 0xC3	; 195
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <GetKey_Tick+0xb4>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <GetKey_Tick+0xba>
			while((gk_prev_select = GetKeypadKey()) == gk_selection){ _delay_ms(200); }
     e90:	00 00       	nop
     e92:	e4 da       	rcall	.-2616   	; 0x45c <GetKeypadKey>
     e94:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <gk_prev_select>
     e98:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <gk_selection>
     e9c:	89 17       	cp	r24, r25
     e9e:	99 f3       	breq	.-26     	; 0xe86 <GetKey_Tick+0xb0>
     ea0:	d5 c0       	rjmp	.+426    	; 0x104c <GetKey_Tick+0x276>
		
		case gk_user:
			break;
			
		case gk_door:
			if(GetBit(~PINA,1)){
     ea2:	80 b1       	in	r24, 0x00	; 0
     ea4:	80 95       	com	r24
     ea6:	81 ff       	sbrs	r24, 1
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <GetKey_Tick+0xda>
				liquor_door_sensor = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <liquor_door_sensor>
			}
			
			if(GetBit(~PINA,5)){
     eb0:	80 b1       	in	r24, 0x00	; 0
     eb2:	80 95       	com	r24
     eb4:	85 ff       	sbrs	r24, 5
     eb6:	06 c0       	rjmp	.+12     	; 0xec4 <GetKey_Tick+0xee>
				drink_has_been_removed = 0;
     eb8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <drink_has_been_removed>
				amount_alcohol_consumed = 100;
     ebc:	84 e6       	ldi	r24, 0x64	; 100
     ebe:	80 93 48 09 	sts	0x0948, r24	; 0x800948 <amount_alcohol_consumed>
     ec2:	6e c1       	rjmp	.+732    	; 0x11a0 <GetKey_Tick+0x3ca>
			}
			
			else if(GetBit(~PINA,4)){
     ec4:	80 b1       	in	r24, 0x00	; 0
     ec6:	80 95       	com	r24
     ec8:	84 ff       	sbrs	r24, 4
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <GetKey_Tick+0x102>
				drink_has_been_removed = 0;
     ecc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <drink_has_been_removed>
				amount_alcohol_consumed = 200;
     ed0:	88 ec       	ldi	r24, 0xC8	; 200
     ed2:	80 93 48 09 	sts	0x0948, r24	; 0x800948 <amount_alcohol_consumed>
     ed6:	64 c1       	rjmp	.+712    	; 0x11a0 <GetKey_Tick+0x3ca>
			}
			
			else{
				drink_has_been_removed = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <drink_has_been_removed>
				liquor_door_sensor = 0;
     ede:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <liquor_door_sensor>
     ee2:	b4 c1       	rjmp	.+872    	; 0x124c <GetKey_Tick+0x476>
			break;
			
		case gk_math:
			;
			double grams_of_alcohol_consumed;
			grams_of_alcohol_consumed =  (0.789 * (amount_alcohol_consumed * .033814) * (double)drink_alcohol_content);
     ee4:	60 91 48 09 	lds	r22, 0x0948	; 0x800948 <amount_alcohol_consumed>
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 1d 10 	call	0x203a	; 0x203a <__floatsisf>
     ef2:	2d e8       	ldi	r18, 0x8D	; 141
     ef4:	30 e8       	ldi	r19, 0x80	; 128
     ef6:	4a e0       	ldi	r20, 0x0A	; 10
     ef8:	5d e3       	ldi	r21, 0x3D	; 61
     efa:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
     efe:	27 ee       	ldi	r18, 0xE7	; 231
     f00:	3b ef       	ldi	r19, 0xFB	; 251
     f02:	49 e4       	ldi	r20, 0x49	; 73
     f04:	5f e3       	ldi	r21, 0x3F	; 63
     f06:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
     f0a:	6b 01       	movw	r12, r22
     f0c:	7c 01       	movw	r14, r24
     f0e:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <drink_alcohol_content>
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 1b 10 	call	0x2036	; 0x2036 <__floatunsisf>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	c7 01       	movw	r24, r14
     f22:	b6 01       	movw	r22, r12
     f24:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
			grams_of_alcohol_consumed = grams_of_alcohol_consumed / 100;
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	48 ec       	ldi	r20, 0xC8	; 200
     f2e:	52 e4       	ldi	r21, 0x42	; 66
     f30:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__divsf3>
     f34:	6b 01       	movw	r12, r22
     f36:	7c 01       	movw	r14, r24
			
			double weight_grams;
			weight_grams = (double)List_of_Users[current_user].weight * 454.0;
     f38:	c0 91 6f 01 	lds	r28, 0x016F	; 0x80016f <current_user>
     f3c:	9b e1       	ldi	r25, 0x1B	; 27
     f3e:	c9 9f       	mul	r28, r25
     f40:	e0 01       	movw	r28, r0
     f42:	11 24       	eor	r1, r1
     f44:	cf 5f       	subi	r28, 0xFF	; 255
     f46:	de 4f       	sbci	r29, 0xFE	; 254
     f48:	6e 85       	ldd	r22, Y+14	; 0x0e
     f4a:	7f 85       	ldd	r23, Y+15	; 0x0f
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 1b 10 	call	0x2036	; 0x2036 <__floatunsisf>
     f54:	4b 01       	movw	r8, r22
     f56:	5c 01       	movw	r10, r24
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	43 ee       	ldi	r20, 0xE3	; 227
     f5e:	53 e4       	ldi	r21, 0x43	; 67
     f60:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
			
			double bac = 0.0;
			
			if(List_of_Users[current_user].gender == 1){
     f64:	28 89       	ldd	r18, Y+16	; 0x10
     f66:	21 30       	cpi	r18, 0x01	; 1
     f68:	a1 f4       	brne	.+40     	; 0xf92 <GetKey_Tick+0x1bc>
				bac = (grams_of_alcohol_consumed/(weight_grams * male_constant)) * 1000000;
     f6a:	2b e7       	ldi	r18, 0x7B	; 123
     f6c:	34 e1       	ldi	r19, 0x14	; 20
     f6e:	4e e2       	ldi	r20, 0x2E	; 46
     f70:	5f e3       	ldi	r21, 0x3F	; 63
     f72:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
     f76:	9b 01       	movw	r18, r22
     f78:	ac 01       	movw	r20, r24
     f7a:	c7 01       	movw	r24, r14
     f7c:	b6 01       	movw	r22, r12
     f7e:	f3 d7       	rcall	.+4070   	; 0x1f66 <__divsf3>
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	34 e2       	ldi	r19, 0x24	; 36
     f84:	44 e7       	ldi	r20, 0x74	; 116
     f86:	59 e4       	ldi	r21, 0x49	; 73
     f88:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
     f8c:	6b 01       	movw	r12, r22
     f8e:	7c 01       	movw	r14, r24
     f90:	13 c0       	rjmp	.+38     	; 0xfb8 <GetKey_Tick+0x1e2>
			}
			
			else{
				bac = (grams_of_alcohol_consumed/(weight_grams * female_constant)) * 1000000;
     f92:	2d ec       	ldi	r18, 0xCD	; 205
     f94:	3c ec       	ldi	r19, 0xCC	; 204
     f96:	4c e0       	ldi	r20, 0x0C	; 12
     f98:	5f e3       	ldi	r21, 0x3F	; 63
     f9a:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
     f9e:	9b 01       	movw	r18, r22
     fa0:	ac 01       	movw	r20, r24
     fa2:	c7 01       	movw	r24, r14
     fa4:	b6 01       	movw	r22, r12
     fa6:	df d7       	rcall	.+4030   	; 0x1f66 <__divsf3>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	34 e2       	ldi	r19, 0x24	; 36
     fac:	44 e7       	ldi	r20, 0x74	; 116
     fae:	59 e4       	ldi	r21, 0x49	; 73
     fb0:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
     fb4:	6b 01       	movw	r12, r22
     fb6:	7c 01       	movw	r14, r24
			}
			
		
			if(bac > (List_of_Users[current_user].weight * .08)){
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
     fba:	37 ed       	ldi	r19, 0xD7	; 215
     fbc:	43 ea       	ldi	r20, 0xA3	; 163
     fbe:	5d e3       	ldi	r21, 0x3D	; 61
     fc0:	c5 01       	movw	r24, r10
     fc2:	b4 01       	movw	r22, r8
     fc4:	0e 94 ad 10 	call	0x215a	; 0x215a <__mulsf3>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	c7 01       	movw	r24, r14
     fce:	b6 01       	movw	r22, r12
     fd0:	0e 94 a9 10 	call	0x2152	; 0x2152 <__gesf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	24 f4       	brge	.+8      	; 0xfe0 <GetKey_Tick+0x20a>
				timer_is_on = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <timer_is_on>
     fde:	f3 c0       	rjmp	.+486    	; 0x11c6 <GetKey_Tick+0x3f0>
			}
			
			else{
				timer_is_on = 0;
     fe0:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <timer_is_on>
     fe4:	fa c0       	rjmp	.+500    	; 0x11da <GetKey_Tick+0x404>
     fe6:	8f e4       	ldi	r24, 0x4F	; 79
     fe8:	93 ec       	ldi	r25, 0xC3	; 195
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <GetKey_Tick+0x214>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <GetKey_Tick+0x21a>
			}
			break;
			
		case gk_unlock_key:
			while((gk_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     ff0:	00 00       	nop
     ff2:	34 da       	rcall	.-2968   	; 0x45c <GetKeypadKey>
     ff4:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <gk_selection>
     ff8:	88 23       	and	r24, r24
     ffa:	a9 f3       	breq	.-22     	; 0xfe6 <GetKey_Tick+0x210>
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <GetKey_Tick+0x234>
     ffe:	8f e4       	ldi	r24, 0x4F	; 79
    1000:	93 ec       	ldi	r25, 0xC3	; 195
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <GetKey_Tick+0x22c>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <GetKey_Tick+0x232>
			while((gk_prev_select = GetKeypadKey()) == gk_selection){ _delay_ms(200); }
    1008:	00 00       	nop
    100a:	28 da       	rcall	.-2992   	; 0x45c <GetKeypadKey>
    100c:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <gk_prev_select>
    1010:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <gk_selection>
    1014:	89 17       	cp	r24, r25
    1016:	99 f3       	breq	.-26     	; 0xffe <GetKey_Tick+0x228>
    1018:	19 c0       	rjmp	.+50     	; 0x104c <GetKey_Tick+0x276>
    101a:	8f e4       	ldi	r24, 0x4F	; 79
    101c:	93 ec       	ldi	r25, 0xC3	; 195
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <GetKey_Tick+0x248>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <GetKey_Tick+0x24e>
			break;
			
		case gk_timer_init:
			while((gk_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
    1024:	00 00       	nop
    1026:	1a da       	rcall	.-3020   	; 0x45c <GetKeypadKey>
    1028:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <gk_selection>
    102c:	88 23       	and	r24, r24
    102e:	a9 f3       	breq	.-22     	; 0x101a <GetKey_Tick+0x244>
    1030:	06 c0       	rjmp	.+12     	; 0x103e <GetKey_Tick+0x268>
    1032:	8f e4       	ldi	r24, 0x4F	; 79
    1034:	93 ec       	ldi	r25, 0xC3	; 195
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <GetKey_Tick+0x260>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <GetKey_Tick+0x266>
			while((gk_prev_select = GetKeypadKey()) == gk_selection){ _delay_ms(200); }
    103c:	00 00       	nop
    103e:	0e da       	rcall	.-3044   	; 0x45c <GetKeypadKey>
    1040:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <gk_prev_select>
    1044:	90 91 4a 09 	lds	r25, 0x094A	; 0x80094a <gk_selection>
    1048:	89 17       	cp	r24, r25
    104a:	99 f3       	breq	.-26     	; 0x1032 <GetKey_Tick+0x25c>
		default:
			break;
	}
	
	//Transitions
	switch(get_key_state){
    104c:	e0 91 b6 0b 	lds	r30, 0x0BB6	; 0x800bb6 <get_key_state>
    1050:	8e 2f       	mov	r24, r30
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	89 30       	cpi	r24, 0x09	; 9
    1056:	91 05       	cpc	r25, r1
    1058:	08 f0       	brcs	.+2      	; 0x105c <GetKey_Tick+0x286>
    105a:	f6 c0       	rjmp	.+492    	; 0x1248 <GetKey_Tick+0x472>
    105c:	fc 01       	movw	r30, r24
    105e:	eb 5a       	subi	r30, 0xAB	; 171
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__tablejump2__>
		case gk_init:
			if(get_key_flag){
    1066:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <get_key_flag>
    106a:	88 23       	and	r24, r24
				if(number_of_users == 0){
    106c:	09 f4       	brne	.+2      	; 0x1070 <GetKey_Tick+0x29a>
    106e:	ee c0       	rjmp	.+476    	; 0x124c <GetKey_Tick+0x476>
    1070:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <number_of_users>
					nokia_lcd_clear();
    1074:	81 11       	cpse	r24, r1
    1076:	0c c0       	rjmp	.+24     	; 0x1090 <GetKey_Tick+0x2ba>
					nokia_lcd_write_string("No users in   system. Press any key to go to Main Menu.",1);
    1078:	99 d1       	rcall	.+818    	; 0x13ac <nokia_lcd_clear>
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	84 e9       	ldi	r24, 0x94	; 148
    107e:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_render();
    1080:	7b d2       	rcall	.+1270   	; 0x1578 <nokia_lcd_write_string>
    1082:	91 d2       	rcall	.+1314   	; 0x15a6 <nokia_lcd_render>
					user_verify_flag = 0;
    1084:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
					get_key_state = gk_no_user;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
				}
				
				else if(type_of_drink == 0){
    108e:	de c0       	rjmp	.+444    	; 0x124c <GetKey_Tick+0x476>
    1090:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <type_of_drink>
					nokia_lcd_clear();
    1094:	81 11       	cpse	r24, r1
    1096:	0c c0       	rjmp	.+24     	; 0x10b0 <GetKey_Tick+0x2da>
					nokia_lcd_write_string("No drinks     found. Press  any key to go to Main Menu.",1);
    1098:	89 d1       	rcall	.+786    	; 0x13ac <nokia_lcd_clear>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	8b e0       	ldi	r24, 0x0B	; 11
    109e:	92 e0       	ldi	r25, 0x02	; 2
					nokia_lcd_render();
    10a0:	6b d2       	rcall	.+1238   	; 0x1578 <nokia_lcd_write_string>
					user_verify_flag = 0;
    10a2:	81 d2       	rcall	.+1282   	; 0x15a6 <nokia_lcd_render>
    10a4:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
					get_key_state = gk_no_drink;
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
				}
				
				else if(!keys_have_been_deposited){
    10ae:	ce c0       	rjmp	.+412    	; 0x124c <GetKey_Tick+0x476>
    10b0:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <keys_have_been_deposited>
    10b4:	81 11       	cpse	r24, r1
					nokia_lcd_clear();
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <GetKey_Tick+0x2fa>
					nokia_lcd_write_string("No keys in system. Pressany key to go to Main Menu",1);
    10b8:	79 d1       	rcall	.+754    	; 0x13ac <nokia_lcd_clear>
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	89 eb       	ldi	r24, 0xB9	; 185
					nokia_lcd_render();
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	5b d2       	rcall	.+1206   	; 0x1578 <nokia_lcd_write_string>
					user_verify_flag = 0;
    10c2:	71 d2       	rcall	.+1250   	; 0x15a6 <nokia_lcd_render>
    10c4:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
					get_key_state = gk_no_drink;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
				}
				
				else if(timer_is_on){
    10ce:	be c0       	rjmp	.+380    	; 0x124c <GetKey_Tick+0x476>
    10d0:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <timer_is_on>
    10d4:	88 23       	and	r24, r24
					nokia_lcd_clear();
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <GetKey_Tick+0x31a>
    10d8:	69 d1       	rcall	.+722    	; 0x13ac <nokia_lcd_clear>
					nokia_lcd_write_string("Time Remaining",1);
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	8c ee       	ldi	r24, 0xEC	; 236
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	4b d2       	rcall	.+1174   	; 0x1578 <nokia_lcd_write_string>
					nokia_lcd_render();
    10e2:	61 d2       	rcall	.+1218   	; 0x15a6 <nokia_lcd_render>
    10e4:	10 92 52 09 	sts	0x0952, r1	; 0x800952 <user_verify_flag>
					user_verify_flag = 0;
					get_key_state = gk_timer;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
    10ee:	ae c0       	rjmp	.+348    	; 0x124c <GetKey_Tick+0x476>
				}
				
				else{
					user_verify_flag = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <user_verify_flag>
					get_key_state = gk_user;
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
				get_key_state = gk_init;
			}
			break;
			
		case gk_no_user:
			if(gk_selection != '\0'){
    10fc:	a7 c0       	rjmp	.+334    	; 0x124c <GetKey_Tick+0x476>
    10fe:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <gk_selection>
    1102:	88 23       	and	r24, r24
				nokia_lcd_clear();
    1104:	09 f4       	brne	.+2      	; 0x1108 <GetKey_Tick+0x332>
    1106:	a2 c0       	rjmp	.+324    	; 0x124c <GetKey_Tick+0x476>
				nokia_lcd_write_string("Main Menu",1);
    1108:	51 d1       	rcall	.+674    	; 0x13ac <nokia_lcd_clear>
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	80 e7       	ldi	r24, 0x70	; 112
    110e:	92 e0       	ldi	r25, 0x02	; 2
    1110:	33 d2       	rcall	.+1126   	; 0x1578 <nokia_lcd_write_string>
				nokia_lcd_render();
    1112:	49 d2       	rcall	.+1170   	; 0x15a6 <nokia_lcd_render>
    1114:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <get_key_flag>
				get_key_flag = 0;
				get_key_state = gk_init;
    1118:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
    111c:	97 c0       	rjmp	.+302    	; 0x124c <GetKey_Tick+0x476>
				get_key_state = gk_no_user;
			}
			break;
			
		case gk_no_drink:
			if(gk_selection != '\0'){
    111e:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <gk_selection>
    1122:	88 23       	and	r24, r24
				nokia_lcd_clear();
    1124:	09 f4       	brne	.+2      	; 0x1128 <GetKey_Tick+0x352>
    1126:	92 c0       	rjmp	.+292    	; 0x124c <GetKey_Tick+0x476>
				nokia_lcd_write_string("Main Menu",1);
    1128:	41 d1       	rcall	.+642    	; 0x13ac <nokia_lcd_clear>
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	80 e7       	ldi	r24, 0x70	; 112
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	23 d2       	rcall	.+1094   	; 0x1578 <nokia_lcd_write_string>
				nokia_lcd_render();
    1132:	39 d2       	rcall	.+1138   	; 0x15a6 <nokia_lcd_render>
    1134:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <get_key_flag>
				get_key_flag = 0;
    1138:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
				get_key_state = gk_init;
    113c:	87 c0       	rjmp	.+270    	; 0x124c <GetKey_Tick+0x476>
    113e:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <gk_selection>
				get_key_state = gk_no_drink;
			}
			break;
			
		case gk_timer:
			if(gk_selection != '\0'){
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <GetKey_Tick+0x372>
    1146:	82 c0       	rjmp	.+260    	; 0x124c <GetKey_Tick+0x476>
				nokia_lcd_clear();
    1148:	31 d1       	rcall	.+610    	; 0x13ac <nokia_lcd_clear>
				nokia_lcd_write_string("Main Menu",1);
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	80 e7       	ldi	r24, 0x70	; 112
    114e:	92 e0       	ldi	r25, 0x02	; 2
    1150:	13 d2       	rcall	.+1062   	; 0x1578 <nokia_lcd_write_string>
				nokia_lcd_render();
    1152:	29 d2       	rcall	.+1106   	; 0x15a6 <nokia_lcd_render>
    1154:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <get_key_flag>
				get_key_flag = 0;
    1158:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
				get_key_state = gk_init;
    115c:	77 c0       	rjmp	.+238    	; 0x124c <GetKey_Tick+0x476>
    115e:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <user_verify_flag>
			}
			break;
			
		
		case gk_user:
			if(user_verify_flag){
    1162:	81 11       	cpse	r24, r1
    1164:	73 c0       	rjmp	.+230    	; 0x124c <GetKey_Tick+0x476>
    1166:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <correct_user_credentials>
				get_key_state = gk_user;
				
			}
			
			else if(!user_verify_flag && correct_user_credentials && (user_to_remove == current_user)){
    116a:	88 23       	and	r24, r24
    116c:	81 f0       	breq	.+32     	; 0x118e <GetKey_Tick+0x3b8>
    116e:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <user_to_remove>
    1172:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <current_user>
				nokia_lcd_clear();
    1176:	98 13       	cpse	r25, r24
    1178:	0a c0       	rjmp	.+20     	; 0x118e <GetKey_Tick+0x3b8>
				nokia_lcd_write_string("Return Drink  and close door",1);
    117a:	18 d1       	rcall	.+560    	; 0x13ac <nokia_lcd_clear>
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	8b ef       	ldi	r24, 0xFB	; 251
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	fa d1       	rcall	.+1012   	; 0x1578 <nokia_lcd_write_string>
				nokia_lcd_render();
    1184:	10 d2       	rcall	.+1056   	; 0x15a6 <nokia_lcd_render>
				get_key_state = gk_door;
    1186:	85 e0       	ldi	r24, 0x05	; 5
    1188:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
			}
			
			else{
				get_key_flag = 0;
    118c:	5f c0       	rjmp	.+190    	; 0x124c <GetKey_Tick+0x476>
    118e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <get_key_flag>
				get_key_state = gk_init;	
    1192:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
			}
			
			break;
		
		case gk_door:
			if(!drink_has_been_removed && liquor_door_sensor){
    1196:	5a c0       	rjmp	.+180    	; 0x124c <GetKey_Tick+0x476>
    1198:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <drink_has_been_removed>
    119c:	81 11       	cpse	r24, r1
    119e:	56 c0       	rjmp	.+172    	; 0x124c <GetKey_Tick+0x476>
    11a0:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <liquor_door_sensor>
				nokia_lcd_clear();
    11a4:	88 23       	and	r24, r24
				nokia_lcd_write_string("calculating stuff",1);
    11a6:	09 f4       	brne	.+2      	; 0x11aa <GetKey_Tick+0x3d4>
    11a8:	51 c0       	rjmp	.+162    	; 0x124c <GetKey_Tick+0x476>
    11aa:	00 d1       	rcall	.+512    	; 0x13ac <nokia_lcd_clear>
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	88 e1       	ldi	r24, 0x18	; 24
				nokia_lcd_render();
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	e2 d1       	rcall	.+964    	; 0x1578 <nokia_lcd_write_string>
				get_key_state = gk_math;
    11b4:	f8 d1       	rcall	.+1008   	; 0x15a6 <nokia_lcd_render>
    11b6:	86 e0       	ldi	r24, 0x06	; 6
    11b8:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
			}
			break;
		
		case gk_math:
		
			if(timer_is_on){
    11bc:	47 c0       	rjmp	.+142    	; 0x124c <GetKey_Tick+0x476>
    11be:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <timer_is_on>
    11c2:	88 23       	and	r24, r24
				nokia_lcd_clear();
    11c4:	51 f0       	breq	.+20     	; 0x11da <GetKey_Tick+0x404>
    11c6:	f2 d0       	rcall	.+484    	; 0x13ac <nokia_lcd_clear>
				nokia_lcd_write_string("Time Remaining",1);
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	8c ee       	ldi	r24, 0xEC	; 236
    11cc:	92 e0       	ldi	r25, 0x02	; 2
    11ce:	d4 d1       	rcall	.+936    	; 0x1578 <nokia_lcd_write_string>
				nokia_lcd_render();
    11d0:	ea d1       	rcall	.+980    	; 0x15a6 <nokia_lcd_render>
				get_key_state = gk_timer_init;
    11d2:	88 e0       	ldi	r24, 0x08	; 8
    11d4:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
    11d8:	39 c0       	rjmp	.+114    	; 0x124c <GetKey_Tick+0x476>
				
			}
			
			else if(!timer_is_on){
				nokia_lcd_clear();
    11da:	e8 d0       	rcall	.+464    	; 0x13ac <nokia_lcd_clear>
    11dc:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_write_string("Remove keys.  Press any key to go to Main Menu.",1);
    11de:	8a e2       	ldi	r24, 0x2A	; 42
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	ca d1       	rcall	.+916    	; 0x1578 <nokia_lcd_write_string>
    11e4:	e0 d1       	rcall	.+960    	; 0x15a6 <nokia_lcd_render>
				nokia_lcd_render();
    11e6:	81 e0       	ldi	r24, 0x01	; 1
				key_door_signal = 1;
    11e8:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <key_door_signal>
				liquor_door_signal = 0;
    11ec:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <liquor_door_signal>
				PORTB = SetBit(PORTB,0,key_door_signal);
    11f0:	28 9a       	sbi	0x05, 0	; 5
				PORTB = SetBit(PORTB,1,liquor_door_signal);
    11f2:	85 b1       	in	r24, 0x05	; 5
#define BIT_H


// x: 8-bit value.   k: bit position to set, range is 0-7.   b: set bit to this, either 1 or 0
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	if(b){ //b ==1
    11f4:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <liquor_door_signal>
    11f8:	99 23       	and	r25, r25
    11fa:	11 f0       	breq	.+4      	; 0x1200 <GetKey_Tick+0x42a>
		return x | (0x01 << k); //   Set bit to 1
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <GetKey_Tick+0x42c>
	}
	else{ //b ==0
		return x & ~(0x01 << k);   //Set bit to 0
    1200:	8d 7f       	andi	r24, 0xFD	; 253
    1202:	85 b9       	out	0x05, r24	; 5
				get_key_state = gk_unlock_key;
    1204:	87 e0       	ldi	r24, 0x07	; 7
    1206:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <get_key_state>
    120a:	20 c0       	rjmp	.+64     	; 0x124c <GetKey_Tick+0x476>
				get_key_state = gk_math;
			}
			break;
		
		case gk_unlock_key:
			if(gk_selection != '\0'){
    120c:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <gk_selection>
    1210:	88 23       	and	r24, r24
    1212:	e1 f0       	breq	.+56     	; 0x124c <GetKey_Tick+0x476>
				nokia_lcd_clear();
    1214:	cb d0       	rcall	.+406    	; 0x13ac <nokia_lcd_clear>
    1216:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_write_string("Main Menu",1);
    1218:	80 e7       	ldi	r24, 0x70	; 112
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	ad d1       	rcall	.+858    	; 0x1578 <nokia_lcd_write_string>
    121e:	c3 d1       	rcall	.+902    	; 0x15a6 <nokia_lcd_render>
    1220:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <get_key_flag>
				nokia_lcd_render();
    1224:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
				get_key_flag = 0;
    1228:	11 c0       	rjmp	.+34     	; 0x124c <GetKey_Tick+0x476>
				get_key_state = gk_init;
    122a:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <gk_selection>
    122e:	88 23       	and	r24, r24
				get_key_state = gk_unlock_key;
			}
			break;
		
		case gk_timer_init:
			if(gk_selection != '\0'){
    1230:	69 f0       	breq	.+26     	; 0x124c <GetKey_Tick+0x476>
    1232:	bc d0       	rcall	.+376    	; 0x13ac <nokia_lcd_clear>
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	80 e7       	ldi	r24, 0x70	; 112
				nokia_lcd_clear();
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	9e d1       	rcall	.+828    	; 0x1578 <nokia_lcd_write_string>
				nokia_lcd_write_string("Main Menu",1);
    123c:	b4 d1       	rcall	.+872    	; 0x15a6 <nokia_lcd_render>
    123e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <get_key_flag>
    1242:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
				nokia_lcd_render();
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GetKey_Tick+0x476>
    1248:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
				get_key_flag = 0;
    124c:	df 91       	pop	r29
				get_key_state = gk_init;
    124e:	cf 91       	pop	r28
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
				get_key_state = gk_timer_init;
			}
			break;
		
		default:
			get_key_state = gk_init;
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
			break;
	}
}
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	9f 90       	pop	r9
    125e:	8f 90       	pop	r8
    1260:	08 95       	ret

00001262 <GetKeyTask>:
    1262:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <get_key_state>
    1266:	b7 dd       	rcall	.-1170   	; 0xdd6 <GetKey_Tick>
    1268:	84 e6       	ldi	r24, 0x64	; 100
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	bb d5       	rcall	.+2934   	; 0x1de4 <vTaskDelay>
void GetKeyTask(){
	GetKey_Init();
	for(;;)
	{
		GetKey_Tick();
		vTaskDelay(100);
    126e:	fb cf       	rjmp	.-10     	; 0x1266 <GetKeyTask+0x4>

00001270 <GetKeyPulse>:
	}
}

void GetKeyPulse(unsigned portBASE_TYPE Priority){
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
	xTaskCreate(GetKeyTask, (signed portCHAR *)"GetKeyTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
    127e:	a1 2c       	mov	r10, r1
    1280:	b1 2c       	mov	r11, r1
    1282:	c1 2c       	mov	r12, r1
    1284:	d1 2c       	mov	r13, r1
    1286:	e1 2c       	mov	r14, r1
    1288:	f1 2c       	mov	r15, r1
    128a:	08 2f       	mov	r16, r24
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	45 e5       	ldi	r20, 0x55	; 85
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	6a e5       	ldi	r22, 0x5A	; 90
    1296:	73 e0       	ldi	r23, 0x03	; 3
    1298:	81 e3       	ldi	r24, 0x31	; 49
    129a:	99 e0       	ldi	r25, 0x09	; 9
    129c:	2b d3       	rcall	.+1622   	; 0x18f4 <xTaskGenericCreate>
}
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	08 95       	ret

000012ae <main>:



int main(void)
{
	DDRC = 0x0F;	//Set PC7...PC3 to input, PC2...PC0 to output [0000 1111]
    12ae:	8f e0       	ldi	r24, 0x0F	; 15
    12b0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xF0;	//Init port C to 1s							[1111 0000]
    12b2:	80 ef       	ldi	r24, 0xF0	; 240
    12b4:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;	//Set Port D to output
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//Init Port D to 0s
    12ba:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF;	//Controls the locks
    12bc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
    12be:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00;
    12c0:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
    12c2:	82 b9       	out	0x02, r24	; 2
	
	PORTB = SetBit(PORTB,0,key_door_signal);
    12c4:	85 b1       	in	r24, 0x05	; 5
#define BIT_H


// x: 8-bit value.   k: bit position to set, range is 0-7.   b: set bit to this, either 1 or 0
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	if(b){ //b ==1
    12c6:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <key_door_signal>
    12ca:	99 23       	and	r25, r25
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <main+0x24>
		return x | (0x01 << k); //   Set bit to 1
    12ce:	81 60       	ori	r24, 0x01	; 1
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <main+0x26>
	}
	else{ //b ==0
		return x & ~(0x01 << k);   //Set bit to 0
    12d2:	8e 7f       	andi	r24, 0xFE	; 254
    12d4:	85 b9       	out	0x05, r24	; 5
	PORTB = SetBit(PORTB,1,liquor_door_signal);
    12d6:	85 b1       	in	r24, 0x05	; 5
#define BIT_H


// x: 8-bit value.   k: bit position to set, range is 0-7.   b: set bit to this, either 1 or 0
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	if(b){ //b ==1
    12d8:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <liquor_door_signal>
    12dc:	99 23       	and	r25, r25
    12de:	11 f0       	breq	.+4      	; 0x12e4 <main+0x36>
		return x | (0x01 << k); //   Set bit to 1
    12e0:	82 60       	ori	r24, 0x02	; 2
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <main+0x38>
	}
	else{ //b ==0
		return x & ~(0x01 << k);   //Set bit to 0
    12e4:	8d 7f       	andi	r24, 0xFD	; 253
    12e6:	85 b9       	out	0x05, r24	; 5
	
	nokia_lcd_init();
    12e8:	2b d0       	rcall	.+86     	; 0x1340 <nokia_lcd_init>
	//Start Tasks
	GetDrinkPulse(1);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	55 dd       	rcall	.-1366   	; 0xd98 <GetDrinkPulse>
	UserVerifyPulse(1);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	b3 db       	rcall	.-2202   	; 0xa58 <UserVerifyPulse>
	GetKeyPulse(1);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	bd df       	rcall	.-134    	; 0x1270 <GetKeyPulse>
    12f6:	ff d3       	rcall	.+2046   	; 0x1af6 <vTaskStartScheduler>
	//RunSchedular
	vTaskStartScheduler();
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
	
	return 0;
    12fc:	08 95       	ret

000012fe <write>:
    12fe:	59 98       	cbi	0x0b, 1	; 11
    1300:	66 23       	and	r22, r22
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
    1302:	11 f0       	breq	.+4      	; 0x1308 <write+0xa>
    1304:	5b 9a       	sbi	0x0b, 3	; 11
    1306:	15 c0       	rjmp	.+42     	; 0x1332 <write+0x34>
    1308:	5b 98       	cbi	0x0b, 3	; 11
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <write+0x34>
    130c:	ac 01       	movw	r20, r24
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <write+0x18>
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <write+0x14>
    131a:	40 ff       	sbrs	r20, 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <write+0x24>
    131e:	5c 9a       	sbi	0x0b, 4	; 11
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <write+0x26>
    1322:	5c 98       	cbi	0x0b, 4	; 11
    1324:	5d 9a       	sbi	0x0b, 5	; 11
    1326:	5d 98       	cbi	0x0b, 5	; 11
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	31 09       	sbc	r19, r1
    132c:	78 f7       	brcc	.-34     	; 0x130c <write+0xe>
    132e:	59 9a       	sbi	0x0b, 1	; 11
    1330:	08 95       	ret
    1332:	27 e0       	ldi	r18, 0x07	; 7
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	e9 cf       	rjmp	.-46     	; 0x130c <write+0xe>

0000133a <write_cmd>:
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	e0 cf       	rjmp	.-64     	; 0x12fe <write>
    133e:	08 95       	ret

00001340 <nokia_lcd_init>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	51 9a       	sbi	0x0a, 1	; 10
    1346:	52 9a       	sbi	0x0a, 2	; 10
    1348:	53 9a       	sbi	0x0a, 3	; 10
    134a:	54 9a       	sbi	0x0a, 4	; 10
    134c:	55 9a       	sbi	0x0a, 5	; 10
    134e:	5a 9a       	sbi	0x0b, 2	; 11
    1350:	59 9a       	sbi	0x0b, 1	; 11
    1352:	83 ec       	ldi	r24, 0xC3	; 195
    1354:	99 e0       	ldi	r25, 0x09	; 9
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <nokia_lcd_init+0x16>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <nokia_lcd_init+0x1c>
    135c:	00 00       	nop
    135e:	5a 98       	cbi	0x0b, 2	; 11
    1360:	8b e5       	ldi	r24, 0x5B	; 91
    1362:	94 e4       	ldi	r25, 0x44	; 68
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <nokia_lcd_init+0x24>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <nokia_lcd_init+0x2a>
    136a:	00 00       	nop
    136c:	5a 9a       	sbi	0x0b, 2	; 11
    136e:	59 98       	cbi	0x0b, 1	; 11
    1370:	81 e2       	ldi	r24, 0x21	; 33
    1372:	e3 df       	rcall	.-58     	; 0x133a <write_cmd>
    1374:	83 e1       	ldi	r24, 0x13	; 19
    1376:	e1 df       	rcall	.-62     	; 0x133a <write_cmd>
    1378:	86 e0       	ldi	r24, 0x06	; 6
    137a:	df df       	rcall	.-66     	; 0x133a <write_cmd>
    137c:	82 ec       	ldi	r24, 0xC2	; 194
    137e:	dd df       	rcall	.-70     	; 0x133a <write_cmd>
    1380:	80 e2       	ldi	r24, 0x20	; 32
    1382:	db df       	rcall	.-74     	; 0x133a <write_cmd>
    1384:	89 e0       	ldi	r24, 0x09	; 9
    1386:	d9 df       	rcall	.-78     	; 0x133a <write_cmd>
    1388:	80 e8       	ldi	r24, 0x80	; 128
    138a:	d7 df       	rcall	.-82     	; 0x133a <write_cmd>
    138c:	80 e4       	ldi	r24, 0x40	; 64
    138e:	d5 df       	rcall	.-86     	; 0x133a <write_cmd>
    1390:	c8 ef       	ldi	r28, 0xF8	; 248
    1392:	d1 e0       	ldi	r29, 0x01	; 1
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	b2 df       	rcall	.-156    	; 0x12fe <write>
    139a:	21 97       	sbiw	r28, 0x01	; 1
    139c:	d9 f7       	brne	.-10     	; 0x1394 <nokia_lcd_init+0x54>
    139e:	88 e0       	ldi	r24, 0x08	; 8
    13a0:	cc df       	rcall	.-104    	; 0x133a <write_cmd>
    13a2:	8c e0       	ldi	r24, 0x0C	; 12
    13a4:	ca df       	rcall	.-108    	; 0x133a <write_cmd>
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <nokia_lcd_clear>:
    13ac:	80 e8       	ldi	r24, 0x80	; 128
    13ae:	c5 df       	rcall	.-118    	; 0x133a <write_cmd>
    13b0:	80 e4       	ldi	r24, 0x40	; 64
    13b2:	c3 df       	rcall	.-122    	; 0x133a <write_cmd>
    13b4:	10 92 59 0b 	sts	0x0B59, r1	; 0x800b59 <nokia_lcd+0x1f8>
    13b8:	10 92 5a 0b 	sts	0x0B5A, r1	; 0x800b5a <nokia_lcd+0x1f9>
    13bc:	e1 e6       	ldi	r30, 0x61	; 97
    13be:	f9 e0       	ldi	r31, 0x09	; 9
    13c0:	89 e5       	ldi	r24, 0x59	; 89
    13c2:	9b e0       	ldi	r25, 0x0B	; 11
    13c4:	11 92       	st	Z+, r1
    13c6:	e8 17       	cp	r30, r24
    13c8:	f9 07       	cpc	r31, r25
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <nokia_lcd_clear+0x18>
    13cc:	08 95       	ret

000013ce <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    13ce:	26 2f       	mov	r18, r22
    13d0:	26 95       	lsr	r18
    13d2:	26 95       	lsr	r18
    13d4:	26 95       	lsr	r18
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	34 e5       	ldi	r19, 0x54	; 84
    13da:	23 9f       	mul	r18, r19
    13dc:	80 0d       	add	r24, r0
    13de:	91 1d       	adc	r25, r1
    13e0:	11 24       	eor	r1, r1
	if (value)
    13e2:	44 23       	and	r20, r20
    13e4:	79 f0       	breq	.+30     	; 0x1404 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
    13e6:	fc 01       	movw	r30, r24
    13e8:	ef 59       	subi	r30, 0x9F	; 159
    13ea:	f6 4f       	sbci	r31, 0xF6	; 246
    13ec:	67 70       	andi	r22, 0x07	; 7
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <nokia_lcd_set_pixel+0x2a>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	6a 95       	dec	r22
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <nokia_lcd_set_pixel+0x26>
    13fc:	90 81       	ld	r25, Z
    13fe:	89 2b       	or	r24, r25
    1400:	80 83       	st	Z, r24
    1402:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
    1404:	fc 01       	movw	r30, r24
    1406:	ef 59       	subi	r30, 0x9F	; 159
    1408:	f6 4f       	sbci	r31, 0xF6	; 246
    140a:	67 70       	andi	r22, 0x07	; 7
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <nokia_lcd_set_pixel+0x48>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	6a 95       	dec	r22
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <nokia_lcd_set_pixel+0x44>
    141a:	80 95       	com	r24
    141c:	90 81       	ld	r25, Z
    141e:	89 23       	and	r24, r25
    1420:	80 83       	st	Z, r24
    1422:	08 95       	ret

00001424 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1424:	5f 92       	push	r5
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1444:	26 2f       	mov	r18, r22
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	49 01       	movw	r8, r18
    144a:	88 0c       	add	r8, r8
    144c:	99 1c       	adc	r9, r9
    144e:	88 0c       	add	r8, r8
    1450:	99 1c       	adc	r9, r9
    1452:	82 0e       	add	r8, r18
    1454:	93 1e       	adc	r9, r19
    1456:	18 14       	cp	r1, r8
    1458:	19 04       	cpc	r1, r9
    145a:	0c f0       	brlt	.+2      	; 0x145e <nokia_lcd_write_char+0x3a>
    145c:	59 c0       	rjmp	.+178    	; 0x1510 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    145e:	89 01       	movw	r16, r18
    1460:	00 0f       	add	r16, r16
    1462:	11 1f       	adc	r17, r17
    1464:	00 0f       	add	r16, r16
    1466:	11 1f       	adc	r17, r17
    1468:	00 0f       	add	r16, r16
    146a:	11 1f       	adc	r17, r17
    146c:	02 1b       	sub	r16, r18
    146e:	13 0b       	sbc	r17, r19
    1470:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1472:	a8 2e       	mov	r10, r24
    1474:	b1 2c       	mov	r11, r1
    1476:	c5 01       	movw	r24, r10
    1478:	80 97       	sbiw	r24, 0x20	; 32
    147a:	5c 01       	movw	r10, r24
    147c:	aa 0c       	add	r10, r10
    147e:	bb 1c       	adc	r11, r11
    1480:	aa 0c       	add	r10, r10
    1482:	bb 1c       	adc	r11, r11
    1484:	a8 0e       	add	r10, r24
    1486:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1488:	0f 2e       	mov	r0, r31
    148a:	fa e5       	ldi	r31, 0x5A	; 90
    148c:	cf 2e       	mov	r12, r31
    148e:	fb e0       	ldi	r31, 0x0B	; 11
    1490:	df 2e       	mov	r13, r31
    1492:	f0 2d       	mov	r31, r0
    1494:	0f 2e       	mov	r0, r31
    1496:	f9 e5       	ldi	r31, 0x59	; 89
    1498:	ef 2e       	mov	r14, r31
    149a:	fb e0       	ldi	r31, 0x0B	; 11
    149c:	ff 2e       	mov	r15, r31
    149e:	f0 2d       	mov	r31, r0
    14a0:	2a c0       	rjmp	.+84     	; 0x14f6 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    14a2:	fe 01       	movw	r30, r28
    14a4:	24 91       	lpm	r18, Z
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	87 2d       	mov	r24, r7
    14aa:	65 2d       	mov	r22, r5
    14ac:	dd d6       	rcall	.+3514   	; 0x2268 <__udivmodqi4>
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <nokia_lcd_write_char+0x90>
    14b0:	35 95       	asr	r19
    14b2:	27 95       	ror	r18
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <nokia_lcd_write_char+0x8c>
    14b8:	20 ff       	sbrs	r18, 0
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    14bc:	f6 01       	movw	r30, r12
    14be:	60 81       	ld	r22, Z
    14c0:	67 0d       	add	r22, r7
    14c2:	f7 01       	movw	r30, r14
    14c4:	80 81       	ld	r24, Z
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	86 0d       	add	r24, r6
    14ca:	81 df       	rcall	.-254    	; 0x13ce <nokia_lcd_set_pixel>
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    14ce:	f6 01       	movw	r30, r12
    14d0:	60 81       	ld	r22, Z
    14d2:	67 0d       	add	r22, r7
    14d4:	f7 01       	movw	r30, r14
    14d6:	80 81       	ld	r24, Z
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	86 0d       	add	r24, r6
    14dc:	78 df       	rcall	.-272    	; 0x13ce <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    14de:	73 94       	inc	r7
    14e0:	87 2d       	mov	r24, r7
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	80 17       	cp	r24, r16
    14e6:	91 07       	cpc	r25, r17
    14e8:	e4 f2       	brlt	.-72     	; 0x14a2 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    14ea:	63 94       	inc	r6
    14ec:	86 2d       	mov	r24, r6
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	88 15       	cp	r24, r8
    14f2:	99 05       	cpc	r25, r9
    14f4:	6c f4       	brge	.+26     	; 0x1510 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    14f6:	10 16       	cp	r1, r16
    14f8:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    14fa:	bc f7       	brge	.-18     	; 0x14ea <nokia_lcd_write_char+0xc6>
    14fc:	86 2d       	mov	r24, r6
    14fe:	65 2d       	mov	r22, r5
    1500:	b3 d6       	rcall	.+3430   	; 0x2268 <__udivmodqi4>
    1502:	e5 01       	movw	r28, r10
    1504:	c8 0f       	add	r28, r24
    1506:	d1 1d       	adc	r29, r1
    1508:	c4 54       	subi	r28, 0x44	; 68
    150a:	df 4f       	sbci	r29, 0xFF	; 255
    150c:	71 2c       	mov	r7, r1
    150e:	c9 cf       	rjmp	.-110    	; 0x14a2 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1510:	80 91 59 0b 	lds	r24, 0x0B59	; 0x800b59 <nokia_lcd+0x1f8>
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	98 0f       	add	r25, r24
    1518:	85 2d       	mov	r24, r5
    151a:	88 0f       	add	r24, r24
    151c:	88 0f       	add	r24, r24
    151e:	85 0d       	add	r24, r5
    1520:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
    1522:	84 35       	cpi	r24, 0x54	; 84
    1524:	18 f4       	brcc	.+6      	; 0x152c <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1526:	80 93 59 0b 	sts	0x0B59, r24	; 0x800b59 <nokia_lcd+0x1f8>
    152a:	0e c0       	rjmp	.+28     	; 0x1548 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
    152c:	10 92 59 0b 	sts	0x0B59, r1	; 0x800b59 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1530:	ea e5       	ldi	r30, 0x5A	; 90
    1532:	fb e0       	ldi	r31, 0x0B	; 11
    1534:	80 81       	ld	r24, Z
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	98 0f       	add	r25, r24
    153a:	85 2d       	mov	r24, r5
    153c:	88 0f       	add	r24, r24
    153e:	88 0f       	add	r24, r24
    1540:	88 0f       	add	r24, r24
    1542:	85 19       	sub	r24, r5
    1544:	89 0f       	add	r24, r25
    1546:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    1548:	80 91 5a 0b 	lds	r24, 0x0B5A	; 0x800b5a <nokia_lcd+0x1f9>
    154c:	80 33       	cpi	r24, 0x30	; 48
    154e:	20 f0       	brcs	.+8      	; 0x1558 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
    1550:	10 92 59 0b 	sts	0x0B59, r1	; 0x800b59 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1554:	10 92 5a 0b 	sts	0x0B5A, r1	; 0x800b5a <nokia_lcd+0x1f9>
	}
}
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	08 95       	ret

00001578 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ec 01       	movw	r28, r24
	while(*str)
    1580:	88 81       	ld	r24, Y
    1582:	88 23       	and	r24, r24
    1584:	39 f0       	breq	.+14     	; 0x1594 <nokia_lcd_write_string+0x1c>
    1586:	16 2f       	mov	r17, r22
    1588:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
    158a:	61 2f       	mov	r22, r17
    158c:	4b df       	rcall	.-362    	; 0x1424 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    158e:	89 91       	ld	r24, Y+
    1590:	81 11       	cpse	r24, r1
    1592:	fb cf       	rjmp	.-10     	; 0x158a <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	08 95       	ret

0000159c <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    159c:	80 93 59 0b 	sts	0x0B59, r24	; 0x800b59 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    15a0:	60 93 5a 0b 	sts	0x0B5A, r22	; 0x800b5a <nokia_lcd+0x1f9>
    15a4:	08 95       	ret

000015a6 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    15ae:	80 e8       	ldi	r24, 0x80	; 128
    15b0:	c4 de       	rcall	.-632    	; 0x133a <write_cmd>
	write_cmd(0x40);
    15b2:	80 e4       	ldi	r24, 0x40	; 64
    15b4:	c2 de       	rcall	.-636    	; 0x133a <write_cmd>
    15b6:	c1 e6       	ldi	r28, 0x61	; 97
    15b8:	d9 e0       	ldi	r29, 0x09	; 9
    15ba:	09 e5       	ldi	r16, 0x59	; 89
    15bc:	1b e0       	ldi	r17, 0x0B	; 11
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	89 91       	ld	r24, Y+
    15c2:	9d de       	rcall	.-710    	; 0x12fe <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    15c4:	c0 17       	cp	r28, r16
    15c6:	d1 07       	cpc	r29, r17
    15c8:	d1 f7       	brne	.-12     	; 0x15be <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    15d4:	31 e1       	ldi	r19, 0x11	; 17
    15d6:	fc 01       	movw	r30, r24
    15d8:	30 83       	st	Z, r19
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	22 e2       	ldi	r18, 0x22	; 34
    15de:	20 83       	st	Z, r18
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	a3 e3       	ldi	r26, 0x33	; 51
    15e4:	a0 83       	st	Z, r26
    15e6:	31 97       	sbiw	r30, 0x01	; 1
    15e8:	60 83       	st	Z, r22
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	70 83       	st	Z, r23
    15ee:	31 97       	sbiw	r30, 0x01	; 1
    15f0:	10 82       	st	Z, r1
    15f2:	31 97       	sbiw	r30, 0x01	; 1
    15f4:	60 e8       	ldi	r22, 0x80	; 128
    15f6:	60 83       	st	Z, r22
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	10 82       	st	Z, r1
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	62 e0       	ldi	r22, 0x02	; 2
    1600:	60 83       	st	Z, r22
    1602:	31 97       	sbiw	r30, 0x01	; 1
    1604:	63 e0       	ldi	r22, 0x03	; 3
    1606:	60 83       	st	Z, r22
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	64 e0       	ldi	r22, 0x04	; 4
    160c:	60 83       	st	Z, r22
    160e:	31 97       	sbiw	r30, 0x01	; 1
    1610:	65 e0       	ldi	r22, 0x05	; 5
    1612:	60 83       	st	Z, r22
    1614:	31 97       	sbiw	r30, 0x01	; 1
    1616:	66 e0       	ldi	r22, 0x06	; 6
    1618:	60 83       	st	Z, r22
    161a:	31 97       	sbiw	r30, 0x01	; 1
    161c:	67 e0       	ldi	r22, 0x07	; 7
    161e:	60 83       	st	Z, r22
    1620:	31 97       	sbiw	r30, 0x01	; 1
    1622:	68 e0       	ldi	r22, 0x08	; 8
    1624:	60 83       	st	Z, r22
    1626:	31 97       	sbiw	r30, 0x01	; 1
    1628:	69 e0       	ldi	r22, 0x09	; 9
    162a:	60 83       	st	Z, r22
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	60 e1       	ldi	r22, 0x10	; 16
    1630:	60 83       	st	Z, r22
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	30 83       	st	Z, r19
    1636:	31 97       	sbiw	r30, 0x01	; 1
    1638:	32 e1       	ldi	r19, 0x12	; 18
    163a:	30 83       	st	Z, r19
    163c:	31 97       	sbiw	r30, 0x01	; 1
    163e:	33 e1       	ldi	r19, 0x13	; 19
    1640:	30 83       	st	Z, r19
    1642:	31 97       	sbiw	r30, 0x01	; 1
    1644:	34 e1       	ldi	r19, 0x14	; 20
    1646:	30 83       	st	Z, r19
    1648:	31 97       	sbiw	r30, 0x01	; 1
    164a:	35 e1       	ldi	r19, 0x15	; 21
    164c:	30 83       	st	Z, r19
    164e:	31 97       	sbiw	r30, 0x01	; 1
    1650:	36 e1       	ldi	r19, 0x16	; 22
    1652:	30 83       	st	Z, r19
    1654:	31 97       	sbiw	r30, 0x01	; 1
    1656:	37 e1       	ldi	r19, 0x17	; 23
    1658:	30 83       	st	Z, r19
    165a:	31 97       	sbiw	r30, 0x01	; 1
    165c:	38 e1       	ldi	r19, 0x18	; 24
    165e:	30 83       	st	Z, r19
    1660:	31 97       	sbiw	r30, 0x01	; 1
    1662:	39 e1       	ldi	r19, 0x19	; 25
    1664:	30 83       	st	Z, r19
    1666:	31 97       	sbiw	r30, 0x01	; 1
    1668:	30 e2       	ldi	r19, 0x20	; 32
    166a:	30 83       	st	Z, r19
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	31 e2       	ldi	r19, 0x21	; 33
    1670:	30 83       	st	Z, r19
    1672:	31 97       	sbiw	r30, 0x01	; 1
    1674:	20 83       	st	Z, r18
    1676:	31 97       	sbiw	r30, 0x01	; 1
    1678:	23 e2       	ldi	r18, 0x23	; 35
    167a:	20 83       	st	Z, r18
    167c:	31 97       	sbiw	r30, 0x01	; 1
    167e:	40 83       	st	Z, r20
    1680:	31 97       	sbiw	r30, 0x01	; 1
    1682:	50 83       	st	Z, r21
    1684:	31 97       	sbiw	r30, 0x01	; 1
    1686:	26 e2       	ldi	r18, 0x26	; 38
    1688:	20 83       	st	Z, r18
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	27 e2       	ldi	r18, 0x27	; 39
    168e:	20 83       	st	Z, r18
    1690:	31 97       	sbiw	r30, 0x01	; 1
    1692:	28 e2       	ldi	r18, 0x28	; 40
    1694:	20 83       	st	Z, r18
    1696:	31 97       	sbiw	r30, 0x01	; 1
    1698:	29 e2       	ldi	r18, 0x29	; 41
    169a:	20 83       	st	Z, r18
    169c:	31 97       	sbiw	r30, 0x01	; 1
    169e:	20 e3       	ldi	r18, 0x30	; 48
    16a0:	20 83       	st	Z, r18
    16a2:	31 97       	sbiw	r30, 0x01	; 1
    16a4:	21 e3       	ldi	r18, 0x31	; 49
    16a6:	20 83       	st	Z, r18
    16a8:	86 97       	sbiw	r24, 0x26	; 38
    16aa:	08 95       	ret

000016ac <xPortStartScheduler>:
    16ac:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    16b0:	8c e7       	ldi	r24, 0x7C	; 124
    16b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    16b6:	8b e0       	ldi	r24, 0x0B	; 11
    16b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    16bc:	ef e6       	ldi	r30, 0x6F	; 111
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	82 60       	ori	r24, 0x02	; 2
    16c4:	80 83       	st	Z, r24
    16c6:	a0 91 b3 0b 	lds	r26, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    16ca:	b0 91 b4 0b 	lds	r27, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    16ce:	cd 91       	ld	r28, X+
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	dd 91       	ld	r29, X+
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	ff 91       	pop	r31
    16d8:	ef 91       	pop	r30
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	bf 91       	pop	r27
    16e0:	af 91       	pop	r26
    16e2:	9f 91       	pop	r25
    16e4:	8f 91       	pop	r24
    16e6:	7f 91       	pop	r23
    16e8:	6f 91       	pop	r22
    16ea:	5f 91       	pop	r21
    16ec:	4f 91       	pop	r20
    16ee:	3f 91       	pop	r19
    16f0:	2f 91       	pop	r18
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	bf 90       	pop	r11
    1700:	af 90       	pop	r10
    1702:	9f 90       	pop	r9
    1704:	8f 90       	pop	r8
    1706:	7f 90       	pop	r7
    1708:	6f 90       	pop	r6
    170a:	5f 90       	pop	r5
    170c:	4f 90       	pop	r4
    170e:	3f 90       	pop	r3
    1710:	2f 90       	pop	r2
    1712:	1f 90       	pop	r1
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	08 95       	ret
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	08 95       	ret

00001720 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	0f 92       	push	r0
    1728:	1f 92       	push	r1
    172a:	11 24       	eor	r1, r1
    172c:	2f 92       	push	r2
    172e:	3f 92       	push	r3
    1730:	4f 92       	push	r4
    1732:	5f 92       	push	r5
    1734:	6f 92       	push	r6
    1736:	7f 92       	push	r7
    1738:	8f 92       	push	r8
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	ef 93       	push	r30
    1766:	ff 93       	push	r31
    1768:	a0 91 b3 0b 	lds	r26, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    176c:	b0 91 b4 0b 	lds	r27, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1770:	0d b6       	in	r0, 0x3d	; 61
    1772:	0d 92       	st	X+, r0
    1774:	0e b6       	in	r0, 0x3e	; 62
    1776:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1778:	8a d3       	rcall	.+1812   	; 0x1e8e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    177a:	a0 91 b3 0b 	lds	r26, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    177e:	b0 91 b4 0b 	lds	r27, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1782:	cd 91       	ld	r28, X+
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	dd 91       	ld	r29, X+
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	bf 91       	pop	r27
    1794:	af 91       	pop	r26
    1796:	9f 91       	pop	r25
    1798:	8f 91       	pop	r24
    179a:	7f 91       	pop	r23
    179c:	6f 91       	pop	r22
    179e:	5f 91       	pop	r21
    17a0:	4f 91       	pop	r20
    17a2:	3f 91       	pop	r19
    17a4:	2f 91       	pop	r18
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	ff 90       	pop	r15
    17ac:	ef 90       	pop	r14
    17ae:	df 90       	pop	r13
    17b0:	cf 90       	pop	r12
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	9f 90       	pop	r9
    17b8:	8f 90       	pop	r8
    17ba:	7f 90       	pop	r7
    17bc:	6f 90       	pop	r6
    17be:	5f 90       	pop	r5
    17c0:	4f 90       	pop	r4
    17c2:	3f 90       	pop	r3
    17c4:	2f 90       	pop	r2
    17c6:	1f 90       	pop	r1
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    17ce:	08 95       	ret

000017d0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	0f 92       	push	r0
    17d8:	1f 92       	push	r1
    17da:	11 24       	eor	r1, r1
    17dc:	2f 92       	push	r2
    17de:	3f 92       	push	r3
    17e0:	4f 92       	push	r4
    17e2:	5f 92       	push	r5
    17e4:	6f 92       	push	r6
    17e6:	7f 92       	push	r7
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	2f 93       	push	r18
    17fe:	3f 93       	push	r19
    1800:	4f 93       	push	r20
    1802:	5f 93       	push	r21
    1804:	6f 93       	push	r22
    1806:	7f 93       	push	r23
    1808:	8f 93       	push	r24
    180a:	9f 93       	push	r25
    180c:	af 93       	push	r26
    180e:	bf 93       	push	r27
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	ef 93       	push	r30
    1816:	ff 93       	push	r31
    1818:	a0 91 b3 0b 	lds	r26, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    181c:	b0 91 b4 0b 	lds	r27, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1820:	0d b6       	in	r0, 0x3d	; 61
    1822:	0d 92       	st	X+, r0
    1824:	0e b6       	in	r0, 0x3e	; 62
    1826:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1828:	95 d1       	rcall	.+810    	; 0x1b54 <vTaskIncrementTick>
	vTaskSwitchContext();
    182a:	31 d3       	rcall	.+1634   	; 0x1e8e <vTaskSwitchContext>
    182c:	a0 91 b3 0b 	lds	r26, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
	portRESTORE_CONTEXT();
    1830:	b0 91 b4 0b 	lds	r27, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1834:	cd 91       	ld	r28, X+
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	dd 91       	ld	r29, X+
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	9f 90       	pop	r9
    186a:	8f 90       	pop	r8
    186c:	7f 90       	pop	r7
    186e:	6f 90       	pop	r6
    1870:	5f 90       	pop	r5
    1872:	4f 90       	pop	r4
    1874:	3f 90       	pop	r3
    1876:	2f 90       	pop	r2
    1878:	1f 90       	pop	r1
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	08 95       	ret

00001882 <__vector_13>:

	asm volatile ( "ret" );
    1882:	a6 df       	rcall	.-180    	; 0x17d0 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1884:	18 95       	reti

00001886 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	ec 01       	movw	r28, r24
    188c:	e0 91 b3 0b 	lds	r30, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    1890:	f0 91 b4 0b 	lds	r31, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1894:	93 83       	std	Z+3, r25	; 0x03
    1896:	82 83       	std	Z+2, r24	; 0x02
    1898:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <xTickCount>
    189c:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <xTickCount+0x1>
    18a0:	c8 17       	cp	r28, r24
    18a2:	d9 07       	cpc	r29, r25
    18a4:	68 f4       	brcc	.+26     	; 0x18c0 <prvAddCurrentTaskToDelayedList+0x3a>
    18a6:	60 91 b3 0b 	lds	r22, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    18aa:	70 91 b4 0b 	lds	r23, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    18ae:	80 91 79 0b 	lds	r24, 0x0B79	; 0x800b79 <pxOverflowDelayedTaskList>
    18b2:	90 91 7a 0b 	lds	r25, 0x0B7A	; 0x800b7a <pxOverflowDelayedTaskList+0x1>
    18b6:	6e 5f       	subi	r22, 0xFE	; 254
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	0e 94 cd 01 	call	0x39a	; 0x39a <vListInsert>
    18be:	17 c0       	rjmp	.+46     	; 0x18ee <prvAddCurrentTaskToDelayedList+0x68>
    18c0:	60 91 b3 0b 	lds	r22, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    18c4:	70 91 b4 0b 	lds	r23, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    18c8:	80 91 7b 0b 	lds	r24, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    18cc:	90 91 7c 0b 	lds	r25, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    18d0:	6e 5f       	subi	r22, 0xFE	; 254
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	0e 94 cd 01 	call	0x39a	; 0x39a <vListInsert>
    18d8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <xNextTaskUnblockTime>
    18dc:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <xNextTaskUnblockTime+0x1>
    18e0:	c8 17       	cp	r28, r24
    18e2:	d9 07       	cpc	r29, r25
    18e4:	20 f4       	brcc	.+8      	; 0x18ee <prvAddCurrentTaskToDelayedList+0x68>
    18e6:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <xNextTaskUnblockTime+0x1>
    18ea:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <xNextTaskUnblockTime>
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <xTaskGenericCreate>:
    18f4:	4f 92       	push	r4
    18f6:	5f 92       	push	r5
    18f8:	6f 92       	push	r6
    18fa:	7f 92       	push	r7
    18fc:	8f 92       	push	r8
    18fe:	9f 92       	push	r9
    1900:	af 92       	push	r10
    1902:	bf 92       	push	r11
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	5c 01       	movw	r10, r24
    1916:	4b 01       	movw	r8, r22
    1918:	3a 01       	movw	r6, r20
    191a:	29 01       	movw	r4, r18
    191c:	81 e2       	ldi	r24, 0x21	; 33
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 6d 01 	call	0x2da	; 0x2da <pvPortMalloc>
    1924:	ec 01       	movw	r28, r24
    1926:	89 2b       	or	r24, r25
    1928:	09 f4       	brne	.+2      	; 0x192c <xTaskGenericCreate+0x38>
    192a:	d3 c0       	rjmp	.+422    	; 0x1ad2 <xTaskGenericCreate+0x1de>
    192c:	c1 14       	cp	r12, r1
    192e:	d1 04       	cpc	r13, r1
    1930:	09 f0       	breq	.+2      	; 0x1934 <xTaskGenericCreate+0x40>
    1932:	cb c0       	rjmp	.+406    	; 0x1aca <xTaskGenericCreate+0x1d6>
    1934:	c3 01       	movw	r24, r6
    1936:	0e 94 6d 01 	call	0x2da	; 0x2da <pvPortMalloc>
    193a:	98 8f       	std	Y+24, r25	; 0x18
    193c:	8f 8b       	std	Y+23, r24	; 0x17
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	21 f4       	brne	.+8      	; 0x194a <xTaskGenericCreate+0x56>
    1942:	ce 01       	movw	r24, r28
    1944:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>
    1948:	c4 c0       	rjmp	.+392    	; 0x1ad2 <xTaskGenericCreate+0x1de>
    194a:	a3 01       	movw	r20, r6
    194c:	65 ea       	ldi	r22, 0xA5	; 165
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	a0 d4       	rcall	.+2368   	; 0x2292 <memset>
    1952:	93 01       	movw	r18, r6
    1954:	21 50       	subi	r18, 0x01	; 1
    1956:	31 09       	sbc	r19, r1
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	3c 01       	movw	r6, r24
    195e:	62 0e       	add	r6, r18
    1960:	73 1e       	adc	r7, r19
    1962:	48 e0       	ldi	r20, 0x08	; 8
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	b4 01       	movw	r22, r8
    1968:	ce 01       	movw	r24, r28
    196a:	49 96       	adiw	r24, 0x19	; 25
    196c:	99 d4       	rcall	.+2354   	; 0x22a0 <strncpy>
    196e:	18 a2       	std	Y+32, r1	; 0x20
    1970:	10 2f       	mov	r17, r16
    1972:	04 30       	cpi	r16, 0x04	; 4
    1974:	08 f0       	brcs	.+2      	; 0x1978 <xTaskGenericCreate+0x84>
    1976:	13 e0       	ldi	r17, 0x03	; 3
    1978:	1e 8b       	std	Y+22, r17	; 0x16
    197a:	6e 01       	movw	r12, r28
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	c8 0e       	add	r12, r24
    1980:	d1 1c       	adc	r13, r1
    1982:	c6 01       	movw	r24, r12
    1984:	0e 94 a2 01 	call	0x344	; 0x344 <vListInitialiseItem>
    1988:	ce 01       	movw	r24, r28
    198a:	0c 96       	adiw	r24, 0x0c	; 12
    198c:	0e 94 a2 01 	call	0x344	; 0x344 <vListInitialiseItem>
    1990:	d9 87       	std	Y+9, r29	; 0x09
    1992:	c8 87       	std	Y+8, r28	; 0x08
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	81 1b       	sub	r24, r17
    199a:	91 09       	sbc	r25, r1
    199c:	9d 87       	std	Y+13, r25	; 0x0d
    199e:	8c 87       	std	Y+12, r24	; 0x0c
    19a0:	db 8b       	std	Y+19, r29	; 0x13
    19a2:	ca 8b       	std	Y+18, r28	; 0x12
    19a4:	a2 01       	movw	r20, r4
    19a6:	b5 01       	movw	r22, r10
    19a8:	c3 01       	movw	r24, r6
    19aa:	14 de       	rcall	.-984    	; 0x15d4 <pxPortInitialiseStack>
    19ac:	99 83       	std	Y+1, r25	; 0x01
    19ae:	88 83       	st	Y, r24
    19b0:	e1 14       	cp	r14, r1
    19b2:	f1 04       	cpc	r15, r1
    19b4:	19 f0       	breq	.+6      	; 0x19bc <xTaskGenericCreate+0xc8>
    19b6:	f7 01       	movw	r30, r14
    19b8:	d1 83       	std	Z+1, r29	; 0x01
    19ba:	c0 83       	st	Z, r28
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	0f 92       	push	r0
    19c2:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <uxCurrentNumberOfTasks>
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <uxCurrentNumberOfTasks>
    19cc:	80 91 b3 0b 	lds	r24, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    19d0:	90 91 b4 0b 	lds	r25, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    19d4:	89 2b       	or	r24, r25
    19d6:	a9 f5       	brne	.+106    	; 0x1a42 <xTaskGenericCreate+0x14e>
    19d8:	d0 93 b4 0b 	sts	0x0BB4, r29	; 0x800bb4 <pxCurrentTCB+0x1>
    19dc:	c0 93 b3 0b 	sts	0x0BB3, r28	; 0x800bb3 <pxCurrentTCB>
    19e0:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <uxCurrentNumberOfTasks>
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	e1 f5       	brne	.+120    	; 0x1a60 <xTaskGenericCreate+0x16c>
    19e8:	8f e8       	ldi	r24, 0x8F	; 143
    19ea:	9b e0       	ldi	r25, 0x0B	; 11
    19ec:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    19f0:	88 e9       	ldi	r24, 0x98	; 152
    19f2:	9b e0       	ldi	r25, 0x0B	; 11
    19f4:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    19f8:	81 ea       	ldi	r24, 0xA1	; 161
    19fa:	9b e0       	ldi	r25, 0x0B	; 11
    19fc:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1a00:	8a ea       	ldi	r24, 0xAA	; 170
    1a02:	9b e0       	ldi	r25, 0x0B	; 11
    1a04:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1a08:	86 e8       	ldi	r24, 0x86	; 134
    1a0a:	9b e0       	ldi	r25, 0x0B	; 11
    1a0c:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1a10:	8d e7       	ldi	r24, 0x7D	; 125
    1a12:	9b e0       	ldi	r25, 0x0B	; 11
    1a14:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1a18:	80 e7       	ldi	r24, 0x70	; 112
    1a1a:	9b e0       	ldi	r25, 0x0B	; 11
    1a1c:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1a20:	87 e6       	ldi	r24, 0x67	; 103
    1a22:	9b e0       	ldi	r25, 0x0B	; 11
    1a24:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1a28:	86 e8       	ldi	r24, 0x86	; 134
    1a2a:	9b e0       	ldi	r25, 0x0B	; 11
    1a2c:	90 93 7c 0b 	sts	0x0B7C, r25	; 0x800b7c <pxDelayedTaskList+0x1>
    1a30:	80 93 7b 0b 	sts	0x0B7B, r24	; 0x800b7b <pxDelayedTaskList>
    1a34:	8d e7       	ldi	r24, 0x7D	; 125
    1a36:	9b e0       	ldi	r25, 0x0B	; 11
    1a38:	90 93 7a 0b 	sts	0x0B7A, r25	; 0x800b7a <pxOverflowDelayedTaskList+0x1>
    1a3c:	80 93 79 0b 	sts	0x0B79, r24	; 0x800b79 <pxOverflowDelayedTaskList>
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <xTaskGenericCreate+0x16c>
    1a42:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <xSchedulerRunning>
    1a46:	81 11       	cpse	r24, r1
    1a48:	0b c0       	rjmp	.+22     	; 0x1a60 <xTaskGenericCreate+0x16c>
    1a4a:	e0 91 b3 0b 	lds	r30, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    1a4e:	f0 91 b4 0b 	lds	r31, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1a52:	86 89       	ldd	r24, Z+22	; 0x16
    1a54:	08 17       	cp	r16, r24
    1a56:	20 f0       	brcs	.+8      	; 0x1a60 <xTaskGenericCreate+0x16c>
    1a58:	d0 93 b4 0b 	sts	0x0BB4, r29	; 0x800bb4 <pxCurrentTCB+0x1>
    1a5c:	c0 93 b3 0b 	sts	0x0BB3, r28	; 0x800bb3 <pxCurrentTCB>
    1a60:	8e 89       	ldd	r24, Y+22	; 0x16
    1a62:	90 91 62 0b 	lds	r25, 0x0B62	; 0x800b62 <uxTopUsedPriority>
    1a66:	98 17       	cp	r25, r24
    1a68:	10 f4       	brcc	.+4      	; 0x1a6e <xTaskGenericCreate+0x17a>
    1a6a:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <uxTopUsedPriority>
    1a6e:	90 91 5b 0b 	lds	r25, 0x0B5B	; 0x800b5b <uxTaskNumber>
    1a72:	9f 5f       	subi	r25, 0xFF	; 255
    1a74:	90 93 5b 0b 	sts	0x0B5B, r25	; 0x800b5b <uxTaskNumber>
    1a78:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <uxTopReadyPriority>
    1a7c:	98 17       	cp	r25, r24
    1a7e:	10 f4       	brcc	.+4      	; 0x1a84 <xTaskGenericCreate+0x190>
    1a80:	80 93 61 0b 	sts	0x0B61, r24	; 0x800b61 <uxTopReadyPriority>
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 01       	movw	r18, r24
    1a88:	22 0f       	add	r18, r18
    1a8a:	33 1f       	adc	r19, r19
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	22 0f       	add	r18, r18
    1a92:	33 1f       	adc	r19, r19
    1a94:	82 0f       	add	r24, r18
    1a96:	93 1f       	adc	r25, r19
    1a98:	b6 01       	movw	r22, r12
    1a9a:	81 57       	subi	r24, 0x71	; 113
    1a9c:	94 4f       	sbci	r25, 0xF4	; 244
    1a9e:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <xSchedulerRunning>
    1aaa:	88 23       	and	r24, r24
    1aac:	51 f0       	breq	.+20     	; 0x1ac2 <xTaskGenericCreate+0x1ce>
    1aae:	e0 91 b3 0b 	lds	r30, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    1ab2:	f0 91 b4 0b 	lds	r31, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1ab6:	86 89       	ldd	r24, Z+22	; 0x16
    1ab8:	80 17       	cp	r24, r16
    1aba:	28 f4       	brcc	.+10     	; 0x1ac6 <xTaskGenericCreate+0x1d2>
    1abc:	31 de       	rcall	.-926    	; 0x1720 <vPortYield>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <xTaskGenericCreate+0x1e0>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <xTaskGenericCreate+0x1e0>
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	05 c0       	rjmp	.+10     	; 0x1ad4 <xTaskGenericCreate+0x1e0>
    1aca:	d8 8e       	std	Y+24, r13	; 0x18
    1acc:	cf 8a       	std	Y+23, r12	; 0x17
    1ace:	c6 01       	movw	r24, r12
    1ad0:	3c cf       	rjmp	.-392    	; 0x194a <xTaskGenericCreate+0x56>
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	bf 90       	pop	r11
    1ae6:	af 90       	pop	r10
    1ae8:	9f 90       	pop	r9
    1aea:	8f 90       	pop	r8
    1aec:	7f 90       	pop	r7
    1aee:	6f 90       	pop	r6
    1af0:	5f 90       	pop	r5
    1af2:	4f 90       	pop	r4
    1af4:	08 95       	ret

00001af6 <vTaskStartScheduler>:
    1af6:	af 92       	push	r10
    1af8:	bf 92       	push	r11
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	a1 2c       	mov	r10, r1
    1b06:	b1 2c       	mov	r11, r1
    1b08:	c1 2c       	mov	r12, r1
    1b0a:	d1 2c       	mov	r13, r1
    1b0c:	e1 2c       	mov	r14, r1
    1b0e:	f1 2c       	mov	r15, r1
    1b10:	00 e0       	ldi	r16, 0x00	; 0
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	45 e5       	ldi	r20, 0x55	; 85
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	65 e6       	ldi	r22, 0x65	; 101
    1b1c:	73 e0       	ldi	r23, 0x03	; 3
    1b1e:	8e e0       	ldi	r24, 0x0E	; 14
    1b20:	9f e0       	ldi	r25, 0x0F	; 15
    1b22:	e8 de       	rcall	.-560    	; 0x18f4 <xTaskGenericCreate>
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	41 f4       	brne	.+16     	; 0x1b38 <vTaskStartScheduler+0x42>
    1b28:	f8 94       	cli
    1b2a:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <xSchedulerRunning>
    1b2e:	10 92 64 0b 	sts	0x0B64, r1	; 0x800b64 <xTickCount+0x1>
    1b32:	10 92 63 0b 	sts	0x0B63, r1	; 0x800b63 <xTickCount>
    1b36:	ba dd       	rcall	.-1164   	; 0x16ac <xPortStartScheduler>
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	cf 90       	pop	r12
    1b42:	bf 90       	pop	r11
    1b44:	af 90       	pop	r10
    1b46:	08 95       	ret

00001b48 <vTaskSuspendAll>:
    1b48:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <uxSchedulerSuspended>
    1b4c:	8f 5f       	subi	r24, 0xFF	; 255
    1b4e:	80 93 5f 0b 	sts	0x0B5F, r24	; 0x800b5f <uxSchedulerSuspended>
    1b52:	08 95       	ret

00001b54 <vTaskIncrementTick>:
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <uxSchedulerSuspended>
    1b60:	81 11       	cpse	r24, r1
    1b62:	b2 c0       	rjmp	.+356    	; 0x1cc8 <vTaskIncrementTick+0x174>
    1b64:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <xTickCount>
    1b68:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <xTickCount+0x1>
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	90 93 64 0b 	sts	0x0B64, r25	; 0x800b64 <xTickCount+0x1>
    1b72:	80 93 63 0b 	sts	0x0B63, r24	; 0x800b63 <xTickCount>
    1b76:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <xTickCount>
    1b7a:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <xTickCount+0x1>
    1b7e:	89 2b       	or	r24, r25
    1b80:	99 f5       	brne	.+102    	; 0x1be8 <vTaskIncrementTick+0x94>
    1b82:	80 91 7b 0b 	lds	r24, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    1b86:	90 91 7c 0b 	lds	r25, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    1b8a:	20 91 79 0b 	lds	r18, 0x0B79	; 0x800b79 <pxOverflowDelayedTaskList>
    1b8e:	30 91 7a 0b 	lds	r19, 0x0B7A	; 0x800b7a <pxOverflowDelayedTaskList+0x1>
    1b92:	30 93 7c 0b 	sts	0x0B7C, r19	; 0x800b7c <pxDelayedTaskList+0x1>
    1b96:	20 93 7b 0b 	sts	0x0B7B, r18	; 0x800b7b <pxDelayedTaskList>
    1b9a:	90 93 7a 0b 	sts	0x0B7A, r25	; 0x800b7a <pxOverflowDelayedTaskList+0x1>
    1b9e:	80 93 79 0b 	sts	0x0B79, r24	; 0x800b79 <pxOverflowDelayedTaskList>
    1ba2:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <xNumOfOverflows>
    1ba6:	8f 5f       	subi	r24, 0xFF	; 255
    1ba8:	80 93 5c 0b 	sts	0x0B5C, r24	; 0x800b5c <xNumOfOverflows>
    1bac:	e0 91 7b 0b 	lds	r30, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    1bb0:	f0 91 7c 0b 	lds	r31, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    1bb4:	80 81       	ld	r24, Z
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	07 c0       	rjmp	.+14     	; 0x1bc8 <vTaskIncrementTick+0x74>
    1bba:	8f ef       	ldi	r24, 0xFF	; 255
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <xNextTaskUnblockTime+0x1>
    1bc2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <xNextTaskUnblockTime>
    1bc6:	10 c0       	rjmp	.+32     	; 0x1be8 <vTaskIncrementTick+0x94>
    1bc8:	e0 91 7b 0b 	lds	r30, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    1bcc:	f0 91 7c 0b 	lds	r31, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    1bd0:	05 80       	ldd	r0, Z+5	; 0x05
    1bd2:	f6 81       	ldd	r31, Z+6	; 0x06
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	06 80       	ldd	r0, Z+6	; 0x06
    1bd8:	f7 81       	ldd	r31, Z+7	; 0x07
    1bda:	e0 2d       	mov	r30, r0
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <xNextTaskUnblockTime+0x1>
    1be4:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <xNextTaskUnblockTime>
    1be8:	20 91 63 0b 	lds	r18, 0x0B63	; 0x800b63 <xTickCount>
    1bec:	30 91 64 0b 	lds	r19, 0x0B64	; 0x800b64 <xTickCount+0x1>
    1bf0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <xNextTaskUnblockTime>
    1bf4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <xNextTaskUnblockTime+0x1>
    1bf8:	28 17       	cp	r18, r24
    1bfa:	39 07       	cpc	r19, r25
    1bfc:	08 f4       	brcc	.+2      	; 0x1c00 <vTaskIncrementTick+0xac>
    1bfe:	69 c0       	rjmp	.+210    	; 0x1cd2 <vTaskIncrementTick+0x17e>
    1c00:	e0 91 7b 0b 	lds	r30, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    1c04:	f0 91 7c 0b 	lds	r31, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 23       	and	r24, r24
    1c0c:	99 f0       	breq	.+38     	; 0x1c34 <vTaskIncrementTick+0xe0>
    1c0e:	e0 91 7b 0b 	lds	r30, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    1c12:	f0 91 7c 0b 	lds	r31, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    1c16:	05 80       	ldd	r0, Z+5	; 0x05
    1c18:	f6 81       	ldd	r31, Z+6	; 0x06
    1c1a:	e0 2d       	mov	r30, r0
    1c1c:	c6 81       	ldd	r28, Z+6	; 0x06
    1c1e:	d7 81       	ldd	r29, Z+7	; 0x07
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	20 91 63 0b 	lds	r18, 0x0B63	; 0x800b63 <xTickCount>
    1c28:	30 91 64 0b 	lds	r19, 0x0B64	; 0x800b64 <xTickCount+0x1>
    1c2c:	28 17       	cp	r18, r24
    1c2e:	39 07       	cpc	r19, r25
    1c30:	f8 f4       	brcc	.+62     	; 0x1c70 <vTaskIncrementTick+0x11c>
    1c32:	19 c0       	rjmp	.+50     	; 0x1c66 <vTaskIncrementTick+0x112>
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	9f ef       	ldi	r25, 0xFF	; 255
    1c38:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <xNextTaskUnblockTime+0x1>
    1c3c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <xNextTaskUnblockTime>
    1c40:	48 c0       	rjmp	.+144    	; 0x1cd2 <vTaskIncrementTick+0x17e>
    1c42:	e0 91 7b 0b 	lds	r30, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    1c46:	f0 91 7c 0b 	lds	r31, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    1c4a:	05 80       	ldd	r0, Z+5	; 0x05
    1c4c:	f6 81       	ldd	r31, Z+6	; 0x06
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	c6 81       	ldd	r28, Z+6	; 0x06
    1c52:	d7 81       	ldd	r29, Z+7	; 0x07
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	20 91 63 0b 	lds	r18, 0x0B63	; 0x800b63 <xTickCount>
    1c5c:	30 91 64 0b 	lds	r19, 0x0B64	; 0x800b64 <xTickCount+0x1>
    1c60:	28 17       	cp	r18, r24
    1c62:	39 07       	cpc	r19, r25
    1c64:	28 f4       	brcc	.+10     	; 0x1c70 <vTaskIncrementTick+0x11c>
    1c66:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <xNextTaskUnblockTime+0x1>
    1c6a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <xNextTaskUnblockTime>
    1c6e:	31 c0       	rjmp	.+98     	; 0x1cd2 <vTaskIncrementTick+0x17e>
    1c70:	8e 01       	movw	r16, r28
    1c72:	0e 5f       	subi	r16, 0xFE	; 254
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	c8 01       	movw	r24, r16
    1c78:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    1c7c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c7e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c80:	89 2b       	or	r24, r25
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <vTaskIncrementTick+0x138>
    1c84:	ce 01       	movw	r24, r28
    1c86:	0c 96       	adiw	r24, 0x0c	; 12
    1c88:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    1c8c:	8e 89       	ldd	r24, Y+22	; 0x16
    1c8e:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <uxTopReadyPriority>
    1c92:	98 17       	cp	r25, r24
    1c94:	10 f4       	brcc	.+4      	; 0x1c9a <vTaskIncrementTick+0x146>
    1c96:	80 93 61 0b 	sts	0x0B61, r24	; 0x800b61 <uxTopReadyPriority>
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	22 0f       	add	r18, r18
    1ca4:	33 1f       	adc	r19, r19
    1ca6:	22 0f       	add	r18, r18
    1ca8:	33 1f       	adc	r19, r19
    1caa:	82 0f       	add	r24, r18
    1cac:	93 1f       	adc	r25, r19
    1cae:	b8 01       	movw	r22, r16
    1cb0:	81 57       	subi	r24, 0x71	; 113
    1cb2:	94 4f       	sbci	r25, 0xF4	; 244
    1cb4:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    1cb8:	e0 91 7b 0b 	lds	r30, 0x0B7B	; 0x800b7b <pxDelayedTaskList>
    1cbc:	f0 91 7c 0b 	lds	r31, 0x0B7C	; 0x800b7c <pxDelayedTaskList+0x1>
    1cc0:	80 81       	ld	r24, Z
    1cc2:	81 11       	cpse	r24, r1
    1cc4:	be cf       	rjmp	.-132    	; 0x1c42 <vTaskIncrementTick+0xee>
    1cc6:	b6 cf       	rjmp	.-148    	; 0x1c34 <vTaskIncrementTick+0xe0>
    1cc8:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <uxMissedTicks>
    1ccc:	8f 5f       	subi	r24, 0xFF	; 255
    1cce:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <uxMissedTicks>
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <xTaskResumeAll>:
    1cdc:	cf 92       	push	r12
    1cde:	df 92       	push	r13
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	cf 93       	push	r28
    1cea:	df 93       	push	r29
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	0f 92       	push	r0
    1cf2:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <uxSchedulerSuspended>
    1cf6:	81 50       	subi	r24, 0x01	; 1
    1cf8:	80 93 5f 0b 	sts	0x0B5F, r24	; 0x800b5f <uxSchedulerSuspended>
    1cfc:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <uxSchedulerSuspended>
    1d00:	81 11       	cpse	r24, r1
    1d02:	62 c0       	rjmp	.+196    	; 0x1dc8 <xTaskResumeAll+0xec>
    1d04:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <uxCurrentNumberOfTasks>
    1d08:	81 11       	cpse	r24, r1
    1d0a:	32 c0       	rjmp	.+100    	; 0x1d70 <xTaskResumeAll+0x94>
    1d0c:	60 c0       	rjmp	.+192    	; 0x1dce <xTaskResumeAll+0xf2>
    1d0e:	d7 01       	movw	r26, r14
    1d10:	15 96       	adiw	r26, 0x05	; 5
    1d12:	ed 91       	ld	r30, X+
    1d14:	fc 91       	ld	r31, X
    1d16:	16 97       	sbiw	r26, 0x06	; 6
    1d18:	c6 81       	ldd	r28, Z+6	; 0x06
    1d1a:	d7 81       	ldd	r29, Z+7	; 0x07
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	0c 96       	adiw	r24, 0x0c	; 12
    1d20:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    1d24:	8e 01       	movw	r16, r28
    1d26:	0e 5f       	subi	r16, 0xFE	; 254
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    1d30:	8e 89       	ldd	r24, Y+22	; 0x16
    1d32:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <uxTopReadyPriority>
    1d36:	98 17       	cp	r25, r24
    1d38:	10 f4       	brcc	.+4      	; 0x1d3e <xTaskResumeAll+0x62>
    1d3a:	80 93 61 0b 	sts	0x0B61, r24	; 0x800b61 <uxTopReadyPriority>
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9c 01       	movw	r18, r24
    1d42:	22 0f       	add	r18, r18
    1d44:	33 1f       	adc	r19, r19
    1d46:	22 0f       	add	r18, r18
    1d48:	33 1f       	adc	r19, r19
    1d4a:	22 0f       	add	r18, r18
    1d4c:	33 1f       	adc	r19, r19
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	b8 01       	movw	r22, r16
    1d54:	81 57       	subi	r24, 0x71	; 113
    1d56:	94 4f       	sbci	r25, 0xF4	; 244
    1d58:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    1d5c:	e0 91 b3 0b 	lds	r30, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    1d60:	f0 91 b4 0b 	lds	r31, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1d64:	9e 89       	ldd	r25, Y+22	; 0x16
    1d66:	86 89       	ldd	r24, Z+22	; 0x16
    1d68:	98 17       	cp	r25, r24
    1d6a:	58 f0       	brcs	.+22     	; 0x1d82 <xTaskResumeAll+0xa6>
    1d6c:	dc 2c       	mov	r13, r12
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <xTaskResumeAll+0xa6>
    1d70:	d1 2c       	mov	r13, r1
    1d72:	0f 2e       	mov	r0, r31
    1d74:	f0 e7       	ldi	r31, 0x70	; 112
    1d76:	ef 2e       	mov	r14, r31
    1d78:	fb e0       	ldi	r31, 0x0B	; 11
    1d7a:	ff 2e       	mov	r15, r31
    1d7c:	f0 2d       	mov	r31, r0
    1d7e:	cc 24       	eor	r12, r12
    1d80:	c3 94       	inc	r12
    1d82:	f7 01       	movw	r30, r14
    1d84:	80 81       	ld	r24, Z
    1d86:	81 11       	cpse	r24, r1
    1d88:	c2 cf       	rjmp	.-124    	; 0x1d0e <xTaskResumeAll+0x32>
    1d8a:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <uxMissedTicks>
    1d8e:	88 23       	and	r24, r24
    1d90:	79 f0       	breq	.+30     	; 0x1db0 <xTaskResumeAll+0xd4>
    1d92:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <uxMissedTicks>
    1d96:	88 23       	and	r24, r24
    1d98:	91 f0       	breq	.+36     	; 0x1dbe <xTaskResumeAll+0xe2>
    1d9a:	dc de       	rcall	.-584    	; 0x1b54 <vTaskIncrementTick>
    1d9c:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <uxMissedTicks>
    1da0:	81 50       	subi	r24, 0x01	; 1
    1da2:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <uxMissedTicks>
    1da6:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <uxMissedTicks>
    1daa:	81 11       	cpse	r24, r1
    1dac:	f6 cf       	rjmp	.-20     	; 0x1d9a <xTaskResumeAll+0xbe>
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <xTaskResumeAll+0xe2>
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	df 16       	cp	r13, r31
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <xTaskResumeAll+0xe2>
    1db6:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <xMissedYield>
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	39 f4       	brne	.+14     	; 0x1dcc <xTaskResumeAll+0xf0>
    1dbe:	10 92 5d 0b 	sts	0x0B5D, r1	; 0x800b5d <xMissedYield>
    1dc2:	ae dc       	rcall	.-1700   	; 0x1720 <vPortYield>
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <xTaskResumeAll+0xf2>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <xTaskResumeAll+0xf2>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	08 95       	ret

00001de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1dea:	89 2b       	or	r24, r25
    1dec:	99 f0       	breq	.+38     	; 0x1e14 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    1dee:	ac de       	rcall	.-680    	; 0x1b48 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1df0:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <xTickCount>
    1df4:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <xTickCount+0x1>
    1df8:	c8 0f       	add	r28, r24
    1dfa:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1dfc:	80 91 b3 0b 	lds	r24, 0x0BB3	; 0x800bb3 <pxCurrentTCB>
    1e00:	90 91 b4 0b 	lds	r25, 0x0BB4	; 0x800bb4 <pxCurrentTCB+0x1>
    1e04:	02 96       	adiw	r24, 0x02	; 2
    1e06:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1e0a:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    1e0c:	3c dd       	rcall	.-1416   	; 0x1886 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1e0e:	66 df       	rcall	.-308    	; 0x1cdc <xTaskResumeAll>
    1e10:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <vTaskDelay+0x32>
    1e14:	85 dc       	rcall	.-1782   	; 0x1720 <vPortYield>
		}
	}
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	08 95       	ret

00001e1c <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e1c:	0f 2e       	mov	r0, r31
    1e1e:	f7 e6       	ldi	r31, 0x67	; 103
    1e20:	ef 2e       	mov	r14, r31
    1e22:	fb e0       	ldi	r31, 0x0B	; 11
    1e24:	ff 2e       	mov	r15, r31
    1e26:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1e28:	cf e8       	ldi	r28, 0x8F	; 143
    1e2a:	db e0       	ldi	r29, 0x0B	; 11
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1e2c:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <uxTasksDeleted>
    1e30:	88 23       	and	r24, r24
    1e32:	41 f1       	breq	.+80     	; 0x1e84 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    1e34:	89 de       	rcall	.-750    	; 0x1b48 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1e36:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    1e38:	1c 91       	ld	r17, X
    1e3a:	50 df       	rcall	.-352    	; 0x1cdc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1e3c:	11 23       	and	r17, r17
    1e3e:	11 f1       	breq	.+68     	; 0x1e84 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1e46:	d7 01       	movw	r26, r14
    1e48:	15 96       	adiw	r26, 0x05	; 5
    1e4a:	ed 91       	ld	r30, X+
    1e4c:	fc 91       	ld	r31, X
    1e4e:	16 97       	sbiw	r26, 0x06	; 6
    1e50:	06 81       	ldd	r16, Z+6	; 0x06
    1e52:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    1e54:	c8 01       	movw	r24, r16
    1e56:	02 96       	adiw	r24, 0x02	; 2
    1e58:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
					--uxCurrentNumberOfTasks;
    1e5c:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <uxCurrentNumberOfTasks>
    1e60:	81 50       	subi	r24, 0x01	; 1
    1e62:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1e66:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <uxTasksDeleted>
    1e6a:	81 50       	subi	r24, 0x01	; 1
    1e6c:	80 93 66 0b 	sts	0x0B66, r24	; 0x800b66 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1e70:	0f 90       	pop	r0
    1e72:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1e74:	f8 01       	movw	r30, r16
    1e76:	87 89       	ldd	r24, Z+23	; 0x17
    1e78:	90 8d       	ldd	r25, Z+24	; 0x18
    1e7a:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>
		vPortFree( pxTCB );
    1e7e:	c8 01       	movw	r24, r16
    1e80:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1e84:	88 81       	ld	r24, Y
    1e86:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    1e88:	88 f2       	brcs	.-94     	; 0x1e2c <prvIdleTask+0x10>
    1e8a:	4a dc       	rcall	.-1900   	; 0x1720 <vPortYield>
    1e8c:	cf cf       	rjmp	.-98     	; 0x1e2c <prvIdleTask+0x10>

00001e8e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1e8e:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <uxSchedulerSuspended>
    1e92:	81 11       	cpse	r24, r1
    1e94:	13 c0       	rjmp	.+38     	; 0x1ebc <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1e96:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <uxTopReadyPriority>
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	8e 0f       	add	r24, r30
    1eac:	9f 1f       	adc	r25, r31
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e1 57       	subi	r30, 0x71	; 113
    1eb2:	f4 4f       	sbci	r31, 0xF4	; 244
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 23       	and	r24, r24
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <vTaskSwitchContext+0x36>
    1eba:	1b c0       	rjmp	.+54     	; 0x1ef2 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	80 93 5d 0b 	sts	0x0B5D, r24	; 0x800b5d <xMissedYield>
    1ec2:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1ec4:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <uxTopReadyPriority>
    1ec8:	81 50       	subi	r24, 0x01	; 1
    1eca:	80 93 61 0b 	sts	0x0B61, r24	; 0x800b61 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1ece:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <uxTopReadyPriority>
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	8e 0f       	add	r24, r30
    1ee4:	9f 1f       	adc	r25, r31
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	e1 57       	subi	r30, 0x71	; 113
    1eea:	f4 4f       	sbci	r31, 0xF4	; 244
    1eec:	80 81       	ld	r24, Z
    1eee:	88 23       	and	r24, r24
    1ef0:	49 f3       	breq	.-46     	; 0x1ec4 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1ef2:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <uxTopReadyPriority>
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 01       	movw	r18, r24
    1efa:	22 0f       	add	r18, r18
    1efc:	33 1f       	adc	r19, r19
    1efe:	22 0f       	add	r18, r18
    1f00:	33 1f       	adc	r19, r19
    1f02:	22 0f       	add	r18, r18
    1f04:	33 1f       	adc	r19, r19
    1f06:	28 0f       	add	r18, r24
    1f08:	39 1f       	adc	r19, r25
    1f0a:	d9 01       	movw	r26, r18
    1f0c:	a1 57       	subi	r26, 0x71	; 113
    1f0e:	b4 4f       	sbci	r27, 0xF4	; 244
    1f10:	11 96       	adiw	r26, 0x01	; 1
    1f12:	ed 91       	ld	r30, X+
    1f14:	fc 91       	ld	r31, X
    1f16:	12 97       	sbiw	r26, 0x02	; 2
    1f18:	02 80       	ldd	r0, Z+2	; 0x02
    1f1a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f1c:	e0 2d       	mov	r30, r0
    1f1e:	12 96       	adiw	r26, 0x02	; 2
    1f20:	fc 93       	st	X, r31
    1f22:	ee 93       	st	-X, r30
    1f24:	11 97       	sbiw	r26, 0x01	; 1
    1f26:	2e 56       	subi	r18, 0x6E	; 110
    1f28:	34 4f       	sbci	r19, 0xF4	; 244
    1f2a:	e2 17       	cp	r30, r18
    1f2c:	f3 07       	cpc	r31, r19
    1f2e:	29 f4       	brne	.+10     	; 0x1f3a <vTaskSwitchContext+0xac>
    1f30:	22 81       	ldd	r18, Z+2	; 0x02
    1f32:	33 81       	ldd	r19, Z+3	; 0x03
    1f34:	fd 01       	movw	r30, r26
    1f36:	32 83       	std	Z+2, r19	; 0x02
    1f38:	21 83       	std	Z+1, r18	; 0x01
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	8e 0f       	add	r24, r30
    1f4a:	9f 1f       	adc	r25, r31
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e1 57       	subi	r30, 0x71	; 113
    1f50:	f4 4f       	sbci	r31, 0xF4	; 244
    1f52:	01 80       	ldd	r0, Z+1	; 0x01
    1f54:	f2 81       	ldd	r31, Z+2	; 0x02
    1f56:	e0 2d       	mov	r30, r0
    1f58:	86 81       	ldd	r24, Z+6	; 0x06
    1f5a:	97 81       	ldd	r25, Z+7	; 0x07
    1f5c:	90 93 b4 0b 	sts	0x0BB4, r25	; 0x800bb4 <pxCurrentTCB+0x1>
    1f60:	80 93 b3 0b 	sts	0x0BB3, r24	; 0x800bb3 <pxCurrentTCB>
    1f64:	08 95       	ret

00001f66 <__divsf3>:
    1f66:	0c d0       	rcall	.+24     	; 0x1f80 <__divsf3x>
    1f68:	ba c0       	rjmp	.+372    	; 0x20de <__fp_round>
    1f6a:	b2 d0       	rcall	.+356    	; 0x20d0 <__fp_pscB>
    1f6c:	40 f0       	brcs	.+16     	; 0x1f7e <__divsf3+0x18>
    1f6e:	a9 d0       	rcall	.+338    	; 0x20c2 <__fp_pscA>
    1f70:	30 f0       	brcs	.+12     	; 0x1f7e <__divsf3+0x18>
    1f72:	21 f4       	brne	.+8      	; 0x1f7c <__divsf3+0x16>
    1f74:	5f 3f       	cpi	r21, 0xFF	; 255
    1f76:	19 f0       	breq	.+6      	; 0x1f7e <__divsf3+0x18>
    1f78:	9b c0       	rjmp	.+310    	; 0x20b0 <__fp_inf>
    1f7a:	51 11       	cpse	r21, r1
    1f7c:	e4 c0       	rjmp	.+456    	; 0x2146 <__fp_szero>
    1f7e:	9e c0       	rjmp	.+316    	; 0x20bc <__fp_nan>

00001f80 <__divsf3x>:
    1f80:	bf d0       	rcall	.+382    	; 0x2100 <__fp_split3>
    1f82:	98 f3       	brcs	.-26     	; 0x1f6a <__divsf3+0x4>

00001f84 <__divsf3_pse>:
    1f84:	99 23       	and	r25, r25
    1f86:	c9 f3       	breq	.-14     	; 0x1f7a <__divsf3+0x14>
    1f88:	55 23       	and	r21, r21
    1f8a:	b1 f3       	breq	.-20     	; 0x1f78 <__divsf3+0x12>
    1f8c:	95 1b       	sub	r25, r21
    1f8e:	55 0b       	sbc	r21, r21
    1f90:	bb 27       	eor	r27, r27
    1f92:	aa 27       	eor	r26, r26
    1f94:	62 17       	cp	r22, r18
    1f96:	73 07       	cpc	r23, r19
    1f98:	84 07       	cpc	r24, r20
    1f9a:	38 f0       	brcs	.+14     	; 0x1faa <__divsf3_pse+0x26>
    1f9c:	9f 5f       	subi	r25, 0xFF	; 255
    1f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa0:	22 0f       	add	r18, r18
    1fa2:	33 1f       	adc	r19, r19
    1fa4:	44 1f       	adc	r20, r20
    1fa6:	aa 1f       	adc	r26, r26
    1fa8:	a9 f3       	breq	.-22     	; 0x1f94 <__divsf3_pse+0x10>
    1faa:	33 d0       	rcall	.+102    	; 0x2012 <__divsf3_pse+0x8e>
    1fac:	0e 2e       	mov	r0, r30
    1fae:	3a f0       	brmi	.+14     	; 0x1fbe <__divsf3_pse+0x3a>
    1fb0:	e0 e8       	ldi	r30, 0x80	; 128
    1fb2:	30 d0       	rcall	.+96     	; 0x2014 <__divsf3_pse+0x90>
    1fb4:	91 50       	subi	r25, 0x01	; 1
    1fb6:	50 40       	sbci	r21, 0x00	; 0
    1fb8:	e6 95       	lsr	r30
    1fba:	00 1c       	adc	r0, r0
    1fbc:	ca f7       	brpl	.-14     	; 0x1fb0 <__divsf3_pse+0x2c>
    1fbe:	29 d0       	rcall	.+82     	; 0x2012 <__divsf3_pse+0x8e>
    1fc0:	fe 2f       	mov	r31, r30
    1fc2:	27 d0       	rcall	.+78     	; 0x2012 <__divsf3_pse+0x8e>
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 1f       	adc	r24, r24
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	26 17       	cp	r18, r22
    1fce:	37 07       	cpc	r19, r23
    1fd0:	48 07       	cpc	r20, r24
    1fd2:	ab 07       	cpc	r26, r27
    1fd4:	b0 e8       	ldi	r27, 0x80	; 128
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <__divsf3_pse+0x56>
    1fd8:	bb 0b       	sbc	r27, r27
    1fda:	80 2d       	mov	r24, r0
    1fdc:	bf 01       	movw	r22, r30
    1fde:	ff 27       	eor	r31, r31
    1fe0:	93 58       	subi	r25, 0x83	; 131
    1fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe4:	2a f0       	brmi	.+10     	; 0x1ff0 <__divsf3_pse+0x6c>
    1fe6:	9e 3f       	cpi	r25, 0xFE	; 254
    1fe8:	51 05       	cpc	r21, r1
    1fea:	68 f0       	brcs	.+26     	; 0x2006 <__divsf3_pse+0x82>
    1fec:	61 c0       	rjmp	.+194    	; 0x20b0 <__fp_inf>
    1fee:	ab c0       	rjmp	.+342    	; 0x2146 <__fp_szero>
    1ff0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ff2:	ec f3       	brlt	.-6      	; 0x1fee <__divsf3_pse+0x6a>
    1ff4:	98 3e       	cpi	r25, 0xE8	; 232
    1ff6:	dc f3       	brlt	.-10     	; 0x1fee <__divsf3_pse+0x6a>
    1ff8:	86 95       	lsr	r24
    1ffa:	77 95       	ror	r23
    1ffc:	67 95       	ror	r22
    1ffe:	b7 95       	ror	r27
    2000:	f7 95       	ror	r31
    2002:	9f 5f       	subi	r25, 0xFF	; 255
    2004:	c9 f7       	brne	.-14     	; 0x1ff8 <__divsf3_pse+0x74>
    2006:	88 0f       	add	r24, r24
    2008:	91 1d       	adc	r25, r1
    200a:	96 95       	lsr	r25
    200c:	87 95       	ror	r24
    200e:	97 f9       	bld	r25, 7
    2010:	08 95       	ret
    2012:	e1 e0       	ldi	r30, 0x01	; 1
    2014:	66 0f       	add	r22, r22
    2016:	77 1f       	adc	r23, r23
    2018:	88 1f       	adc	r24, r24
    201a:	bb 1f       	adc	r27, r27
    201c:	62 17       	cp	r22, r18
    201e:	73 07       	cpc	r23, r19
    2020:	84 07       	cpc	r24, r20
    2022:	ba 07       	cpc	r27, r26
    2024:	20 f0       	brcs	.+8      	; 0x202e <__divsf3_pse+0xaa>
    2026:	62 1b       	sub	r22, r18
    2028:	73 0b       	sbc	r23, r19
    202a:	84 0b       	sbc	r24, r20
    202c:	ba 0b       	sbc	r27, r26
    202e:	ee 1f       	adc	r30, r30
    2030:	88 f7       	brcc	.-30     	; 0x2014 <__divsf3_pse+0x90>
    2032:	e0 95       	com	r30
    2034:	08 95       	ret

00002036 <__floatunsisf>:
    2036:	e8 94       	clt
    2038:	09 c0       	rjmp	.+18     	; 0x204c <__floatsisf+0x12>

0000203a <__floatsisf>:
    203a:	97 fb       	bst	r25, 7
    203c:	3e f4       	brtc	.+14     	; 0x204c <__floatsisf+0x12>
    203e:	90 95       	com	r25
    2040:	80 95       	com	r24
    2042:	70 95       	com	r23
    2044:	61 95       	neg	r22
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	8f 4f       	sbci	r24, 0xFF	; 255
    204a:	9f 4f       	sbci	r25, 0xFF	; 255
    204c:	99 23       	and	r25, r25
    204e:	a9 f0       	breq	.+42     	; 0x207a <__floatsisf+0x40>
    2050:	f9 2f       	mov	r31, r25
    2052:	96 e9       	ldi	r25, 0x96	; 150
    2054:	bb 27       	eor	r27, r27
    2056:	93 95       	inc	r25
    2058:	f6 95       	lsr	r31
    205a:	87 95       	ror	r24
    205c:	77 95       	ror	r23
    205e:	67 95       	ror	r22
    2060:	b7 95       	ror	r27
    2062:	f1 11       	cpse	r31, r1
    2064:	f8 cf       	rjmp	.-16     	; 0x2056 <__floatsisf+0x1c>
    2066:	fa f4       	brpl	.+62     	; 0x20a6 <__floatsisf+0x6c>
    2068:	bb 0f       	add	r27, r27
    206a:	11 f4       	brne	.+4      	; 0x2070 <__floatsisf+0x36>
    206c:	60 ff       	sbrs	r22, 0
    206e:	1b c0       	rjmp	.+54     	; 0x20a6 <__floatsisf+0x6c>
    2070:	6f 5f       	subi	r22, 0xFF	; 255
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	8f 4f       	sbci	r24, 0xFF	; 255
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	16 c0       	rjmp	.+44     	; 0x20a6 <__floatsisf+0x6c>
    207a:	88 23       	and	r24, r24
    207c:	11 f0       	breq	.+4      	; 0x2082 <__floatsisf+0x48>
    207e:	96 e9       	ldi	r25, 0x96	; 150
    2080:	11 c0       	rjmp	.+34     	; 0x20a4 <__floatsisf+0x6a>
    2082:	77 23       	and	r23, r23
    2084:	21 f0       	breq	.+8      	; 0x208e <__floatsisf+0x54>
    2086:	9e e8       	ldi	r25, 0x8E	; 142
    2088:	87 2f       	mov	r24, r23
    208a:	76 2f       	mov	r23, r22
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <__floatsisf+0x5e>
    208e:	66 23       	and	r22, r22
    2090:	71 f0       	breq	.+28     	; 0x20ae <__floatsisf+0x74>
    2092:	96 e8       	ldi	r25, 0x86	; 134
    2094:	86 2f       	mov	r24, r22
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	2a f0       	brmi	.+10     	; 0x20a6 <__floatsisf+0x6c>
    209c:	9a 95       	dec	r25
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	88 1f       	adc	r24, r24
    20a4:	da f7       	brpl	.-10     	; 0x209c <__floatsisf+0x62>
    20a6:	88 0f       	add	r24, r24
    20a8:	96 95       	lsr	r25
    20aa:	87 95       	ror	r24
    20ac:	97 f9       	bld	r25, 7
    20ae:	08 95       	ret

000020b0 <__fp_inf>:
    20b0:	97 f9       	bld	r25, 7
    20b2:	9f 67       	ori	r25, 0x7F	; 127
    20b4:	80 e8       	ldi	r24, 0x80	; 128
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	08 95       	ret

000020bc <__fp_nan>:
    20bc:	9f ef       	ldi	r25, 0xFF	; 255
    20be:	80 ec       	ldi	r24, 0xC0	; 192
    20c0:	08 95       	ret

000020c2 <__fp_pscA>:
    20c2:	00 24       	eor	r0, r0
    20c4:	0a 94       	dec	r0
    20c6:	16 16       	cp	r1, r22
    20c8:	17 06       	cpc	r1, r23
    20ca:	18 06       	cpc	r1, r24
    20cc:	09 06       	cpc	r0, r25
    20ce:	08 95       	ret

000020d0 <__fp_pscB>:
    20d0:	00 24       	eor	r0, r0
    20d2:	0a 94       	dec	r0
    20d4:	12 16       	cp	r1, r18
    20d6:	13 06       	cpc	r1, r19
    20d8:	14 06       	cpc	r1, r20
    20da:	05 06       	cpc	r0, r21
    20dc:	08 95       	ret

000020de <__fp_round>:
    20de:	09 2e       	mov	r0, r25
    20e0:	03 94       	inc	r0
    20e2:	00 0c       	add	r0, r0
    20e4:	11 f4       	brne	.+4      	; 0x20ea <__fp_round+0xc>
    20e6:	88 23       	and	r24, r24
    20e8:	52 f0       	brmi	.+20     	; 0x20fe <__fp_round+0x20>
    20ea:	bb 0f       	add	r27, r27
    20ec:	40 f4       	brcc	.+16     	; 0x20fe <__fp_round+0x20>
    20ee:	bf 2b       	or	r27, r31
    20f0:	11 f4       	brne	.+4      	; 0x20f6 <__fp_round+0x18>
    20f2:	60 ff       	sbrs	r22, 0
    20f4:	04 c0       	rjmp	.+8      	; 0x20fe <__fp_round+0x20>
    20f6:	6f 5f       	subi	r22, 0xFF	; 255
    20f8:	7f 4f       	sbci	r23, 0xFF	; 255
    20fa:	8f 4f       	sbci	r24, 0xFF	; 255
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	08 95       	ret

00002100 <__fp_split3>:
    2100:	57 fd       	sbrc	r21, 7
    2102:	90 58       	subi	r25, 0x80	; 128
    2104:	44 0f       	add	r20, r20
    2106:	55 1f       	adc	r21, r21
    2108:	59 f0       	breq	.+22     	; 0x2120 <__fp_splitA+0x10>
    210a:	5f 3f       	cpi	r21, 0xFF	; 255
    210c:	71 f0       	breq	.+28     	; 0x212a <__fp_splitA+0x1a>
    210e:	47 95       	ror	r20

00002110 <__fp_splitA>:
    2110:	88 0f       	add	r24, r24
    2112:	97 fb       	bst	r25, 7
    2114:	99 1f       	adc	r25, r25
    2116:	61 f0       	breq	.+24     	; 0x2130 <__fp_splitA+0x20>
    2118:	9f 3f       	cpi	r25, 0xFF	; 255
    211a:	79 f0       	breq	.+30     	; 0x213a <__fp_splitA+0x2a>
    211c:	87 95       	ror	r24
    211e:	08 95       	ret
    2120:	12 16       	cp	r1, r18
    2122:	13 06       	cpc	r1, r19
    2124:	14 06       	cpc	r1, r20
    2126:	55 1f       	adc	r21, r21
    2128:	f2 cf       	rjmp	.-28     	; 0x210e <__fp_split3+0xe>
    212a:	46 95       	lsr	r20
    212c:	f1 df       	rcall	.-30     	; 0x2110 <__fp_splitA>
    212e:	08 c0       	rjmp	.+16     	; 0x2140 <__fp_splitA+0x30>
    2130:	16 16       	cp	r1, r22
    2132:	17 06       	cpc	r1, r23
    2134:	18 06       	cpc	r1, r24
    2136:	99 1f       	adc	r25, r25
    2138:	f1 cf       	rjmp	.-30     	; 0x211c <__fp_splitA+0xc>
    213a:	86 95       	lsr	r24
    213c:	71 05       	cpc	r23, r1
    213e:	61 05       	cpc	r22, r1
    2140:	08 94       	sec
    2142:	08 95       	ret

00002144 <__fp_zero>:
    2144:	e8 94       	clt

00002146 <__fp_szero>:
    2146:	bb 27       	eor	r27, r27
    2148:	66 27       	eor	r22, r22
    214a:	77 27       	eor	r23, r23
    214c:	cb 01       	movw	r24, r22
    214e:	97 f9       	bld	r25, 7
    2150:	08 95       	ret

00002152 <__gesf2>:
    2152:	66 d0       	rcall	.+204    	; 0x2220 <__fp_cmp>
    2154:	08 f4       	brcc	.+2      	; 0x2158 <__gesf2+0x6>
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	08 95       	ret

0000215a <__mulsf3>:
    215a:	0b d0       	rcall	.+22     	; 0x2172 <__mulsf3x>
    215c:	c0 cf       	rjmp	.-128    	; 0x20de <__fp_round>
    215e:	b1 df       	rcall	.-158    	; 0x20c2 <__fp_pscA>
    2160:	28 f0       	brcs	.+10     	; 0x216c <__mulsf3+0x12>
    2162:	b6 df       	rcall	.-148    	; 0x20d0 <__fp_pscB>
    2164:	18 f0       	brcs	.+6      	; 0x216c <__mulsf3+0x12>
    2166:	95 23       	and	r25, r21
    2168:	09 f0       	breq	.+2      	; 0x216c <__mulsf3+0x12>
    216a:	a2 cf       	rjmp	.-188    	; 0x20b0 <__fp_inf>
    216c:	a7 cf       	rjmp	.-178    	; 0x20bc <__fp_nan>
    216e:	11 24       	eor	r1, r1
    2170:	ea cf       	rjmp	.-44     	; 0x2146 <__fp_szero>

00002172 <__mulsf3x>:
    2172:	c6 df       	rcall	.-116    	; 0x2100 <__fp_split3>
    2174:	a0 f3       	brcs	.-24     	; 0x215e <__mulsf3+0x4>

00002176 <__mulsf3_pse>:
    2176:	95 9f       	mul	r25, r21
    2178:	d1 f3       	breq	.-12     	; 0x216e <__mulsf3+0x14>
    217a:	95 0f       	add	r25, r21
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	55 1f       	adc	r21, r21
    2180:	62 9f       	mul	r22, r18
    2182:	f0 01       	movw	r30, r0
    2184:	72 9f       	mul	r23, r18
    2186:	bb 27       	eor	r27, r27
    2188:	f0 0d       	add	r31, r0
    218a:	b1 1d       	adc	r27, r1
    218c:	63 9f       	mul	r22, r19
    218e:	aa 27       	eor	r26, r26
    2190:	f0 0d       	add	r31, r0
    2192:	b1 1d       	adc	r27, r1
    2194:	aa 1f       	adc	r26, r26
    2196:	64 9f       	mul	r22, r20
    2198:	66 27       	eor	r22, r22
    219a:	b0 0d       	add	r27, r0
    219c:	a1 1d       	adc	r26, r1
    219e:	66 1f       	adc	r22, r22
    21a0:	82 9f       	mul	r24, r18
    21a2:	22 27       	eor	r18, r18
    21a4:	b0 0d       	add	r27, r0
    21a6:	a1 1d       	adc	r26, r1
    21a8:	62 1f       	adc	r22, r18
    21aa:	73 9f       	mul	r23, r19
    21ac:	b0 0d       	add	r27, r0
    21ae:	a1 1d       	adc	r26, r1
    21b0:	62 1f       	adc	r22, r18
    21b2:	83 9f       	mul	r24, r19
    21b4:	a0 0d       	add	r26, r0
    21b6:	61 1d       	adc	r22, r1
    21b8:	22 1f       	adc	r18, r18
    21ba:	74 9f       	mul	r23, r20
    21bc:	33 27       	eor	r19, r19
    21be:	a0 0d       	add	r26, r0
    21c0:	61 1d       	adc	r22, r1
    21c2:	23 1f       	adc	r18, r19
    21c4:	84 9f       	mul	r24, r20
    21c6:	60 0d       	add	r22, r0
    21c8:	21 1d       	adc	r18, r1
    21ca:	82 2f       	mov	r24, r18
    21cc:	76 2f       	mov	r23, r22
    21ce:	6a 2f       	mov	r22, r26
    21d0:	11 24       	eor	r1, r1
    21d2:	9f 57       	subi	r25, 0x7F	; 127
    21d4:	50 40       	sbci	r21, 0x00	; 0
    21d6:	8a f0       	brmi	.+34     	; 0x21fa <__mulsf3_pse+0x84>
    21d8:	e1 f0       	breq	.+56     	; 0x2212 <__mulsf3_pse+0x9c>
    21da:	88 23       	and	r24, r24
    21dc:	4a f0       	brmi	.+18     	; 0x21f0 <__mulsf3_pse+0x7a>
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	bb 1f       	adc	r27, r27
    21e4:	66 1f       	adc	r22, r22
    21e6:	77 1f       	adc	r23, r23
    21e8:	88 1f       	adc	r24, r24
    21ea:	91 50       	subi	r25, 0x01	; 1
    21ec:	50 40       	sbci	r21, 0x00	; 0
    21ee:	a9 f7       	brne	.-22     	; 0x21da <__mulsf3_pse+0x64>
    21f0:	9e 3f       	cpi	r25, 0xFE	; 254
    21f2:	51 05       	cpc	r21, r1
    21f4:	70 f0       	brcs	.+28     	; 0x2212 <__mulsf3_pse+0x9c>
    21f6:	5c cf       	rjmp	.-328    	; 0x20b0 <__fp_inf>
    21f8:	a6 cf       	rjmp	.-180    	; 0x2146 <__fp_szero>
    21fa:	5f 3f       	cpi	r21, 0xFF	; 255
    21fc:	ec f3       	brlt	.-6      	; 0x21f8 <__mulsf3_pse+0x82>
    21fe:	98 3e       	cpi	r25, 0xE8	; 232
    2200:	dc f3       	brlt	.-10     	; 0x21f8 <__mulsf3_pse+0x82>
    2202:	86 95       	lsr	r24
    2204:	77 95       	ror	r23
    2206:	67 95       	ror	r22
    2208:	b7 95       	ror	r27
    220a:	f7 95       	ror	r31
    220c:	e7 95       	ror	r30
    220e:	9f 5f       	subi	r25, 0xFF	; 255
    2210:	c1 f7       	brne	.-16     	; 0x2202 <__mulsf3_pse+0x8c>
    2212:	fe 2b       	or	r31, r30
    2214:	88 0f       	add	r24, r24
    2216:	91 1d       	adc	r25, r1
    2218:	96 95       	lsr	r25
    221a:	87 95       	ror	r24
    221c:	97 f9       	bld	r25, 7
    221e:	08 95       	ret

00002220 <__fp_cmp>:
    2220:	99 0f       	add	r25, r25
    2222:	00 08       	sbc	r0, r0
    2224:	55 0f       	add	r21, r21
    2226:	aa 0b       	sbc	r26, r26
    2228:	e0 e8       	ldi	r30, 0x80	; 128
    222a:	fe ef       	ldi	r31, 0xFE	; 254
    222c:	16 16       	cp	r1, r22
    222e:	17 06       	cpc	r1, r23
    2230:	e8 07       	cpc	r30, r24
    2232:	f9 07       	cpc	r31, r25
    2234:	c0 f0       	brcs	.+48     	; 0x2266 <__fp_cmp+0x46>
    2236:	12 16       	cp	r1, r18
    2238:	13 06       	cpc	r1, r19
    223a:	e4 07       	cpc	r30, r20
    223c:	f5 07       	cpc	r31, r21
    223e:	98 f0       	brcs	.+38     	; 0x2266 <__fp_cmp+0x46>
    2240:	62 1b       	sub	r22, r18
    2242:	73 0b       	sbc	r23, r19
    2244:	84 0b       	sbc	r24, r20
    2246:	95 0b       	sbc	r25, r21
    2248:	39 f4       	brne	.+14     	; 0x2258 <__fp_cmp+0x38>
    224a:	0a 26       	eor	r0, r26
    224c:	61 f0       	breq	.+24     	; 0x2266 <__fp_cmp+0x46>
    224e:	23 2b       	or	r18, r19
    2250:	24 2b       	or	r18, r20
    2252:	25 2b       	or	r18, r21
    2254:	21 f4       	brne	.+8      	; 0x225e <__fp_cmp+0x3e>
    2256:	08 95       	ret
    2258:	0a 26       	eor	r0, r26
    225a:	09 f4       	brne	.+2      	; 0x225e <__fp_cmp+0x3e>
    225c:	a1 40       	sbci	r26, 0x01	; 1
    225e:	a6 95       	lsr	r26
    2260:	8f ef       	ldi	r24, 0xFF	; 255
    2262:	81 1d       	adc	r24, r1
    2264:	81 1d       	adc	r24, r1
    2266:	08 95       	ret

00002268 <__udivmodqi4>:
    2268:	99 1b       	sub	r25, r25
    226a:	79 e0       	ldi	r23, 0x09	; 9
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <__udivmodqi4_ep>

0000226e <__udivmodqi4_loop>:
    226e:	99 1f       	adc	r25, r25
    2270:	96 17       	cp	r25, r22
    2272:	08 f0       	brcs	.+2      	; 0x2276 <__udivmodqi4_ep>
    2274:	96 1b       	sub	r25, r22

00002276 <__udivmodqi4_ep>:
    2276:	88 1f       	adc	r24, r24
    2278:	7a 95       	dec	r23
    227a:	c9 f7       	brne	.-14     	; 0x226e <__udivmodqi4_loop>
    227c:	80 95       	com	r24
    227e:	08 95       	ret

00002280 <__tablejump2__>:
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	00 24       	eor	r0, r0
    2286:	00 1c       	adc	r0, r0
    2288:	0b be       	out	0x3b, r0	; 59
    228a:	07 90       	elpm	r0, Z+
    228c:	f6 91       	elpm	r31, Z
    228e:	e0 2d       	mov	r30, r0
    2290:	09 94       	ijmp

00002292 <memset>:
    2292:	dc 01       	movw	r26, r24
    2294:	01 c0       	rjmp	.+2      	; 0x2298 <memset+0x6>
    2296:	6d 93       	st	X+, r22
    2298:	41 50       	subi	r20, 0x01	; 1
    229a:	50 40       	sbci	r21, 0x00	; 0
    229c:	e0 f7       	brcc	.-8      	; 0x2296 <memset+0x4>
    229e:	08 95       	ret

000022a0 <strncpy>:
    22a0:	fb 01       	movw	r30, r22
    22a2:	dc 01       	movw	r26, r24
    22a4:	41 50       	subi	r20, 0x01	; 1
    22a6:	50 40       	sbci	r21, 0x00	; 0
    22a8:	48 f0       	brcs	.+18     	; 0x22bc <strncpy+0x1c>
    22aa:	01 90       	ld	r0, Z+
    22ac:	0d 92       	st	X+, r0
    22ae:	00 20       	and	r0, r0
    22b0:	c9 f7       	brne	.-14     	; 0x22a4 <strncpy+0x4>
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <strncpy+0x16>
    22b4:	1d 92       	st	X+, r1
    22b6:	41 50       	subi	r20, 0x01	; 1
    22b8:	50 40       	sbci	r21, 0x00	; 0
    22ba:	e0 f7       	brcc	.-8      	; 0x22b4 <strncpy+0x14>
    22bc:	08 95       	ret

000022be <_exit>:
    22be:	f8 94       	cli

000022c0 <__stop_program>:
    22c0:	ff cf       	rjmp	.-2      	; 0x22c0 <__stop_program>
