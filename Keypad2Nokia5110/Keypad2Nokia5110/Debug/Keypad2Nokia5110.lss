
Keypad2Nokia5110.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000b1e  00000bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000203  00800114  00800114  00000bc6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ad  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae9  00000000  00000000  0000209d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5e  00000000  00000000  00002b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000035e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000654  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000961  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000047c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
   2:	00 00       	nop
   4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c1       	rjmp	.+636    	; 0x2a6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
  72:	00 00       	nop
  74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
  76:	00 00       	nop
  78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
  82:	00 00       	nop
  84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
  86:	00 00       	nop
  88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
	...

0000008c <CHARSET>:
  8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  9c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ac:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  bc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  cc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  dc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  ec:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  fc:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 10c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 11c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 12c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 13c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 14c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 15c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 16c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 17c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 18c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 19c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ac:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1bc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1cc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1dc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1ec:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1fc:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 20c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 21c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 22c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 24c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 25c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000026c <__ctors_end>:
 26c:	11 24       	eor	r1, r1
 26e:	1f be       	out	0x3f, r1	; 63
 270:	cf ef       	ldi	r28, 0xFF	; 255
 272:	d0 e4       	ldi	r29, 0x40	; 64
 274:	de bf       	out	0x3e, r29	; 62
 276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
 278:	11 e0       	ldi	r17, 0x01	; 1
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	ee e1       	ldi	r30, 0x1E	; 30
 280:	fb e0       	ldi	r31, 0x0B	; 11
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	0b bf       	out	0x3b, r16	; 59
 286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
 288:	07 90       	elpm	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	a4 31       	cpi	r26, 0x14	; 20
 28e:	b1 07       	cpc	r27, r17
 290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
 292:	23 e0       	ldi	r18, 0x03	; 3
 294:	a4 e1       	ldi	r26, 0x14	; 20
 296:	b1 e0       	ldi	r27, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
 29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
 29c:	a7 31       	cpi	r26, 0x17	; 23
 29e:	b2 07       	cpc	r27, r18
 2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
 2a2:	fd d1       	rcall	.+1018   	; 0x69e <main>
 2a4:	3a c4       	rjmp	.+2164   	; 0xb1a <_exit>

000002a6 <__bad_interrupt>:
 2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <GetKeypadKey>:

void outputchar(unsigned char c){
	nokia_lcd_clear();
	nokia_lcd_write_char(c,1);
	nokia_lcd_render();
}
 2a8:	8e ef       	ldi	r24, 0xFE	; 254
 2aa:	88 b9       	out	0x08, r24	; 8
 2ac:	00 00       	nop
 2ae:	86 b1       	in	r24, 0x06	; 6
 2b0:	80 95       	com	r24
 2b2:	84 fd       	sbrc	r24, 4
 2b4:	46 c0       	rjmp	.+140    	; 0x342 <GetKeypadKey+0x9a>
 2b6:	86 b1       	in	r24, 0x06	; 6
 2b8:	80 95       	com	r24
 2ba:	85 fd       	sbrc	r24, 5
 2bc:	44 c0       	rjmp	.+136    	; 0x346 <GetKeypadKey+0x9e>
 2be:	86 b1       	in	r24, 0x06	; 6
 2c0:	80 95       	com	r24
 2c2:	86 fd       	sbrc	r24, 6
 2c4:	42 c0       	rjmp	.+132    	; 0x34a <GetKeypadKey+0xa2>
 2c6:	86 b1       	in	r24, 0x06	; 6
 2c8:	80 95       	com	r24
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	88 0f       	add	r24, r24
 2ce:	89 2f       	mov	r24, r25
 2d0:	88 1f       	adc	r24, r24
 2d2:	99 0b       	sbc	r25, r25
 2d4:	91 95       	neg	r25
 2d6:	89 2b       	or	r24, r25
 2d8:	d1 f5       	brne	.+116    	; 0x34e <GetKeypadKey+0xa6>
 2da:	8d ef       	ldi	r24, 0xFD	; 253
 2dc:	88 b9       	out	0x08, r24	; 8
 2de:	00 00       	nop
 2e0:	86 b1       	in	r24, 0x06	; 6
 2e2:	80 95       	com	r24
 2e4:	84 fd       	sbrc	r24, 4
 2e6:	35 c0       	rjmp	.+106    	; 0x352 <GetKeypadKey+0xaa>
 2e8:	86 b1       	in	r24, 0x06	; 6
 2ea:	80 95       	com	r24
 2ec:	85 fd       	sbrc	r24, 5
 2ee:	33 c0       	rjmp	.+102    	; 0x356 <GetKeypadKey+0xae>
 2f0:	86 b1       	in	r24, 0x06	; 6
 2f2:	80 95       	com	r24
 2f4:	86 fd       	sbrc	r24, 6
 2f6:	31 c0       	rjmp	.+98     	; 0x35a <GetKeypadKey+0xb2>
 2f8:	86 b1       	in	r24, 0x06	; 6
 2fa:	80 95       	com	r24
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	88 0f       	add	r24, r24
 300:	89 2f       	mov	r24, r25
 302:	88 1f       	adc	r24, r24
 304:	99 0b       	sbc	r25, r25
 306:	91 95       	neg	r25
 308:	89 2b       	or	r24, r25
 30a:	49 f5       	brne	.+82     	; 0x35e <GetKeypadKey+0xb6>
 30c:	8b ef       	ldi	r24, 0xFB	; 251
 30e:	88 b9       	out	0x08, r24	; 8
 310:	00 00       	nop
 312:	86 b1       	in	r24, 0x06	; 6
 314:	80 95       	com	r24
 316:	84 fd       	sbrc	r24, 4
 318:	24 c0       	rjmp	.+72     	; 0x362 <GetKeypadKey+0xba>
 31a:	86 b1       	in	r24, 0x06	; 6
 31c:	80 95       	com	r24
 31e:	85 fd       	sbrc	r24, 5
 320:	22 c0       	rjmp	.+68     	; 0x366 <GetKeypadKey+0xbe>
 322:	86 b1       	in	r24, 0x06	; 6
 324:	80 95       	com	r24
 326:	86 fd       	sbrc	r24, 6
 328:	20 c0       	rjmp	.+64     	; 0x36a <GetKeypadKey+0xc2>
 32a:	86 b1       	in	r24, 0x06	; 6
 32c:	80 95       	com	r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	88 0f       	add	r24, r24
 332:	89 2f       	mov	r24, r25
 334:	88 1f       	adc	r24, r24
 336:	99 0b       	sbc	r25, r25
 338:	91 95       	neg	r25
 33a:	89 2b       	or	r24, r25
 33c:	c1 f4       	brne	.+48     	; 0x36e <GetKeypadKey+0xc6>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	81 e3       	ldi	r24, 0x31	; 49
 344:	08 95       	ret
 346:	84 e3       	ldi	r24, 0x34	; 52
 348:	08 95       	ret
 34a:	87 e3       	ldi	r24, 0x37	; 55
 34c:	08 95       	ret
 34e:	8a e2       	ldi	r24, 0x2A	; 42
 350:	08 95       	ret
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	08 95       	ret
 356:	85 e3       	ldi	r24, 0x35	; 53
 358:	08 95       	ret
 35a:	88 e3       	ldi	r24, 0x38	; 56
 35c:	08 95       	ret
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	08 95       	ret
 362:	83 e3       	ldi	r24, 0x33	; 51
 364:	08 95       	ret
 366:	86 e3       	ldi	r24, 0x36	; 54
 368:	08 95       	ret
 36a:	89 e3       	ldi	r24, 0x39	; 57
 36c:	08 95       	ret
 36e:	83 e2       	ldi	r24, 0x23	; 35
 370:	08 95       	ret

00000372 <outputstring>:

void outputstring(const char* str){
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	ec 01       	movw	r28, r24
	nokia_lcd_clear();
 378:	8e d2       	rcall	.+1308   	; 0x896 <nokia_lcd_clear>
	nokia_lcd_set_cursor(0,10);
 37a:	6a e0       	ldi	r22, 0x0A	; 10
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	83 d3       	rcall	.+1798   	; 0xa86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(str,1);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	ce 01       	movw	r24, r28
	nokia_lcd_render();
 384:	6e d3       	rcall	.+1756   	; 0xa62 <nokia_lcd_write_string>
 386:	84 d3       	rcall	.+1800   	; 0xa90 <nokia_lcd_render>
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <AlphaNumPad>:

unsigned char AlphaNumPad(){
 38e:	4f 92       	push	r4
 390:	5f 92       	push	r5
 392:	6f 92       	push	r6
 394:	7f 92       	push	r7
 396:	8f 92       	push	r8
 398:	9f 92       	push	r9
 39a:	af 92       	push	r10
 39c:	bf 92       	push	r11
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	e0 97       	sbiw	r28, 0x30	; 48
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
	unsigned char one[4] = {'1','1','1','1'};
 3bc:	81 e3       	ldi	r24, 0x31	; 49
 3be:	89 83       	std	Y+1, r24	; 0x01
 3c0:	8a 83       	std	Y+2, r24	; 0x02
 3c2:	8b 83       	std	Y+3, r24	; 0x03
 3c4:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char two[4] = {'2','A','B','C'};
 3c6:	82 e3       	ldi	r24, 0x32	; 50
 3c8:	8d 83       	std	Y+5, r24	; 0x05
 3ca:	81 e4       	ldi	r24, 0x41	; 65
 3cc:	8e 83       	std	Y+6, r24	; 0x06
 3ce:	82 e4       	ldi	r24, 0x42	; 66
 3d0:	8f 83       	std	Y+7, r24	; 0x07
 3d2:	83 e4       	ldi	r24, 0x43	; 67
 3d4:	88 87       	std	Y+8, r24	; 0x08
	unsigned char three[4] = {'3','D','E','F'};
 3d6:	83 e3       	ldi	r24, 0x33	; 51
 3d8:	89 87       	std	Y+9, r24	; 0x09
 3da:	84 e4       	ldi	r24, 0x44	; 68
 3dc:	8a 87       	std	Y+10, r24	; 0x0a
 3de:	85 e4       	ldi	r24, 0x45	; 69
 3e0:	8b 87       	std	Y+11, r24	; 0x0b
 3e2:	86 e4       	ldi	r24, 0x46	; 70
 3e4:	8c 87       	std	Y+12, r24	; 0x0c
	unsigned char four[4] = {'4','G','H','I'};
 3e6:	84 e3       	ldi	r24, 0x34	; 52
 3e8:	8d 87       	std	Y+13, r24	; 0x0d
 3ea:	87 e4       	ldi	r24, 0x47	; 71
 3ec:	8e 87       	std	Y+14, r24	; 0x0e
 3ee:	88 e4       	ldi	r24, 0x48	; 72
 3f0:	8f 87       	std	Y+15, r24	; 0x0f
 3f2:	89 e4       	ldi	r24, 0x49	; 73
 3f4:	88 8b       	std	Y+16, r24	; 0x10
	unsigned char five[4] = {'5','J','K','L'};
 3f6:	85 e3       	ldi	r24, 0x35	; 53
 3f8:	89 8b       	std	Y+17, r24	; 0x11
 3fa:	8a e4       	ldi	r24, 0x4A	; 74
 3fc:	8a 8b       	std	Y+18, r24	; 0x12
 3fe:	8b e4       	ldi	r24, 0x4B	; 75
 400:	8b 8b       	std	Y+19, r24	; 0x13
 402:	8c e4       	ldi	r24, 0x4C	; 76
 404:	8c 8b       	std	Y+20, r24	; 0x14
	unsigned char six[4] = {'6','M','N','O'};
 406:	86 e3       	ldi	r24, 0x36	; 54
 408:	8d 8b       	std	Y+21, r24	; 0x15
 40a:	8d e4       	ldi	r24, 0x4D	; 77
 40c:	8e 8b       	std	Y+22, r24	; 0x16
 40e:	8e e4       	ldi	r24, 0x4E	; 78
 410:	8f 8b       	std	Y+23, r24	; 0x17
 412:	8f e4       	ldi	r24, 0x4F	; 79
 414:	88 8f       	std	Y+24, r24	; 0x18
	unsigned char seven[4] = {'7','P','R','S'};
 416:	87 e3       	ldi	r24, 0x37	; 55
 418:	89 8f       	std	Y+25, r24	; 0x19
 41a:	80 e5       	ldi	r24, 0x50	; 80
 41c:	8a 8f       	std	Y+26, r24	; 0x1a
 41e:	82 e5       	ldi	r24, 0x52	; 82
 420:	8b 8f       	std	Y+27, r24	; 0x1b
 422:	83 e5       	ldi	r24, 0x53	; 83
 424:	8c 8f       	std	Y+28, r24	; 0x1c
	unsigned char eight[4] = {'8','T','U','V'};
 426:	88 e3       	ldi	r24, 0x38	; 56
 428:	8d 8f       	std	Y+29, r24	; 0x1d
 42a:	84 e5       	ldi	r24, 0x54	; 84
 42c:	8e 8f       	std	Y+30, r24	; 0x1e
 42e:	85 e5       	ldi	r24, 0x55	; 85
 430:	8f 8f       	std	Y+31, r24	; 0x1f
 432:	86 e5       	ldi	r24, 0x56	; 86
 434:	88 a3       	std	Y+32, r24	; 0x20
	unsigned char nine[4] = {'9','W','X','Y'};
 436:	89 e3       	ldi	r24, 0x39	; 57
 438:	89 a3       	std	Y+33, r24	; 0x21
 43a:	87 e5       	ldi	r24, 0x57	; 87
 43c:	8a a3       	std	Y+34, r24	; 0x22
 43e:	88 e5       	ldi	r24, 0x58	; 88
 440:	8b a3       	std	Y+35, r24	; 0x23
 442:	89 e5       	ldi	r24, 0x59	; 89
 444:	8c a3       	std	Y+36, r24	; 0x24
	unsigned char zero[4] = {'0','0','0','0'};
 446:	80 e3       	ldi	r24, 0x30	; 48
 448:	8d a3       	std	Y+37, r24	; 0x25
 44a:	8e a3       	std	Y+38, r24	; 0x26
 44c:	8f a3       	std	Y+39, r24	; 0x27
 44e:	88 a7       	std	Y+40, r24	; 0x28
	unsigned char star[4] = {'*','*','*','*'};
 450:	8a e2       	ldi	r24, 0x2A	; 42
 452:	89 a7       	std	Y+41, r24	; 0x29
 454:	8a a7       	std	Y+42, r24	; 0x2a
 456:	8b a7       	std	Y+43, r24	; 0x2b
 458:	8c a7       	std	Y+44, r24	; 0x2c
	unsigned char pound[4] = {'#','#','#','#'};
 45a:	83 e2       	ldi	r24, 0x23	; 35
 45c:	8d a7       	std	Y+45, r24	; 0x2d
 45e:	8e a7       	std	Y+46, r24	; 0x2e
 460:	8f a7       	std	Y+47, r24	; 0x2f
 462:	88 ab       	std	Y+48, r24	; 0x30
		}
		
		else{
			temp_timer = timer;
			hundreds = temp_timer / 100;
			temp_timer = temp_timer % 100;
 464:	0f 2e       	mov	r0, r31
 466:	f4 e6       	ldi	r31, 0x64	; 100
 468:	8f 2e       	mov	r8, r31
 46a:	91 2c       	mov	r9, r1
 46c:	a1 2c       	mov	r10, r1
 46e:	b1 2c       	mov	r11, r1
 470:	f0 2d       	mov	r31, r0
			temp_timer = temp_timer % 10;
			ones = temp_timer;
			nokia_lcd_set_cursor(0,30);
			nokia_lcd_write_char(hundreds + '0',1);
			nokia_lcd_set_cursor(8,30);
			nokia_lcd_write_char(tens + '0',1);
 472:	0f 2e       	mov	r0, r31
 474:	fa e0       	ldi	r31, 0x0A	; 10
 476:	cf 2e       	mov	r12, r31
 478:	d1 2c       	mov	r13, r1
 47a:	e1 2c       	mov	r14, r1
 47c:	f1 2c       	mov	r15, r1
 47e:	f0 2d       	mov	r31, r0
	unsigned char hundreds = 0;
	unsigned char tens = 0;
	unsigned char ones = 0;
	unsigned long temp_timer;
		
	while((pushed_key = GetKeypadKey()) == '\0'){
 480:	4b c0       	rjmp	.+150    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		if(timer == 40){
 482:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 486:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x1>
 48a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 48e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 492:	68 32       	cpi	r22, 0x28	; 40
 494:	71 05       	cpc	r23, r1
 496:	81 05       	cpc	r24, r1
 498:	91 05       	cpc	r25, r1
 49a:	49 f4       	brne	.+18     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
			timer = 0;
 49c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 4a0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 4a4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end+0x2>
 4a8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x3>
			return '\0';
 4ac:	e1 c0       	rjmp	.+450    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
		}
		
		else{
			temp_timer = timer;
			hundreds = temp_timer / 100;
			temp_timer = temp_timer % 100;
 4ae:	a5 01       	movw	r20, r10
 4b0:	94 01       	movw	r18, r8
 4b2:	11 d3       	rcall	.+1570   	; 0xad6 <__udivmodsi4>
 4b4:	12 2f       	mov	r17, r18
 4b6:	2b 01       	movw	r4, r22
 4b8:	3c 01       	movw	r6, r24
			tens = temp_timer / 10;
			temp_timer = temp_timer % 10;
			ones = temp_timer;
			nokia_lcd_set_cursor(0,30);
 4ba:	6e e1       	ldi	r22, 0x1E	; 30
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	e3 d2       	rcall	.+1478   	; 0xa86 <nokia_lcd_set_cursor>
			nokia_lcd_write_char(hundreds + '0',1);
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	80 e3       	ldi	r24, 0x30	; 48
 4c4:	81 0f       	add	r24, r17
 4c6:	23 d2       	rcall	.+1094   	; 0x90e <nokia_lcd_write_char>
			nokia_lcd_set_cursor(8,30);
 4c8:	6e e1       	ldi	r22, 0x1E	; 30
 4ca:	88 e0       	ldi	r24, 0x08	; 8
 4cc:	dc d2       	rcall	.+1464   	; 0xa86 <nokia_lcd_set_cursor>
 4ce:	c3 01       	movw	r24, r6
			nokia_lcd_write_char(tens + '0',1);
 4d0:	b2 01       	movw	r22, r4
 4d2:	a7 01       	movw	r20, r14
 4d4:	96 01       	movw	r18, r12
 4d6:	ff d2       	rcall	.+1534   	; 0xad6 <__udivmodsi4>
 4d8:	16 2f       	mov	r17, r22
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	80 e3       	ldi	r24, 0x30	; 48
 4de:	82 0f       	add	r24, r18
 4e0:	16 d2       	rcall	.+1068   	; 0x90e <nokia_lcd_write_char>
			nokia_lcd_set_cursor(16,30);
 4e2:	6e e1       	ldi	r22, 0x1E	; 30
 4e4:	80 e1       	ldi	r24, 0x10	; 16
			nokia_lcd_write_char(ones + '0',1);
 4e6:	cf d2       	rcall	.+1438   	; 0xa86 <nokia_lcd_set_cursor>
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	80 e3       	ldi	r24, 0x30	; 48
 4ec:	81 0f       	add	r24, r17
 4ee:	0f d2       	rcall	.+1054   	; 0x90e <nokia_lcd_write_char>
			nokia_lcd_render();
 4f0:	cf d2       	rcall	.+1438   	; 0xa90 <nokia_lcd_render>
 4f2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
			++timer;
 4f6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 4fa:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 4fe:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	a1 1d       	adc	r26, r1
 506:	b1 1d       	adc	r27, r1
 508:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 50c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 510:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 514:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	unsigned char hundreds = 0;
	unsigned char tens = 0;
	unsigned char ones = 0;
	unsigned long temp_timer;
		
	while((pushed_key = GetKeypadKey()) == '\0'){
 518:	c7 de       	rcall	.-626    	; 0x2a8 <GetKeypadKey>
 51a:	28 2f       	mov	r18, r24
 51c:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <pushed_key>
 520:	88 23       	and	r24, r24
 522:	09 f4       	brne	.+2      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 524:	ae cf       	rjmp	.-164    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			nokia_lcd_render();
			++timer;
		}
	}
	
	while((tmp = GetKeypadKey()) == pushed_key){}
 526:	c0 de       	rcall	.-640    	; 0x2a8 <GetKeypadKey>
 528:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <tmp>
 52c:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <pushed_key>
 530:	89 17       	cp	r24, r25
 532:	c9 f3       	breq	.-14     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 534:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
	
	timer = 0;
 538:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 53c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end+0x2>
 540:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x3>
 544:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <previous_key>
	if(previous_key == pushed_key){
 548:	98 13       	cpse	r25, r24
 54a:	8a c0       	rjmp	.+276    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 54c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <num_times_key_pushed>
		if(num_times_key_pushed < 3){
 550:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 554:	23 30       	cpi	r18, 0x03	; 3
 556:	31 05       	cpc	r19, r1
 558:	38 f4       	brcc	.+14     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 55a:	2f 5f       	subi	r18, 0xFF	; 255
			num_times_key_pushed++;
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <num_times_key_pushed+0x1>
 562:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <num_times_key_pushed>
 566:	04 c0       	rjmp	.+8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 568:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <num_times_key_pushed+0x1>
		}
		
		else{
			num_times_key_pushed = 0;
 56c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <num_times_key_pushed>
 570:	81 33       	cpi	r24, 0x31	; 49
		}
		
		if(pushed_key == '1'){ return one[num_times_key_pushed]; }
 572:	41 f4       	brne	.+16     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 574:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 578:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 57c:	ec 0f       	add	r30, r28
 57e:	fd 1f       	adc	r31, r29
 580:	21 81       	ldd	r18, Z+1	; 0x01
 582:	76 c0       	rjmp	.+236    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 584:	82 33       	cpi	r24, 0x32	; 50
		else if(pushed_key == '2'){ return (two[num_times_key_pushed]); }
 586:	41 f4       	brne	.+16     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 588:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 58c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 590:	ec 0f       	add	r30, r28
 592:	fd 1f       	adc	r31, r29
 594:	25 81       	ldd	r18, Z+5	; 0x05
 596:	6c c0       	rjmp	.+216    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 598:	83 33       	cpi	r24, 0x33	; 51
		else if(pushed_key == '3'){ return (three[num_times_key_pushed]); }
 59a:	41 f4       	brne	.+16     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 59c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 5a0:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 5a4:	ec 0f       	add	r30, r28
 5a6:	fd 1f       	adc	r31, r29
 5a8:	21 85       	ldd	r18, Z+9	; 0x09
 5aa:	62 c0       	rjmp	.+196    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 5ac:	84 33       	cpi	r24, 0x34	; 52
		else if(pushed_key == '4'){ return (four[num_times_key_pushed]); }
 5ae:	41 f4       	brne	.+16     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5b0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 5b4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 5b8:	ec 0f       	add	r30, r28
 5ba:	fd 1f       	adc	r31, r29
 5bc:	25 85       	ldd	r18, Z+13	; 0x0d
 5be:	58 c0       	rjmp	.+176    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 5c0:	85 33       	cpi	r24, 0x35	; 53
		else if(pushed_key == '5'){ return (five[num_times_key_pushed]); }
 5c2:	41 f4       	brne	.+16     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5c4:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 5c8:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 5cc:	ec 0f       	add	r30, r28
 5ce:	fd 1f       	adc	r31, r29
 5d0:	21 89       	ldd	r18, Z+17	; 0x11
 5d2:	4e c0       	rjmp	.+156    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 5d4:	86 33       	cpi	r24, 0x36	; 54
		else if(pushed_key == '6'){ return (six[num_times_key_pushed]); }
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 5dc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 5e0:	ec 0f       	add	r30, r28
 5e2:	fd 1f       	adc	r31, r29
 5e4:	25 89       	ldd	r18, Z+21	; 0x15
 5e6:	44 c0       	rjmp	.+136    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 5e8:	87 33       	cpi	r24, 0x37	; 55
		else if(pushed_key == '7'){ return (seven[num_times_key_pushed]); }
 5ea:	41 f4       	brne	.+16     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5ec:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 5f0:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 5f4:	ec 0f       	add	r30, r28
 5f6:	fd 1f       	adc	r31, r29
 5f8:	21 8d       	ldd	r18, Z+25	; 0x19
 5fa:	3a c0       	rjmp	.+116    	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 5fc:	88 33       	cpi	r24, 0x38	; 56
		else if(pushed_key == '8'){ return (eight[num_times_key_pushed]); }
 5fe:	41 f4       	brne	.+16     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 600:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 604:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 608:	ec 0f       	add	r30, r28
 60a:	fd 1f       	adc	r31, r29
 60c:	25 8d       	ldd	r18, Z+29	; 0x1d
 60e:	30 c0       	rjmp	.+96     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 610:	89 33       	cpi	r24, 0x39	; 57
		else if(pushed_key == '9'){ return (nine[num_times_key_pushed]); }
 612:	41 f4       	brne	.+16     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 614:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 618:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 61c:	ec 0f       	add	r30, r28
 61e:	fd 1f       	adc	r31, r29
 620:	21 a1       	ldd	r18, Z+33	; 0x21
 622:	26 c0       	rjmp	.+76     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 624:	80 33       	cpi	r24, 0x30	; 48
		else if(pushed_key == '0'){return (zero[num_times_key_pushed]); }
 626:	41 f4       	brne	.+16     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 628:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 62c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 630:	ec 0f       	add	r30, r28
 632:	fd 1f       	adc	r31, r29
 634:	25 a1       	ldd	r18, Z+37	; 0x25
 636:	1c c0       	rjmp	.+56     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 638:	8a 32       	cpi	r24, 0x2A	; 42
		else if(pushed_key == '*'){return (star[num_times_key_pushed]); }
 63a:	41 f4       	brne	.+16     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 63c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 640:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 644:	ec 0f       	add	r30, r28
 646:	fd 1f       	adc	r31, r29
 648:	21 a5       	ldd	r18, Z+41	; 0x29
 64a:	12 c0       	rjmp	.+36     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 64c:	83 32       	cpi	r24, 0x23	; 35
		else if(pushed_key == '#'){return (pound[num_times_key_pushed]); }
 64e:	71 f4       	brne	.+28     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 650:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <num_times_key_pushed>
 654:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <num_times_key_pushed+0x1>
 658:	ec 0f       	add	r30, r28
 65a:	fd 1f       	adc	r31, r29
 65c:	25 a5       	ldd	r18, Z+45	; 0x2d
 65e:	08 c0       	rjmp	.+16     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 660:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <previous_key>
			
	}
	
	else{
		previous_key = pushed_key;
 664:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <num_times_key_pushed+0x1>
		num_times_key_pushed = 0;
 668:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <num_times_key_pushed>
 66c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <previous_key>
		
	}
	
	return previous_key;
 670:	82 2f       	mov	r24, r18
}
 672:	e0 96       	adiw	r28, 0x30	; 48
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	de bf       	out	0x3e, r29	; 62
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	cd bf       	out	0x3d, r28	; 61
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	bf 90       	pop	r11
 68e:	af 90       	pop	r10
 690:	9f 90       	pop	r9
 692:	8f 90       	pop	r8
 694:	7f 90       	pop	r7
 696:	6f 90       	pop	r6
 698:	5f 90       	pop	r5
 69a:	4f 90       	pop	r4
 69c:	08 95       	ret

0000069e <main>:
 69e:	cf 93       	push	r28

int main(void)
{
 6a0:	df 93       	push	r29
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	64 97       	sbiw	r28, 0x14	; 20
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
	/*
	when scaling by 1: 14 chars per line, 8 pixels in height
	when scaling by 2: 8 chars per line, 14 pixels in height
	when scaling by 3: 5 chars per line, 21 pixels in height
	*/
	DDRC = 0x0F;	//Set PC7...PC3 to input, PC2...PC0 to output [0000 1111]
 6b2:	8f e0       	ldi	r24, 0x0F	; 15
 6b4:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xF0;	//Init port C to 1s							[1111 0000]
 6b6:	80 ef       	ldi	r24, 0xF0	; 240
 6b8:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;	//Set Port D to output
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//Init Port D to 0s
 6be:	1b b8       	out	0x0b, r1	; 11
	nokia_lcd_init();
 6c0:	b4 d0       	rcall	.+360    	; 0x82a <nokia_lcd_init>
	nokia_lcd_clear();
 6c2:	e9 d0       	rcall	.+466    	; 0x896 <nokia_lcd_clear>
 6c4:	86 e0       	ldi	r24, 0x06	; 6
		
	char intro[] = "Hello";
 6c6:	ed e0       	ldi	r30, 0x0D	; 13
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	de 01       	movw	r26, r28
 6cc:	11 96       	adiw	r26, 0x01	; 1
 6ce:	01 90       	ld	r0, Z+
 6d0:	0d 92       	st	X+, r0
 6d2:	8a 95       	dec	r24
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <main+0x30>
 6d6:	61 e0       	ldi	r22, 0x01	; 1
	nokia_lcd_write_string(intro,1);
 6d8:	ce 01       	movw	r24, r28
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	c2 d1       	rcall	.+900    	; 0xa62 <nokia_lcd_write_string>
 6de:	6a e0       	ldi	r22, 0x0A	; 10
	nokia_lcd_set_cursor(0,10);
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	d1 d1       	rcall	.+930    	; 0xa86 <nokia_lcd_set_cursor>
 6e4:	61 e0       	ldi	r22, 0x01	; 1
	nokia_lcd_write_char('_',1);
 6e6:	8f e5       	ldi	r24, 0x5F	; 95
 6e8:	12 d1       	rcall	.+548    	; 0x90e <nokia_lcd_write_char>
 6ea:	d2 d1       	rcall	.+932    	; 0xa90 <nokia_lcd_render>
 6ec:	8f e5       	ldi	r24, 0x5F	; 95
	nokia_lcd_render();
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	98 87       	std	Y+8, r25	; 0x08
	
	char name[14] = "_";
 6f2:	8f 83       	std	Y+7, r24	; 0x07
 6f4:	fe 01       	movw	r30, r28
 6f6:	39 96       	adiw	r30, 0x09	; 9
 6f8:	8c e0       	ldi	r24, 0x0C	; 12
 6fa:	df 01       	movw	r26, r30
 6fc:	1d 92       	st	X+, r1
 6fe:	8a 95       	dec	r24
 700:	e9 f7       	brne	.-6      	; 0x6fc <main+0x5e>
 702:	45 de       	rcall	.-886    	; 0x38e <AlphaNumPad>
 704:	18 2f       	mov	r17, r24
	
    
	while (1) 
    {	
		while(!finished){
			new_key = AlphaNumPad();
 706:	83 32       	cpi	r24, 0x23	; 35
 708:	09 f4       	brne	.+2      	; 0x70c <main+0x6e>
 70a:	58 c0       	rjmp	.+176    	; 0x7bc <main+0x11e>
		
			while(new_key != '#'){
 70c:	f1 2c       	mov	r15, r1
 70e:	00 e0       	ldi	r16, 0x00	; 0
 710:	0f 2e       	mov	r0, r31
	nokia_lcd_render();
	
	char name[14] = "_";
	unsigned char name_length = 0;
	
	unsigned char last_key = '\0';
 712:	ff e5       	ldi	r31, 0x5F	; 95
	nokia_lcd_set_cursor(0,10);
	nokia_lcd_write_char('_',1);
	nokia_lcd_render();
	
	char name[14] = "_";
	unsigned char name_length = 0;
 714:	ef 2e       	mov	r14, r31
		
				else{
					if(last_key != '\0'){
						if(name_length < 10){
							last_key = '\0';
							name[name_length + 1] = '_';
 716:	f0 2d       	mov	r31, r0
 718:	d1 2c       	mov	r13, r1
 71a:	1a 32       	cpi	r17, 0x2A	; 42
 71c:	c9 f4       	brne	.+50     	; 0x750 <main+0xb2>
					if(name_length > 0){
						--name_length;
						name[name_length] = '_';
						name[name_length + 1] = '\0';
						outputstring(name);
						last_key = '\0';
 71e:	00 23       	and	r16, r16
    {	
		while(!finished){
			new_key = AlphaNumPad();
		
			while(new_key != '#'){
				if(new_key == '*'){
 720:	09 f4       	brne	.+2      	; 0x724 <main+0x86>
 722:	46 c0       	rjmp	.+140    	; 0x7b0 <main+0x112>
					if(name_length > 0){
 724:	01 50       	subi	r16, 0x01	; 1
 726:	80 2f       	mov	r24, r16
 728:	90 e0       	ldi	r25, 0x00	; 0
						--name_length;
 72a:	e7 e0       	ldi	r30, 0x07	; 7
						name[name_length] = '_';
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	ec 0f       	add	r30, r28
 730:	fd 1f       	adc	r31, r29
 732:	e8 0f       	add	r30, r24
 734:	f9 1f       	adc	r31, r25
 736:	e0 82       	st	Z, r14
 738:	e8 e0       	ldi	r30, 0x08	; 8
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	ec 0f       	add	r30, r28
						name[name_length + 1] = '\0';
 73e:	fd 1f       	adc	r31, r29
 740:	e8 0f       	add	r30, r24
 742:	f9 1f       	adc	r31, r25
 744:	10 82       	st	Z, r1
 746:	ce 01       	movw	r24, r28
 748:	07 96       	adiw	r24, 0x07	; 7
						outputstring(name);
 74a:	13 de       	rcall	.-986    	; 0x372 <outputstring>
 74c:	fd 2c       	mov	r15, r13
 74e:	30 c0       	rjmp	.+96     	; 0x7b0 <main+0x112>
 750:	11 23       	and	r17, r17
						last_key = '\0';
 752:	a9 f0       	breq	.+42     	; 0x77e <main+0xe0>
 754:	80 2f       	mov	r24, r16
					}
				}
				
				else if(new_key != '\0'){
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	e7 e0       	ldi	r30, 0x07	; 7
					last_key = new_key;
					name[name_length] = new_key;
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	ec 0f       	add	r30, r28
 75e:	fd 1f       	adc	r31, r29
 760:	e8 0f       	add	r30, r24
 762:	f9 1f       	adc	r31, r25
 764:	10 83       	st	Z, r17
 766:	e8 e0       	ldi	r30, 0x08	; 8
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	ec 0f       	add	r30, r28
					name[name_length + 1] = '\0';
 76c:	fd 1f       	adc	r31, r29
 76e:	e8 0f       	add	r30, r24
 770:	f9 1f       	adc	r31, r25
 772:	10 82       	st	Z, r1
 774:	ce 01       	movw	r24, r28
 776:	07 96       	adiw	r24, 0x07	; 7
					outputstring(name);
 778:	fc dd       	rcall	.-1032   	; 0x372 <outputstring>
 77a:	f1 2e       	mov	r15, r17
 77c:	19 c0       	rjmp	.+50     	; 0x7b0 <main+0x112>
 77e:	ff 20       	and	r15, r15
 780:	b9 f0       	breq	.+46     	; 0x7b0 <main+0x112>
 782:	0a 30       	cpi	r16, 0x0A	; 10
				}
				
		
				else{
					if(last_key != '\0'){
 784:	a8 f4       	brcc	.+42     	; 0x7b0 <main+0x112>
 786:	80 2f       	mov	r24, r16
						if(name_length < 10){
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	e8 e0       	ldi	r30, 0x08	; 8
							last_key = '\0';
							name[name_length + 1] = '_';
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	ec 0f       	add	r30, r28
 790:	fd 1f       	adc	r31, r29
 792:	e8 0f       	add	r30, r24
 794:	f9 1f       	adc	r31, r25
 796:	e0 82       	st	Z, r14
 798:	e9 e0       	ldi	r30, 0x09	; 9
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	ec 0f       	add	r30, r28
							name[name_length + 2] = '\0';
 79e:	fd 1f       	adc	r31, r29
 7a0:	e8 0f       	add	r30, r24
 7a2:	f9 1f       	adc	r31, r25
 7a4:	10 82       	st	Z, r1
 7a6:	0f 5f       	subi	r16, 0xFF	; 255
							++name_length;
 7a8:	ce 01       	movw	r24, r28
							outputstring(name);
 7aa:	07 96       	adiw	r24, 0x07	; 7
 7ac:	e2 dd       	rcall	.-1084   	; 0x372 <outputstring>
 7ae:	f1 2e       	mov	r15, r17
 7b0:	ee dd       	rcall	.-1060   	; 0x38e <AlphaNumPad>
				
		
				else{
					if(last_key != '\0'){
						if(name_length < 10){
							last_key = '\0';
 7b2:	18 2f       	mov	r17, r24
							outputstring(name);
						}	
					}
				}
			
				new_key = AlphaNumPad();
 7b4:	83 32       	cpi	r24, 0x23	; 35
 7b6:	09 f0       	breq	.+2      	; 0x7ba <main+0x11c>
	while (1) 
    {	
		while(!finished){
			new_key = AlphaNumPad();
		
			while(new_key != '#'){
 7b8:	b0 cf       	rjmp	.-160    	; 0x71a <main+0x7c>
 7ba:	01 c0       	rjmp	.+2      	; 0x7be <main+0x120>
 7bc:	00 e0       	ldi	r16, 0x00	; 0
	nokia_lcd_set_cursor(0,10);
	nokia_lcd_write_char('_',1);
	nokia_lcd_render();
	
	char name[14] = "_";
	unsigned char name_length = 0;
 7be:	fe 01       	movw	r30, r28
				}
			
				new_key = AlphaNumPad();
			}
			
			name[name_length+1] = '\0';
 7c0:	e0 0f       	add	r30, r16
 7c2:	f1 1d       	adc	r31, r1
 7c4:	10 86       	std	Z+8, r1	; 0x08
			nokia_lcd_clear();
 7c6:	67 d0       	rcall	.+206    	; 0x896 <nokia_lcd_clear>
 7c8:	6a e0       	ldi	r22, 0x0A	; 10
			nokia_lcd_set_cursor(0,10);
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	5c d1       	rcall	.+696    	; 0xa86 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(name,1);
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	ce 01       	movw	r24, r28
 7d2:	07 96       	adiw	r24, 0x07	; 7
 7d4:	46 d1       	rcall	.+652    	; 0xa62 <nokia_lcd_write_string>
 7d6:	6e e1       	ldi	r22, 0x1E	; 30
			nokia_lcd_set_cursor(0,30);
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	55 d1       	rcall	.+682    	; 0xa86 <nokia_lcd_set_cursor>
 7dc:	61 e0       	ldi	r22, 0x01	; 1
 7de:	80 e0       	ldi	r24, 0x00	; 0
			nokia_lcd_write_string("Paul is cool",1);
 7e0:	91 e0       	ldi	r25, 0x01	; 1
 7e2:	3f d1       	rcall	.+638    	; 0xa62 <nokia_lcd_write_string>
 7e4:	55 d1       	rcall	.+682    	; 0xa90 <nokia_lcd_render>
 7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <main+0x148>

000007e8 <write>:
 7e8:	59 98       	cbi	0x0b, 1	; 11
			nokia_lcd_render();
 7ea:	66 23       	and	r22, r22
 7ec:	11 f0       	breq	.+4      	; 0x7f2 <write+0xa>
 7ee:	5b 9a       	sbi	0x0b, 3	; 11
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 7f0:	15 c0       	rjmp	.+42     	; 0x81c <write+0x34>
 7f2:	5b 98       	cbi	0x0b, 3	; 11
 7f4:	13 c0       	rjmp	.+38     	; 0x81c <write+0x34>
 7f6:	ac 01       	movw	r20, r24
 7f8:	02 2e       	mov	r0, r18
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <write+0x18>
 7fc:	55 95       	asr	r21
 7fe:	47 95       	ror	r20
 800:	0a 94       	dec	r0
 802:	e2 f7       	brpl	.-8      	; 0x7fc <write+0x14>
 804:	40 ff       	sbrs	r20, 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <write+0x24>
 808:	5c 9a       	sbi	0x0b, 4	; 11
 80a:	01 c0       	rjmp	.+2      	; 0x80e <write+0x26>
 80c:	5c 98       	cbi	0x0b, 4	; 11
 80e:	5d 9a       	sbi	0x0b, 5	; 11
 810:	5d 98       	cbi	0x0b, 5	; 11
 812:	21 50       	subi	r18, 0x01	; 1
 814:	31 09       	sbc	r19, r1
 816:	78 f7       	brcc	.-34     	; 0x7f6 <write+0xe>
 818:	59 9a       	sbi	0x0b, 1	; 11
 81a:	08 95       	ret
 81c:	27 e0       	ldi	r18, 0x07	; 7
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	e9 cf       	rjmp	.-46     	; 0x7f6 <write+0xe>

00000824 <write_cmd>:
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	e0 cf       	rjmp	.-64     	; 0x7e8 <write>
 828:	08 95       	ret

0000082a <nokia_lcd_init>:
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	51 9a       	sbi	0x0a, 1	; 10
 830:	52 9a       	sbi	0x0a, 2	; 10
 832:	53 9a       	sbi	0x0a, 3	; 10
 834:	54 9a       	sbi	0x0a, 4	; 10
 836:	55 9a       	sbi	0x0a, 5	; 10
 838:	5a 9a       	sbi	0x0b, 2	; 11
 83a:	59 9a       	sbi	0x0b, 1	; 11
 83c:	83 ec       	ldi	r24, 0xC3	; 195
 83e:	99 e0       	ldi	r25, 0x09	; 9
 840:	01 97       	sbiw	r24, 0x01	; 1
 842:	f1 f7       	brne	.-4      	; 0x840 <nokia_lcd_init+0x16>
 844:	00 c0       	rjmp	.+0      	; 0x846 <nokia_lcd_init+0x1c>
 846:	00 00       	nop
 848:	5a 98       	cbi	0x0b, 2	; 11
 84a:	8b e5       	ldi	r24, 0x5B	; 91
 84c:	94 e4       	ldi	r25, 0x44	; 68
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	f1 f7       	brne	.-4      	; 0x84e <nokia_lcd_init+0x24>
 852:	00 c0       	rjmp	.+0      	; 0x854 <nokia_lcd_init+0x2a>
 854:	00 00       	nop
 856:	5a 9a       	sbi	0x0b, 2	; 11
 858:	59 98       	cbi	0x0b, 1	; 11
 85a:	81 e2       	ldi	r24, 0x21	; 33
 85c:	e3 df       	rcall	.-58     	; 0x824 <write_cmd>
 85e:	83 e1       	ldi	r24, 0x13	; 19
 860:	e1 df       	rcall	.-62     	; 0x824 <write_cmd>
 862:	86 e0       	ldi	r24, 0x06	; 6
 864:	df df       	rcall	.-66     	; 0x824 <write_cmd>
 866:	82 ec       	ldi	r24, 0xC2	; 194
 868:	dd df       	rcall	.-70     	; 0x824 <write_cmd>
 86a:	80 e2       	ldi	r24, 0x20	; 32
 86c:	db df       	rcall	.-74     	; 0x824 <write_cmd>
 86e:	89 e0       	ldi	r24, 0x09	; 9
 870:	d9 df       	rcall	.-78     	; 0x824 <write_cmd>
 872:	80 e8       	ldi	r24, 0x80	; 128
 874:	d7 df       	rcall	.-82     	; 0x824 <write_cmd>
 876:	80 e4       	ldi	r24, 0x40	; 64
 878:	d5 df       	rcall	.-86     	; 0x824 <write_cmd>
 87a:	c8 ef       	ldi	r28, 0xF8	; 248
 87c:	d1 e0       	ldi	r29, 0x01	; 1
 87e:	61 e0       	ldi	r22, 0x01	; 1
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	b2 df       	rcall	.-156    	; 0x7e8 <write>
 884:	21 97       	sbiw	r28, 0x01	; 1
 886:	d9 f7       	brne	.-10     	; 0x87e <nokia_lcd_init+0x54>
 888:	88 e0       	ldi	r24, 0x08	; 8
 88a:	cc df       	rcall	.-104    	; 0x824 <write_cmd>
 88c:	8c e0       	ldi	r24, 0x0C	; 12
 88e:	ca df       	rcall	.-108    	; 0x824 <write_cmd>
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	08 95       	ret

00000896 <nokia_lcd_clear>:
 896:	80 e8       	ldi	r24, 0x80	; 128
 898:	c5 df       	rcall	.-118    	; 0x824 <write_cmd>
 89a:	80 e4       	ldi	r24, 0x40	; 64
 89c:	c3 df       	rcall	.-122    	; 0x824 <write_cmd>
 89e:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <nokia_lcd+0x1f8>
 8a2:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <nokia_lcd+0x1f9>
 8a6:	eb e1       	ldi	r30, 0x1B	; 27
 8a8:	f1 e0       	ldi	r31, 0x01	; 1
 8aa:	83 e1       	ldi	r24, 0x13	; 19
 8ac:	93 e0       	ldi	r25, 0x03	; 3
 8ae:	11 92       	st	Z+, r1
 8b0:	e8 17       	cp	r30, r24
 8b2:	f9 07       	cpc	r31, r25
 8b4:	e1 f7       	brne	.-8      	; 0x8ae <nokia_lcd_clear+0x18>
 8b6:	08 95       	ret

000008b8 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 8b8:	26 2f       	mov	r18, r22
 8ba:	26 95       	lsr	r18
 8bc:	26 95       	lsr	r18
 8be:	26 95       	lsr	r18
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	34 e5       	ldi	r19, 0x54	; 84
 8c4:	23 9f       	mul	r18, r19
 8c6:	80 0d       	add	r24, r0
 8c8:	91 1d       	adc	r25, r1
 8ca:	11 24       	eor	r1, r1
	if (value)
 8cc:	44 23       	and	r20, r20
 8ce:	79 f0       	breq	.+30     	; 0x8ee <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 8d0:	fc 01       	movw	r30, r24
 8d2:	e5 5e       	subi	r30, 0xE5	; 229
 8d4:	fe 4f       	sbci	r31, 0xFE	; 254
 8d6:	67 70       	andi	r22, 0x07	; 7
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <nokia_lcd_set_pixel+0x2a>
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	6a 95       	dec	r22
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <nokia_lcd_set_pixel+0x26>
 8e6:	90 81       	ld	r25, Z
 8e8:	89 2b       	or	r24, r25
 8ea:	80 83       	st	Z, r24
 8ec:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 8ee:	fc 01       	movw	r30, r24
 8f0:	e5 5e       	subi	r30, 0xE5	; 229
 8f2:	fe 4f       	sbci	r31, 0xFE	; 254
 8f4:	67 70       	andi	r22, 0x07	; 7
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <nokia_lcd_set_pixel+0x48>
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	6a 95       	dec	r22
 902:	e2 f7       	brpl	.-8      	; 0x8fc <nokia_lcd_set_pixel+0x44>
 904:	80 95       	com	r24
 906:	90 81       	ld	r25, Z
 908:	89 23       	and	r24, r25
 90a:	80 83       	st	Z, r24
 90c:	08 95       	ret

0000090e <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 90e:	5f 92       	push	r5
 910:	6f 92       	push	r6
 912:	7f 92       	push	r7
 914:	8f 92       	push	r8
 916:	9f 92       	push	r9
 918:	af 92       	push	r10
 91a:	bf 92       	push	r11
 91c:	cf 92       	push	r12
 91e:	df 92       	push	r13
 920:	ef 92       	push	r14
 922:	ff 92       	push	r15
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 92e:	26 2f       	mov	r18, r22
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	49 01       	movw	r8, r18
 934:	88 0c       	add	r8, r8
 936:	99 1c       	adc	r9, r9
 938:	88 0c       	add	r8, r8
 93a:	99 1c       	adc	r9, r9
 93c:	82 0e       	add	r8, r18
 93e:	93 1e       	adc	r9, r19
 940:	18 14       	cp	r1, r8
 942:	19 04       	cpc	r1, r9
 944:	0c f0       	brlt	.+2      	; 0x948 <nokia_lcd_write_char+0x3a>
 946:	59 c0       	rjmp	.+178    	; 0x9fa <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
 948:	89 01       	movw	r16, r18
 94a:	00 0f       	add	r16, r16
 94c:	11 1f       	adc	r17, r17
 94e:	00 0f       	add	r16, r16
 950:	11 1f       	adc	r17, r17
 952:	00 0f       	add	r16, r16
 954:	11 1f       	adc	r17, r17
 956:	02 1b       	sub	r16, r18
 958:	13 0b       	sbc	r17, r19
 95a:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 95c:	a8 2e       	mov	r10, r24
 95e:	b1 2c       	mov	r11, r1
 960:	c5 01       	movw	r24, r10
 962:	80 97       	sbiw	r24, 0x20	; 32
 964:	5c 01       	movw	r10, r24
 966:	aa 0c       	add	r10, r10
 968:	bb 1c       	adc	r11, r11
 96a:	aa 0c       	add	r10, r10
 96c:	bb 1c       	adc	r11, r11
 96e:	a8 0e       	add	r10, r24
 970:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 972:	0f 2e       	mov	r0, r31
 974:	f4 e1       	ldi	r31, 0x14	; 20
 976:	cf 2e       	mov	r12, r31
 978:	f3 e0       	ldi	r31, 0x03	; 3
 97a:	df 2e       	mov	r13, r31
 97c:	f0 2d       	mov	r31, r0
 97e:	0f 2e       	mov	r0, r31
 980:	f3 e1       	ldi	r31, 0x13	; 19
 982:	ef 2e       	mov	r14, r31
 984:	f3 e0       	ldi	r31, 0x03	; 3
 986:	ff 2e       	mov	r15, r31
 988:	f0 2d       	mov	r31, r0
 98a:	2a c0       	rjmp	.+84     	; 0x9e0 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 98c:	fe 01       	movw	r30, r28
 98e:	24 91       	lpm	r18, Z
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	87 2d       	mov	r24, r7
 994:	65 2d       	mov	r22, r5
 996:	93 d0       	rcall	.+294    	; 0xabe <__udivmodqi4>
 998:	02 c0       	rjmp	.+4      	; 0x99e <nokia_lcd_write_char+0x90>
 99a:	35 95       	asr	r19
 99c:	27 95       	ror	r18
 99e:	8a 95       	dec	r24
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <nokia_lcd_write_char+0x8c>
 9a2:	20 ff       	sbrs	r18, 0
 9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 9a6:	f6 01       	movw	r30, r12
 9a8:	60 81       	ld	r22, Z
 9aa:	67 0d       	add	r22, r7
 9ac:	f7 01       	movw	r30, r14
 9ae:	80 81       	ld	r24, Z
 9b0:	41 e0       	ldi	r20, 0x01	; 1
 9b2:	86 0d       	add	r24, r6
 9b4:	81 df       	rcall	.-254    	; 0x8b8 <nokia_lcd_set_pixel>
 9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 9b8:	f6 01       	movw	r30, r12
 9ba:	60 81       	ld	r22, Z
 9bc:	67 0d       	add	r22, r7
 9be:	f7 01       	movw	r30, r14
 9c0:	80 81       	ld	r24, Z
 9c2:	40 e0       	ldi	r20, 0x00	; 0
 9c4:	86 0d       	add	r24, r6
 9c6:	78 df       	rcall	.-272    	; 0x8b8 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 9c8:	73 94       	inc	r7
 9ca:	87 2d       	mov	r24, r7
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	80 17       	cp	r24, r16
 9d0:	91 07       	cpc	r25, r17
 9d2:	e4 f2       	brlt	.-72     	; 0x98c <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 9d4:	63 94       	inc	r6
 9d6:	86 2d       	mov	r24, r6
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	88 15       	cp	r24, r8
 9dc:	99 05       	cpc	r25, r9
 9de:	6c f4       	brge	.+26     	; 0x9fa <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
 9e0:	10 16       	cp	r1, r16
 9e2:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 9e4:	bc f7       	brge	.-18     	; 0x9d4 <nokia_lcd_write_char+0xc6>
 9e6:	86 2d       	mov	r24, r6
 9e8:	65 2d       	mov	r22, r5
 9ea:	69 d0       	rcall	.+210    	; 0xabe <__udivmodqi4>
 9ec:	e5 01       	movw	r28, r10
 9ee:	c8 0f       	add	r28, r24
 9f0:	d1 1d       	adc	r29, r1
 9f2:	c4 57       	subi	r28, 0x74	; 116
 9f4:	df 4f       	sbci	r29, 0xFF	; 255
 9f6:	71 2c       	mov	r7, r1
 9f8:	c9 cf       	rjmp	.-110    	; 0x98c <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 9fa:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <nokia_lcd+0x1f8>
 9fe:	91 e0       	ldi	r25, 0x01	; 1
 a00:	98 0f       	add	r25, r24
 a02:	85 2d       	mov	r24, r5
 a04:	88 0f       	add	r24, r24
 a06:	88 0f       	add	r24, r24
 a08:	85 0d       	add	r24, r5
 a0a:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
 a0c:	84 35       	cpi	r24, 0x54	; 84
 a0e:	18 f4       	brcc	.+6      	; 0xa16 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 a10:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <nokia_lcd+0x1f8>
 a14:	0e c0       	rjmp	.+28     	; 0xa32 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
 a16:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
 a1a:	e4 e1       	ldi	r30, 0x14	; 20
 a1c:	f3 e0       	ldi	r31, 0x03	; 3
 a1e:	80 81       	ld	r24, Z
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	98 0f       	add	r25, r24
 a24:	85 2d       	mov	r24, r5
 a26:	88 0f       	add	r24, r24
 a28:	88 0f       	add	r24, r24
 a2a:	88 0f       	add	r24, r24
 a2c:	85 19       	sub	r24, r5
 a2e:	89 0f       	add	r24, r25
 a30:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 a32:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <nokia_lcd+0x1f9>
 a36:	80 33       	cpi	r24, 0x30	; 48
 a38:	20 f0       	brcs	.+8      	; 0xa42 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
 a3a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
 a3e:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <nokia_lcd+0x1f9>
	}
}
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	1f 91       	pop	r17
 a48:	0f 91       	pop	r16
 a4a:	ff 90       	pop	r15
 a4c:	ef 90       	pop	r14
 a4e:	df 90       	pop	r13
 a50:	cf 90       	pop	r12
 a52:	bf 90       	pop	r11
 a54:	af 90       	pop	r10
 a56:	9f 90       	pop	r9
 a58:	8f 90       	pop	r8
 a5a:	7f 90       	pop	r7
 a5c:	6f 90       	pop	r6
 a5e:	5f 90       	pop	r5
 a60:	08 95       	ret

00000a62 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 a62:	1f 93       	push	r17
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	ec 01       	movw	r28, r24
	while(*str)
 a6a:	88 81       	ld	r24, Y
 a6c:	88 23       	and	r24, r24
 a6e:	39 f0       	breq	.+14     	; 0xa7e <nokia_lcd_write_string+0x1c>
 a70:	16 2f       	mov	r17, r22
 a72:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
 a74:	61 2f       	mov	r22, r17
 a76:	4b df       	rcall	.-362    	; 0x90e <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 a78:	89 91       	ld	r24, Y+
 a7a:	81 11       	cpse	r24, r1
 a7c:	fb cf       	rjmp	.-10     	; 0xa74 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
 a7e:	df 91       	pop	r29
 a80:	cf 91       	pop	r28
 a82:	1f 91       	pop	r17
 a84:	08 95       	ret

00000a86 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 a86:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 a8a:	60 93 14 03 	sts	0x0314, r22	; 0x800314 <nokia_lcd+0x1f9>
 a8e:	08 95       	ret

00000a90 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 a90:	0f 93       	push	r16
 a92:	1f 93       	push	r17
 a94:	cf 93       	push	r28
 a96:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 a98:	80 e8       	ldi	r24, 0x80	; 128
 a9a:	c4 de       	rcall	.-632    	; 0x824 <write_cmd>
	write_cmd(0x40);
 a9c:	80 e4       	ldi	r24, 0x40	; 64
 a9e:	c2 de       	rcall	.-636    	; 0x824 <write_cmd>
 aa0:	cb e1       	ldi	r28, 0x1B	; 27
 aa2:	d1 e0       	ldi	r29, 0x01	; 1
 aa4:	03 e1       	ldi	r16, 0x13	; 19
 aa6:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 aa8:	61 e0       	ldi	r22, 0x01	; 1
 aaa:	89 91       	ld	r24, Y+
 aac:	9d de       	rcall	.-710    	; 0x7e8 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 aae:	c0 17       	cp	r28, r16
 ab0:	d1 07       	cpc	r29, r17
 ab2:	d1 f7       	brne	.-12     	; 0xaa8 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	1f 91       	pop	r17
 aba:	0f 91       	pop	r16
 abc:	08 95       	ret

00000abe <__udivmodqi4>:
 abe:	99 1b       	sub	r25, r25
 ac0:	79 e0       	ldi	r23, 0x09	; 9
 ac2:	04 c0       	rjmp	.+8      	; 0xacc <__udivmodqi4_ep>

00000ac4 <__udivmodqi4_loop>:
 ac4:	99 1f       	adc	r25, r25
 ac6:	96 17       	cp	r25, r22
 ac8:	08 f0       	brcs	.+2      	; 0xacc <__udivmodqi4_ep>
 aca:	96 1b       	sub	r25, r22

00000acc <__udivmodqi4_ep>:
 acc:	88 1f       	adc	r24, r24
 ace:	7a 95       	dec	r23
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__udivmodqi4_loop>
 ad2:	80 95       	com	r24
 ad4:	08 95       	ret

00000ad6 <__udivmodsi4>:
 ad6:	a1 e2       	ldi	r26, 0x21	; 33
 ad8:	1a 2e       	mov	r1, r26
 ada:	aa 1b       	sub	r26, r26
 adc:	bb 1b       	sub	r27, r27
 ade:	fd 01       	movw	r30, r26
 ae0:	0d c0       	rjmp	.+26     	; 0xafc <__udivmodsi4_ep>

00000ae2 <__udivmodsi4_loop>:
 ae2:	aa 1f       	adc	r26, r26
 ae4:	bb 1f       	adc	r27, r27
 ae6:	ee 1f       	adc	r30, r30
 ae8:	ff 1f       	adc	r31, r31
 aea:	a2 17       	cp	r26, r18
 aec:	b3 07       	cpc	r27, r19
 aee:	e4 07       	cpc	r30, r20
 af0:	f5 07       	cpc	r31, r21
 af2:	20 f0       	brcs	.+8      	; 0xafc <__udivmodsi4_ep>
 af4:	a2 1b       	sub	r26, r18
 af6:	b3 0b       	sbc	r27, r19
 af8:	e4 0b       	sbc	r30, r20
 afa:	f5 0b       	sbc	r31, r21

00000afc <__udivmodsi4_ep>:
 afc:	66 1f       	adc	r22, r22
 afe:	77 1f       	adc	r23, r23
 b00:	88 1f       	adc	r24, r24
 b02:	99 1f       	adc	r25, r25
 b04:	1a 94       	dec	r1
 b06:	69 f7       	brne	.-38     	; 0xae2 <__udivmodsi4_loop>
 b08:	60 95       	com	r22
 b0a:	70 95       	com	r23
 b0c:	80 95       	com	r24
 b0e:	90 95       	com	r25
 b10:	9b 01       	movw	r18, r22
 b12:	ac 01       	movw	r20, r24
 b14:	bd 01       	movw	r22, r26
 b16:	cf 01       	movw	r24, r30
 b18:	08 95       	ret

00000b1a <_exit>:
 b1a:	f8 94       	cli

00000b1c <__stop_program>:
 b1c:	ff cf       	rjmp	.-2      	; 0xb1c <__stop_program>
