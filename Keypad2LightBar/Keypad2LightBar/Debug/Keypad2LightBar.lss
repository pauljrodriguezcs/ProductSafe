
Keypad2LightBar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008eb  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f1  00000000  00000000  000014b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>
   2:	00 00       	nop
   4:	85 c0       	rjmp	.+266    	; 0x110 <__bad_interrupt>
   6:	00 00       	nop
   8:	83 c0       	rjmp	.+262    	; 0x110 <__bad_interrupt>
   a:	00 00       	nop
   c:	81 c0       	rjmp	.+258    	; 0x110 <__bad_interrupt>
   e:	00 00       	nop
  10:	7f c0       	rjmp	.+254    	; 0x110 <__bad_interrupt>
  12:	00 00       	nop
  14:	7d c0       	rjmp	.+250    	; 0x110 <__bad_interrupt>
  16:	00 00       	nop
  18:	7b c0       	rjmp	.+246    	; 0x110 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	79 c0       	rjmp	.+242    	; 0x110 <__bad_interrupt>
  1e:	00 00       	nop
  20:	77 c0       	rjmp	.+238    	; 0x110 <__bad_interrupt>
  22:	00 00       	nop
  24:	75 c0       	rjmp	.+234    	; 0x110 <__bad_interrupt>
  26:	00 00       	nop
  28:	73 c0       	rjmp	.+230    	; 0x110 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	71 c0       	rjmp	.+226    	; 0x110 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6f c0       	rjmp	.+222    	; 0x110 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__bad_interrupt>
  36:	00 00       	nop
  38:	6b c0       	rjmp	.+214    	; 0x110 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	69 c0       	rjmp	.+210    	; 0x110 <__bad_interrupt>
  3e:	00 00       	nop
  40:	67 c0       	rjmp	.+206    	; 0x110 <__bad_interrupt>
  42:	00 00       	nop
  44:	65 c0       	rjmp	.+202    	; 0x110 <__bad_interrupt>
  46:	00 00       	nop
  48:	63 c0       	rjmp	.+198    	; 0x110 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	61 c0       	rjmp	.+194    	; 0x110 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5f c0       	rjmp	.+190    	; 0x110 <__bad_interrupt>
  52:	00 00       	nop
  54:	5d c0       	rjmp	.+186    	; 0x110 <__bad_interrupt>
  56:	00 00       	nop
  58:	5b c0       	rjmp	.+182    	; 0x110 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	59 c0       	rjmp	.+178    	; 0x110 <__bad_interrupt>
  5e:	00 00       	nop
  60:	57 c0       	rjmp	.+174    	; 0x110 <__bad_interrupt>
  62:	00 00       	nop
  64:	55 c0       	rjmp	.+170    	; 0x110 <__bad_interrupt>
  66:	00 00       	nop
  68:	53 c0       	rjmp	.+166    	; 0x110 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	51 c0       	rjmp	.+162    	; 0x110 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4f c0       	rjmp	.+158    	; 0x110 <__bad_interrupt>
  72:	00 00       	nop
  74:	4d c0       	rjmp	.+154    	; 0x110 <__bad_interrupt>
  76:	00 00       	nop
  78:	4b c0       	rjmp	.+150    	; 0x110 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	49 c0       	rjmp	.+146    	; 0x110 <__bad_interrupt>
  7e:	00 00       	nop
  80:	47 c0       	rjmp	.+142    	; 0x110 <__bad_interrupt>
  82:	00 00       	nop
  84:	45 c0       	rjmp	.+138    	; 0x110 <__bad_interrupt>
  86:	00 00       	nop
  88:	43 c0       	rjmp	.+134    	; 0x110 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 01       	movw	r4, r4
  8e:	3c 01       	movw	r6, r24
  90:	3c 01       	movw	r6, r24
  92:	3c 01       	movw	r6, r24
  94:	3c 01       	movw	r6, r24
  96:	3c 01       	movw	r6, r24
  98:	3c 01       	movw	r6, r24
  9a:	3c 01       	movw	r6, r24
  9c:	3c 01       	movw	r6, r24
  9e:	3c 01       	movw	r6, r24
  a0:	3c 01       	movw	r6, r24
  a2:	3c 01       	movw	r6, r24
  a4:	3c 01       	movw	r6, r24
  a6:	3c 01       	movw	r6, r24
  a8:	3c 01       	movw	r6, r24
  aa:	3c 01       	movw	r6, r24
  ac:	3c 01       	movw	r6, r24
  ae:	3c 01       	movw	r6, r24
  b0:	3c 01       	movw	r6, r24
  b2:	3c 01       	movw	r6, r24
  b4:	3c 01       	movw	r6, r24
  b6:	3c 01       	movw	r6, r24
  b8:	3c 01       	movw	r6, r24
  ba:	3c 01       	movw	r6, r24
  bc:	3c 01       	movw	r6, r24
  be:	3c 01       	movw	r6, r24
  c0:	3c 01       	movw	r6, r24
  c2:	3c 01       	movw	r6, r24
  c4:	3c 01       	movw	r6, r24
  c6:	3c 01       	movw	r6, r24
  c8:	3c 01       	movw	r6, r24
  ca:	3c 01       	movw	r6, r24
  cc:	3c 01       	movw	r6, r24
  ce:	3c 01       	movw	r6, r24
  d0:	3c 01       	movw	r6, r24
  d2:	3a 01       	movw	r6, r20
  d4:	3c 01       	movw	r6, r24
  d6:	3c 01       	movw	r6, r24
  d8:	3c 01       	movw	r6, r24
  da:	3c 01       	movw	r6, r24
  dc:	3c 01       	movw	r6, r24
  de:	3c 01       	movw	r6, r24
  e0:	36 01       	movw	r6, r12
  e2:	3c 01       	movw	r6, r24
  e4:	3c 01       	movw	r6, r24
  e6:	3c 01       	movw	r6, r24
  e8:	3c 01       	movw	r6, r24
  ea:	3c 01       	movw	r6, r24
  ec:	38 01       	movw	r6, r16
  ee:	24 01       	movw	r4, r8
  f0:	26 01       	movw	r4, r12
  f2:	28 01       	movw	r4, r16
  f4:	2a 01       	movw	r4, r20
  f6:	2c 01       	movw	r4, r24
  f8:	2e 01       	movw	r4, r28
  fa:	30 01       	movw	r6, r0
  fc:	32 01       	movw	r6, r4
  fe:	34 01       	movw	r6, r8

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf ef       	ldi	r28, 0xFF	; 255
 106:	d0 e4       	ldi	r29, 0x40	; 64
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	67 d0       	rcall	.+206    	; 0x1dc <main>
 10e:	bf c0       	rjmp	.+382    	; 0x28e <_exit>

00000110 <__bad_interrupt>:
 110:	77 cf       	rjmp	.-274    	; 0x0 <__vectors>

00000112 <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = 0xFE; // Set Px0 to 0; others 1
 112:	8e ef       	ldi	r24, 0xFE	; 254
 114:	8b b9       	out	0x0b, r24	; 11
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 116:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 118:	89 b1       	in	r24, 0x09	; 9
 11a:	80 95       	com	r24
 11c:	84 fd       	sbrc	r24, 4
 11e:	46 c0       	rjmp	.+140    	; 0x1ac <GetKeypadKey+0x9a>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 120:	89 b1       	in	r24, 0x09	; 9
 122:	80 95       	com	r24
 124:	85 fd       	sbrc	r24, 5
 126:	44 c0       	rjmp	.+136    	; 0x1b0 <GetKeypadKey+0x9e>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 128:	89 b1       	in	r24, 0x09	; 9
 12a:	80 95       	com	r24
 12c:	86 fd       	sbrc	r24, 6
 12e:	42 c0       	rjmp	.+132    	; 0x1b4 <GetKeypadKey+0xa2>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 130:	89 b1       	in	r24, 0x09	; 9
 132:	80 95       	com	r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	88 0f       	add	r24, r24
 138:	89 2f       	mov	r24, r25
 13a:	88 1f       	adc	r24, r24
 13c:	99 0b       	sbc	r25, r25
 13e:	91 95       	neg	r25
 140:	89 2b       	or	r24, r25
 142:	d1 f5       	brne	.+116    	; 0x1b8 <GetKeypadKey+0xa6>

	// Check keys in col 2
	KEYPADPORT = 0xFD;; // Set Px1 to 0; others 1
 144:	8d ef       	ldi	r24, 0xFD	; 253
 146:	8b b9       	out	0x0b, r24	; 11
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 148:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 14a:	89 b1       	in	r24, 0x09	; 9
 14c:	80 95       	com	r24
 14e:	84 fd       	sbrc	r24, 4
 150:	35 c0       	rjmp	.+106    	; 0x1bc <GetKeypadKey+0xaa>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 152:	89 b1       	in	r24, 0x09	; 9
 154:	80 95       	com	r24
 156:	85 fd       	sbrc	r24, 5
 158:	33 c0       	rjmp	.+102    	; 0x1c0 <GetKeypadKey+0xae>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 15a:	89 b1       	in	r24, 0x09	; 9
 15c:	80 95       	com	r24
 15e:	86 fd       	sbrc	r24, 6
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <GetKeypadKey+0xb2>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 162:	89 b1       	in	r24, 0x09	; 9
 164:	80 95       	com	r24
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	88 0f       	add	r24, r24
 16a:	89 2f       	mov	r24, r25
 16c:	88 1f       	adc	r24, r24
 16e:	99 0b       	sbc	r25, r25
 170:	91 95       	neg	r25
 172:	89 2b       	or	r24, r25
 174:	49 f5       	brne	.+82     	; 0x1c8 <GetKeypadKey+0xb6>

	// Check keys in col 3
	KEYPADPORT = 0xFB;; // Set Px2 to 0; others 1
 176:	8b ef       	ldi	r24, 0xFB	; 251
 178:	8b b9       	out	0x0b, r24	; 11
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 17a:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 17c:	89 b1       	in	r24, 0x09	; 9
 17e:	80 95       	com	r24
 180:	84 fd       	sbrc	r24, 4
 182:	24 c0       	rjmp	.+72     	; 0x1cc <GetKeypadKey+0xba>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 184:	89 b1       	in	r24, 0x09	; 9
 186:	80 95       	com	r24
 188:	85 fd       	sbrc	r24, 5
 18a:	22 c0       	rjmp	.+68     	; 0x1d0 <GetKeypadKey+0xbe>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 18c:	89 b1       	in	r24, 0x09	; 9
 18e:	80 95       	com	r24
 190:	86 fd       	sbrc	r24, 6
 192:	20 c0       	rjmp	.+64     	; 0x1d4 <GetKeypadKey+0xc2>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 194:	89 b1       	in	r24, 0x09	; 9
 196:	80 95       	com	r24
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	88 0f       	add	r24, r24
 19c:	89 2f       	mov	r24, r25
 19e:	88 1f       	adc	r24, r24
 1a0:	99 0b       	sbc	r25, r25
 1a2:	91 95       	neg	r25
 1a4:	89 2b       	or	r24, r25
 1a6:	c1 f4       	brne	.+48     	; 0x1d8 <GetKeypadKey+0xc6>
	
	return '\0';
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = 0xFE; // Set Px0 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 1ac:	81 e3       	ldi	r24, 0x31	; 49
 1ae:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 1b0:	84 e3       	ldi	r24, 0x34	; 52
 1b2:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 1b4:	87 e3       	ldi	r24, 0x37	; 55
 1b6:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 1b8:	8a e2       	ldi	r24, 0x2A	; 42
 1ba:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = 0xFD;; // Set Px1 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 1bc:	82 e3       	ldi	r24, 0x32	; 50
 1be:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 1c4:	88 e3       	ldi	r24, 0x38	; 56
 1c6:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = 0xFB;; // Set Px2 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 1cc:	83 e3       	ldi	r24, 0x33	; 51
 1ce:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 1d0:	86 e3       	ldi	r24, 0x36	; 54
 1d2:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 1d4:	89 e3       	ldi	r24, 0x39	; 57
 1d6:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 1d8:	83 e2       	ldi	r24, 0x23	; 35
	
	return '\0';
}
 1da:	08 95       	ret

000001dc <main>:
#include "keypad.h"


int main(void)
{
	DDRD = 0x0F; // Set PD7...PD3 to input, PD2...PD0 to output [0000 1111]
 1dc:	8f e0       	ldi	r24, 0x0F	; 15
 1de:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xF0; //Init port D to 1s							[1111 0000]
 1e0:	80 ef       	ldi	r24, 0xF0	; 240
 1e2:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0xFF; // Set port C to output
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00; // Init port C to 0s
 1e8:	18 b8       	out	0x08, r1	; 8
			case '7': PORTC = 0x41; break;
			case '8': PORTC = 0x42; break;
			case '9': PORTC = 0x44; break;
			case '*': PORTC = 0x81; break;
			case '0': PORTC = 0x82; break;
			case '#': PORTC = 0x84; break;
 1ea:	0f 2e       	mov	r0, r31
 1ec:	f4 e8       	ldi	r31, 0x84	; 132
 1ee:	8f 2e       	mov	r8, r31
 1f0:	f0 2d       	mov	r31, r0
			case '6': PORTC = 0x24; break;
			case '7': PORTC = 0x41; break;
			case '8': PORTC = 0x42; break;
			case '9': PORTC = 0x44; break;
			case '*': PORTC = 0x81; break;
			case '0': PORTC = 0x82; break;
 1f2:	0f 2e       	mov	r0, r31
 1f4:	f2 e8       	ldi	r31, 0x82	; 130
 1f6:	9f 2e       	mov	r9, r31
 1f8:	f0 2d       	mov	r31, r0
			case '5': PORTC = 0x22; break;
			case '6': PORTC = 0x24; break;
			case '7': PORTC = 0x41; break;
			case '8': PORTC = 0x42; break;
			case '9': PORTC = 0x44; break;
			case '*': PORTC = 0x81; break;
 1fa:	0f 2e       	mov	r0, r31
 1fc:	f1 e8       	ldi	r31, 0x81	; 129
 1fe:	af 2e       	mov	r10, r31
 200:	f0 2d       	mov	r31, r0
			case '4': PORTC = 0x21; break;
			case '5': PORTC = 0x22; break;
			case '6': PORTC = 0x24; break;
			case '7': PORTC = 0x41; break;
			case '8': PORTC = 0x42; break;
			case '9': PORTC = 0x44; break;
 202:	0f 2e       	mov	r0, r31
 204:	f4 e4       	ldi	r31, 0x44	; 68
 206:	bf 2e       	mov	r11, r31
 208:	f0 2d       	mov	r31, r0
			case '3': PORTC = 0x14; break;
			case '4': PORTC = 0x21; break;
			case '5': PORTC = 0x22; break;
			case '6': PORTC = 0x24; break;
			case '7': PORTC = 0x41; break;
			case '8': PORTC = 0x42; break;
 20a:	0f 2e       	mov	r0, r31
 20c:	f2 e4       	ldi	r31, 0x42	; 66
 20e:	cf 2e       	mov	r12, r31
 210:	f0 2d       	mov	r31, r0
			case '2': PORTC = 0x12; break;
			case '3': PORTC = 0x14; break;
			case '4': PORTC = 0x21; break;
			case '5': PORTC = 0x22; break;
			case '6': PORTC = 0x24; break;
			case '7': PORTC = 0x41; break;
 212:	0f 2e       	mov	r0, r31
 214:	f1 e4       	ldi	r31, 0x41	; 65
 216:	df 2e       	mov	r13, r31
 218:	f0 2d       	mov	r31, r0
			case '1': PORTC = 0x11; break; // hex equivalent
			case '2': PORTC = 0x12; break;
			case '3': PORTC = 0x14; break;
			case '4': PORTC = 0x21; break;
			case '5': PORTC = 0x22; break;
			case '6': PORTC = 0x24; break;
 21a:	0f 2e       	mov	r0, r31
 21c:	f4 e2       	ldi	r31, 0x24	; 36
 21e:	ef 2e       	mov	r14, r31
 220:	f0 2d       	mov	r31, r0
			case '\0': PORTC = 0x00; break; // All 5 LEDs on
			case '1': PORTC = 0x11; break; // hex equivalent
			case '2': PORTC = 0x12; break;
			case '3': PORTC = 0x14; break;
			case '4': PORTC = 0x21; break;
			case '5': PORTC = 0x22; break;
 222:	0f 2e       	mov	r0, r31
 224:	f2 e2       	ldi	r31, 0x22	; 34
 226:	ff 2e       	mov	r15, r31
 228:	f0 2d       	mov	r31, r0
		switch (x) {
			case '\0': PORTC = 0x00; break; // All 5 LEDs on
			case '1': PORTC = 0x11; break; // hex equivalent
			case '2': PORTC = 0x12; break;
			case '3': PORTC = 0x14; break;
			case '4': PORTC = 0x21; break;
 22a:	01 e2       	ldi	r16, 0x21	; 33
		char x = GetKeypadKey();
		switch (x) {
			case '\0': PORTC = 0x00; break; // All 5 LEDs on
			case '1': PORTC = 0x11; break; // hex equivalent
			case '2': PORTC = 0x12; break;
			case '3': PORTC = 0x14; break;
 22c:	14 e1       	ldi	r17, 0x14	; 20
    {	
		char x = GetKeypadKey();
		switch (x) {
			case '\0': PORTC = 0x00; break; // All 5 LEDs on
			case '1': PORTC = 0x11; break; // hex equivalent
			case '2': PORTC = 0x12; break;
 22e:	d2 e1       	ldi	r29, 0x12	; 18
    while (1)
    {	
		char x = GetKeypadKey();
		switch (x) {
			case '\0': PORTC = 0x00; break; // All 5 LEDs on
			case '1': PORTC = 0x11; break; // hex equivalent
 230:	c1 e1       	ldi	r28, 0x11	; 17
	DDRC = 0xFF; // Set port C to output
	PORTC = 0x00; // Init port C to 0s
    /* Replace with your application code */
    while (1)
    {	
		char x = GetKeypadKey();
 232:	6f df       	rcall	.-290    	; 0x112 <GetKeypadKey>
		switch (x) {
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	8a 33       	cpi	r24, 0x3A	; 58
 238:	91 05       	cpc	r25, r1
 23a:	f0 f4       	brcc	.+60     	; 0x278 <main+0x9c>
 23c:	fc 01       	movw	r30, r24
 23e:	ea 5b       	subi	r30, 0xBA	; 186
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	1c c0       	rjmp	.+56     	; 0x27c <__tablejump2__>
			case '\0': PORTC = 0x00; break; // All 5 LEDs on
 244:	18 b8       	out	0x08, r1	; 8
 246:	f5 cf       	rjmp	.-22     	; 0x232 <main+0x56>
			case '1': PORTC = 0x11; break; // hex equivalent
 248:	c8 b9       	out	0x08, r28	; 8
 24a:	f3 cf       	rjmp	.-26     	; 0x232 <main+0x56>
			case '2': PORTC = 0x12; break;
 24c:	d8 b9       	out	0x08, r29	; 8
 24e:	f1 cf       	rjmp	.-30     	; 0x232 <main+0x56>
			case '3': PORTC = 0x14; break;
 250:	18 b9       	out	0x08, r17	; 8
 252:	ef cf       	rjmp	.-34     	; 0x232 <main+0x56>
			case '4': PORTC = 0x21; break;
 254:	08 b9       	out	0x08, r16	; 8
 256:	ed cf       	rjmp	.-38     	; 0x232 <main+0x56>
			case '5': PORTC = 0x22; break;
 258:	f8 b8       	out	0x08, r15	; 8
 25a:	eb cf       	rjmp	.-42     	; 0x232 <main+0x56>
			case '6': PORTC = 0x24; break;
 25c:	e8 b8       	out	0x08, r14	; 8
 25e:	e9 cf       	rjmp	.-46     	; 0x232 <main+0x56>
			case '7': PORTC = 0x41; break;
 260:	d8 b8       	out	0x08, r13	; 8
 262:	e7 cf       	rjmp	.-50     	; 0x232 <main+0x56>
			case '8': PORTC = 0x42; break;
 264:	c8 b8       	out	0x08, r12	; 8
 266:	e5 cf       	rjmp	.-54     	; 0x232 <main+0x56>
			case '9': PORTC = 0x44; break;
 268:	b8 b8       	out	0x08, r11	; 8
 26a:	e3 cf       	rjmp	.-58     	; 0x232 <main+0x56>
			case '*': PORTC = 0x81; break;
 26c:	a8 b8       	out	0x08, r10	; 8
 26e:	e1 cf       	rjmp	.-62     	; 0x232 <main+0x56>
			case '0': PORTC = 0x82; break;
 270:	98 b8       	out	0x08, r9	; 8
 272:	df cf       	rjmp	.-66     	; 0x232 <main+0x56>
			case '#': PORTC = 0x84; break;
 274:	88 b8       	out	0x08, r8	; 8
 276:	dd cf       	rjmp	.-70     	; 0x232 <main+0x56>
			default: PORTC = 0x00; break; // Should never occur. Middle LED off.
 278:	18 b8       	out	0x08, r1	; 8
 27a:	db cf       	rjmp	.-74     	; 0x232 <main+0x56>

0000027c <__tablejump2__>:
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	00 24       	eor	r0, r0
 282:	00 1c       	adc	r0, r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	07 90       	elpm	r0, Z+
 288:	f6 91       	elpm	r31, Z
 28a:	e0 2d       	mov	r30, r0
 28c:	09 94       	ijmp

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
