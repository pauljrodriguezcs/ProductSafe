
ADC2NokiaDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000aa8  00000b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fb  0080012c  0080012c  00000b68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000161e  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b59  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8c  00000000  00000000  00002dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  0000388c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060d  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c31  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
   2:	00 00       	nop
   4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c1       	rjmp	.+636    	; 0x2a6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
  72:	00 00       	nop
  74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
  76:	00 00       	nop
  78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
  82:	00 00       	nop
  84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
  86:	00 00       	nop
  88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
	...

0000008c <CHARSET>:
  8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  9c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ac:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  bc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  cc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  dc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  ec:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  fc:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 10c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 11c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 12c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 13c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 14c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 15c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 16c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 17c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 18c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 19c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ac:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1bc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1cc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1dc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1ec:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1fc:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 20c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 21c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 22c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 24c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 25c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000026c <__ctors_end>:
 26c:	11 24       	eor	r1, r1
 26e:	1f be       	out	0x3f, r1	; 63
 270:	cf ef       	ldi	r28, 0xFF	; 255
 272:	d0 e4       	ldi	r29, 0x40	; 64
 274:	de bf       	out	0x3e, r29	; 62
 276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
 278:	11 e0       	ldi	r17, 0x01	; 1
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	e8 ea       	ldi	r30, 0xA8	; 168
 280:	fa e0       	ldi	r31, 0x0A	; 10
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	0b bf       	out	0x3b, r16	; 59
 286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
 288:	07 90       	elpm	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	ac 32       	cpi	r26, 0x2C	; 44
 28e:	b1 07       	cpc	r27, r17
 290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
 292:	23 e0       	ldi	r18, 0x03	; 3
 294:	ac e2       	ldi	r26, 0x2C	; 44
 296:	b1 e0       	ldi	r27, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
 29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
 29c:	a7 32       	cpi	r26, 0x27	; 39
 29e:	b2 07       	cpc	r27, r18
 2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
 2a2:	5a d0       	rcall	.+180    	; 0x358 <main>
 2a4:	ff c3       	rjmp	.+2046   	; 0xaa4 <_exit>

000002a6 <__bad_interrupt>:
 2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <HX711_setGain>:
// HX711 helper functions

unsigned char GAIN;

void HX711_setGain(unsigned char gain){
	switch(gain){
 2a8:	80 34       	cpi	r24, 0x40	; 64
 2aa:	69 f0       	breq	.+26     	; 0x2c6 <HX711_setGain+0x1e>
 2ac:	80 38       	cpi	r24, 0x80	; 128
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <HX711_setGain+0xe>
 2b0:	80 32       	cpi	r24, 0x20	; 32
 2b2:	69 f4       	brne	.+26     	; 0x2ce <HX711_setGain+0x26>
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <HX711_setGain+0x16>
		case 128:
			GAIN = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <GAIN>
			break;
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <HX711_setGain+0x2c>
			
		case 32:
			GAIN = 2;
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <GAIN>
			break;
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <HX711_setGain+0x2c>
			
		case 64:
			GAIN = 3;
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <GAIN>
			break;
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <HX711_setGain+0x2c>
			
		default:
			GAIN = 1;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <GAIN>
			break;
	}
	
	PORTB = 0x00; _NOP(); _NOP(); _NOP(); _NOP();
 2d4:	15 b8       	out	0x05, r1	; 5
	...
 2de:	08 95       	ret

000002e0 <HX711_isReady>:
}

unsigned char HX711_isReady(){
	if(PINA & 0x01){
 2e0:	80 b1       	in	r24, 0x00	; 0
	}
	
	else{
		return 0;
	}
}
 2e2:	81 70       	andi	r24, 0x01	; 1
 2e4:	08 95       	ret

000002e6 <HX711_read>:

int32_t HX711_read(){
	int32_t value = 0;
		
	while(!HX711_isReady()){ }
 2e6:	fc df       	rcall	.-8      	; 0x2e0 <HX711_isReady>
 2e8:	88 23       	and	r24, r24
 2ea:	e9 f3       	breq	.-6      	; 0x2e6 <HX711_read>
 2ec:	28 e1       	ldi	r18, 0x18	; 24
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	dc 01       	movw	r26, r24
	
	for(unsigned char i = 0; i < 24; i++){
		PORTB = 0xFF; _NOP(); _NOP(); _NOP(); _NOP(); _NOP();
 2f4:	3f ef       	ldi	r19, 0xFF	; 255
 2f6:	35 b9       	out	0x05, r19	; 5
	...
 300:	00 00       	nop
		value = value << 1;
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
		PORTB = 0x00; _NOP(); _NOP(); _NOP(); _NOP();
 30a:	15 b8       	out	0x05, r1	; 5
	...
		
		if(GetBit(PINA,0)){
 314:	00 9b       	sbis	0x00, 0	; 0
 316:	03 c0       	rjmp	.+6      	; 0x31e <HX711_read+0x38>
			value++;
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	a1 1d       	adc	r26, r1
 31c:	b1 1d       	adc	r27, r1
 31e:	21 50       	subi	r18, 0x01	; 1
int32_t HX711_read(){
	int32_t value = 0;
		
	while(!HX711_isReady()){ }
	
	for(unsigned char i = 0; i < 24; i++){
 320:	51 f7       	brne	.-44     	; 0x2f6 <HX711_read+0x10>
			value++;
		}
		
	}
	
	for(unsigned char i = 0; i < GAIN; i++){
 322:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <GAIN>
 326:	22 23       	and	r18, r18
 328:	91 f0       	breq	.+36     	; 0x34e <HX711_read+0x68>
 32a:	20 e0       	ldi	r18, 0x00	; 0
		PORTB = 0xFF; _NOP(); _NOP(); _NOP(); _NOP(); _NOP();
 32c:	4f ef       	ldi	r20, 0xFF	; 255
 32e:	45 b9       	out	0x05, r20	; 5
	...
 338:	00 00       	nop
		PORTB = 0x00; _NOP(); _NOP(); _NOP(); _NOP();
 33a:	15 b8       	out	0x05, r1	; 5
	...
			value++;
		}
		
	}
	
	for(unsigned char i = 0; i < GAIN; i++){
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <GAIN>
 34a:	23 17       	cp	r18, r19
 34c:	80 f3       	brcs	.-32     	; 0x32e <HX711_read+0x48>
		PORTB = 0x00; _NOP(); _NOP(); _NOP(); _NOP();
	}
	
	value = value ^ 0x80000;
	
	return value;
 34e:	bc 01       	movw	r22, r24
 350:	cd 01       	movw	r24, r26
 352:	28 e0       	ldi	r18, 0x08	; 8
 354:	82 27       	eor	r24, r18
}
 356:	08 95       	ret

00000358 <main>:


int main(void)
{
    DDRA = 0x00; PORTA = 0xFF;
 358:	11 b8       	out	0x01, r1	; 1
 35a:	cf ef       	ldi	r28, 0xFF	; 255
 35c:	c2 b9       	out	0x02, r28	; 2
    DDRB = 0xFF; PORTB = 0x00;
 35e:	c4 b9       	out	0x04, r28	; 4
 360:	15 b8       	out	0x05, r1	; 5
    DDRD = 0xFF; PORTD = 0x00;
 362:	ca b9       	out	0x0a, r28	; 10
 364:	1b b8       	out	0x0b, r1	; 11
    
    //adc_init();
    nokia_lcd_init();
 366:	0a d2       	rcall	.+1044   	; 0x77c <nokia_lcd_init>
	nokia_lcd_clear();
 368:	3f d2       	rcall	.+1150   	; 0x7e8 <nokia_lcd_clear>
 36a:	61 e0       	ldi	r22, 0x01	; 1
	nokia_lcd_write_string("Welcome",1);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	21 d3       	rcall	.+1602   	; 0x9b4 <nokia_lcd_write_string>
	nokia_lcd_render();
 372:	37 d3       	rcall	.+1646   	; 0x9e2 <nokia_lcd_render>
	
	nokia_lcd_set_cursor(0,10);
 374:	6a e0       	ldi	r22, 0x0A	; 10
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	2f d3       	rcall	.+1630   	; 0x9d8 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Reading...",1);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	88 e0       	ldi	r24, 0x08	; 8
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	19 d3       	rcall	.+1586   	; 0x9b4 <nokia_lcd_write_string>
 382:	2f d3       	rcall	.+1630   	; 0x9e2 <nokia_lcd_render>
	nokia_lcd_render();
 384:	15 b8       	out	0x05, r1	; 5
 386:	c5 b9       	out	0x05, r28	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	87 e1       	ldi	r24, 0x17	; 23
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x32>
 38e:	00 00       	nop
	PORTB = 0xFF;
	
	_delay_us(70);
	
	
	HX711_setGain(64);
 390:	80 e4       	ldi	r24, 0x40	; 64
 392:	8a df       	rcall	.-236    	; 0x2a8 <HX711_setGain>
    int32_t joystick_value = HX711_read();
 394:	a8 df       	rcall	.-176    	; 0x2e6 <HX711_read>
 396:	2b 01       	movw	r4, r22
	
	nokia_lcd_set_cursor(0,20);
 398:	3c 01       	movw	r6, r24
 39a:	64 e1       	ldi	r22, 0x14	; 20
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	1c d3       	rcall	.+1592   	; 0x9d8 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Done...",1);
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	83 e1       	ldi	r24, 0x13	; 19
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	06 d3       	rcall	.+1548   	; 0x9b4 <nokia_lcd_write_string>
 3a8:	1c d3       	rcall	.+1592   	; 0x9e2 <nokia_lcd_render>
	nokia_lcd_render();
 3aa:	1e d2       	rcall	.+1084   	; 0x7e8 <nokia_lcd_clear>
 3ac:	91 e8       	ldi	r25, 0x81	; 129
    unsigned char thousands = 0;
    unsigned char hundreds = 0;
    unsigned char tens = 0;
    unsigned char ones = 0;
    
    nokia_lcd_clear();
 3ae:	49 16       	cp	r4, r25
 3b0:	96 e9       	ldi	r25, 0x96	; 150
    
	if(joystick_value > 10000000){
 3b2:	59 06       	cpc	r5, r25
 3b4:	98 e9       	ldi	r25, 0x98	; 152
 3b6:	69 06       	cpc	r6, r25
 3b8:	71 04       	cpc	r7, r1
 3ba:	6c f0       	brlt	.+26     	; 0x3d6 <main+0x7e>
 3bc:	c3 01       	movw	r24, r6
 3be:	b2 01       	movw	r22, r4
		ten_millions = joystick_value / 10000000;
 3c0:	20 e8       	ldi	r18, 0x80	; 128
 3c2:	36 e9       	ldi	r19, 0x96	; 150
 3c4:	48 e9       	ldi	r20, 0x98	; 152
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	2f d3       	rcall	.+1630   	; 0xa28 <__divmodsi4>
 3ca:	d2 2e       	mov	r13, r18
 3cc:	46 2e       	mov	r4, r22
 3ce:	57 2e       	mov	r5, r23
 3d0:	68 2e       	mov	r6, r24
		joystick_value = joystick_value % 10000000;
 3d2:	79 2e       	mov	r7, r25
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <main+0x80>
 3d6:	d1 2c       	mov	r13, r1
 3d8:	81 e4       	ldi	r24, 0x41	; 65
 3da:	48 16       	cp	r4, r24
	nokia_lcd_write_string("Done...",1);
	nokia_lcd_render();
	
    int32_t new_joy_value;
	
	unsigned char ten_millions = 0;
 3dc:	82 e4       	ldi	r24, 0x42	; 66
	if(joystick_value > 10000000){
		ten_millions = joystick_value / 10000000;
		joystick_value = joystick_value % 10000000;
	}
	
	if(joystick_value > 1000000){
 3de:	58 06       	cpc	r5, r24
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	68 06       	cpc	r6, r24
 3e4:	71 04       	cpc	r7, r1
 3e6:	6c f0       	brlt	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e8:	c3 01       	movw	r24, r6
 3ea:	b2 01       	movw	r22, r4
		millions = joystick_value / 1000000;
 3ec:	20 e4       	ldi	r18, 0x40	; 64
 3ee:	32 e4       	ldi	r19, 0x42	; 66
 3f0:	4f e0       	ldi	r20, 0x0F	; 15
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	19 d3       	rcall	.+1586   	; 0xa28 <__divmodsi4>
 3f6:	e2 2e       	mov	r14, r18
 3f8:	46 2e       	mov	r4, r22
 3fa:	57 2e       	mov	r5, r23
 3fc:	68 2e       	mov	r6, r24
		joystick_value = joystick_value % 1000000;
 3fe:	79 2e       	mov	r7, r25
 400:	01 c0       	rjmp	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	e1 2c       	mov	r14, r1
 404:	91 ea       	ldi	r25, 0xA1	; 161
 406:	49 16       	cp	r4, r25
	}
	
	if(joystick_value > 100000){
 408:	96 e8       	ldi	r25, 0x86	; 134
 40a:	59 06       	cpc	r5, r25
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	69 06       	cpc	r6, r25
 410:	71 04       	cpc	r7, r1
 412:	6c f0       	brlt	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 414:	c3 01       	movw	r24, r6
 416:	b2 01       	movw	r22, r4
		hundred_thousands = joystick_value / 100000;
 418:	20 ea       	ldi	r18, 0xA0	; 160
 41a:	36 e8       	ldi	r19, 0x86	; 134
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	03 d3       	rcall	.+1542   	; 0xa28 <__divmodsi4>
 422:	f2 2e       	mov	r15, r18
 424:	46 2e       	mov	r4, r22
 426:	57 2e       	mov	r5, r23
 428:	68 2e       	mov	r6, r24
		joystick_value = joystick_value % 100000;
 42a:	79 2e       	mov	r7, r25
 42c:	01 c0       	rjmp	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	f1 2c       	mov	r15, r1
 430:	81 e1       	ldi	r24, 0x11	; 17
	
    int32_t new_joy_value;
	
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
 432:	48 16       	cp	r4, r24
	if(joystick_value > 100000){
		hundred_thousands = joystick_value / 100000;
		joystick_value = joystick_value % 100000;
	}
	
	if(joystick_value > 10000){
 434:	87 e2       	ldi	r24, 0x27	; 39
 436:	58 06       	cpc	r5, r24
 438:	61 04       	cpc	r6, r1
 43a:	71 04       	cpc	r7, r1
 43c:	6c f0       	brlt	.+26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 43e:	c3 01       	movw	r24, r6
 440:	b2 01       	movw	r22, r4
		ten_thousands = joystick_value / 10000;
 442:	20 e1       	ldi	r18, 0x10	; 16
 444:	37 e2       	ldi	r19, 0x27	; 39
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	ee d2       	rcall	.+1500   	; 0xa28 <__divmodsi4>
 44c:	02 2f       	mov	r16, r18
 44e:	46 2e       	mov	r4, r22
 450:	57 2e       	mov	r5, r23
 452:	68 2e       	mov	r6, r24
		joystick_value = joystick_value % 10000;
 454:	79 2e       	mov	r7, r25
 456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	00 e0       	ldi	r16, 0x00	; 0
 45a:	99 ee       	ldi	r25, 0xE9	; 233
    int32_t new_joy_value;
	
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
	unsigned char ten_thousands = 0;
 45c:	49 16       	cp	r4, r25
	if(joystick_value > 10000){
		ten_thousands = joystick_value / 10000;
		joystick_value = joystick_value % 10000;
	}
	
    if(joystick_value > 1000){
 45e:	93 e0       	ldi	r25, 0x03	; 3
 460:	59 06       	cpc	r5, r25
 462:	61 04       	cpc	r6, r1
 464:	71 04       	cpc	r7, r1
 466:	6c f0       	brlt	.+26     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 468:	c3 01       	movw	r24, r6
 46a:	b2 01       	movw	r22, r4
	    thousands = joystick_value / 1000;
 46c:	28 ee       	ldi	r18, 0xE8	; 232
 46e:	33 e0       	ldi	r19, 0x03	; 3
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	d9 d2       	rcall	.+1458   	; 0xa28 <__divmodsi4>
 476:	12 2f       	mov	r17, r18
 478:	46 2e       	mov	r4, r22
 47a:	57 2e       	mov	r5, r23
 47c:	68 2e       	mov	r6, r24
	    joystick_value = joystick_value % 1000;
 47e:	79 2e       	mov	r7, r25
 480:	01 c0       	rjmp	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	85 e6       	ldi	r24, 0x65	; 101
	
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
	unsigned char ten_thousands = 0;
    unsigned char thousands = 0;
 486:	48 16       	cp	r4, r24
    if(joystick_value > 1000){
	    thousands = joystick_value / 1000;
	    joystick_value = joystick_value % 1000;
    }
    
    if(joystick_value > 100){
 488:	51 04       	cpc	r5, r1
 48a:	61 04       	cpc	r6, r1
 48c:	71 04       	cpc	r7, r1
 48e:	6c f0       	brlt	.+26     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 490:	c3 01       	movw	r24, r6
 492:	b2 01       	movw	r22, r4
	    hundreds = joystick_value / 100;
 494:	24 e6       	ldi	r18, 0x64	; 100
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	50 e0       	ldi	r21, 0x00	; 0
 49c:	c5 d2       	rcall	.+1418   	; 0xa28 <__divmodsi4>
 49e:	d2 2f       	mov	r29, r18
 4a0:	46 2e       	mov	r4, r22
 4a2:	57 2e       	mov	r5, r23
	    joystick_value = joystick_value % 100;
 4a4:	68 2e       	mov	r6, r24
 4a6:	79 2e       	mov	r7, r25
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	9b e0       	ldi	r25, 0x0B	; 11
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
	unsigned char ten_thousands = 0;
    unsigned char thousands = 0;
    unsigned char hundreds = 0;
 4ae:	49 16       	cp	r4, r25
    if(joystick_value > 100){
	    hundreds = joystick_value / 100;
	    joystick_value = joystick_value % 100;
    }
    
    if(joystick_value > 10){
 4b0:	51 04       	cpc	r5, r1
 4b2:	61 04       	cpc	r6, r1
 4b4:	71 04       	cpc	r7, r1
 4b6:	6c f0       	brlt	.+26     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4b8:	c3 01       	movw	r24, r6
	    tens = joystick_value / 10;
 4ba:	b2 01       	movw	r22, r4
 4bc:	2a e0       	ldi	r18, 0x0A	; 10
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	b1 d2       	rcall	.+1378   	; 0xa28 <__divmodsi4>
 4c6:	c2 2f       	mov	r28, r18
	    joystick_value = joystick_value % 10;
 4c8:	46 2e       	mov	r4, r22
 4ca:	57 2e       	mov	r5, r23
 4cc:	68 2e       	mov	r6, r24
 4ce:	79 2e       	mov	r7, r25
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
	unsigned char ten_thousands = 0;
    unsigned char thousands = 0;
    unsigned char hundreds = 0;
    unsigned char tens = 0;
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
    if(joystick_value > 10){
	    tens = joystick_value / 10;
	    joystick_value = joystick_value % 10;
    }
    
	nokia_lcd_write_char(ten_millions + '0', 1);
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	80 e3       	ldi	r24, 0x30	; 48
 4d8:	8d 0d       	add	r24, r13
	nokia_lcd_set_cursor(6,0);
 4da:	c2 d1       	rcall	.+900    	; 0x860 <nokia_lcd_write_char>
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	86 e0       	ldi	r24, 0x06	; 6
	nokia_lcd_write_char(millions + '0', 1);
 4e0:	7b d2       	rcall	.+1270   	; 0x9d8 <nokia_lcd_set_cursor>
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	80 e3       	ldi	r24, 0x30	; 48
 4e6:	8e 0d       	add	r24, r14
	
	nokia_lcd_set_cursor(14,0);
 4e8:	bb d1       	rcall	.+886    	; 0x860 <nokia_lcd_write_char>
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	8e e0       	ldi	r24, 0x0E	; 14
	nokia_lcd_write_char(hundred_thousands + '0', 1);
 4ee:	74 d2       	rcall	.+1256   	; 0x9d8 <nokia_lcd_set_cursor>
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	80 e3       	ldi	r24, 0x30	; 48
	nokia_lcd_set_cursor(20,0);
 4f4:	8f 0d       	add	r24, r15
 4f6:	b4 d1       	rcall	.+872    	; 0x860 <nokia_lcd_write_char>
 4f8:	60 e0       	ldi	r22, 0x00	; 0
	nokia_lcd_write_char(ten_thousands + '0', 1);
 4fa:	84 e1       	ldi	r24, 0x14	; 20
 4fc:	6d d2       	rcall	.+1242   	; 0x9d8 <nokia_lcd_set_cursor>
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	80 e3       	ldi	r24, 0x30	; 48
	nokia_lcd_set_cursor(26,0);
 502:	80 0f       	add	r24, r16
 504:	ad d1       	rcall	.+858    	; 0x860 <nokia_lcd_write_char>
 506:	60 e0       	ldi	r22, 0x00	; 0
	nokia_lcd_write_char(thousands + '0', 1);
 508:	8a e1       	ldi	r24, 0x1A	; 26
 50a:	66 d2       	rcall	.+1228   	; 0x9d8 <nokia_lcd_set_cursor>
 50c:	61 e0       	ldi	r22, 0x01	; 1
	
    nokia_lcd_set_cursor(34,0);
 50e:	80 e3       	ldi	r24, 0x30	; 48
 510:	81 0f       	add	r24, r17
 512:	a6 d1       	rcall	.+844    	; 0x860 <nokia_lcd_write_char>
 514:	60 e0       	ldi	r22, 0x00	; 0
    nokia_lcd_write_char(hundreds + '0', 1);
 516:	82 e2       	ldi	r24, 0x22	; 34
 518:	5f d2       	rcall	.+1214   	; 0x9d8 <nokia_lcd_set_cursor>
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	8d 0f       	add	r24, r29
    nokia_lcd_set_cursor(40,0);
 520:	9f d1       	rcall	.+830    	; 0x860 <nokia_lcd_write_char>
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	88 e2       	ldi	r24, 0x28	; 40
 526:	58 d2       	rcall	.+1200   	; 0x9d8 <nokia_lcd_set_cursor>
    nokia_lcd_write_char(tens + '0', 1);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	80 e3       	ldi	r24, 0x30	; 48
 52c:	8c 0f       	add	r24, r28
 52e:	98 d1       	rcall	.+816    	; 0x860 <nokia_lcd_write_char>
    nokia_lcd_set_cursor(46,0);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	8e e2       	ldi	r24, 0x2E	; 46
 534:	51 d2       	rcall	.+1186   	; 0x9d8 <nokia_lcd_set_cursor>
 536:	61 e0       	ldi	r22, 0x01	; 1
    nokia_lcd_write_char(ones + '0', 1);
 538:	80 e3       	ldi	r24, 0x30	; 48
 53a:	92 d1       	rcall	.+804    	; 0x860 <nokia_lcd_write_char>
 53c:	6e e1       	ldi	r22, 0x1E	; 30
 53e:	80 e0       	ldi	r24, 0x00	; 0
	nokia_lcd_set_cursor(0,30);
 540:	4b d2       	rcall	.+1174   	; 0x9d8 <nokia_lcd_set_cursor>
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	8b e1       	ldi	r24, 0x1B	; 27
 546:	91 e0       	ldi	r25, 0x01	; 1
	nokia_lcd_write_string("Old Val", 1);
 548:	35 d2       	rcall	.+1130   	; 0x9b4 <nokia_lcd_write_string>
 54a:	4b d2       	rcall	.+1174   	; 0x9e2 <nokia_lcd_render>
 54c:	8f e4       	ldi	r24, 0x4F	; 79
 54e:	93 ec       	ldi	r25, 0xC3	; 195
 550:	01 97       	sbiw	r24, 0x01	; 1
	
    nokia_lcd_render();
 552:	f1 f7       	brne	.-4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 554:	00 c0       	rjmp	.+0      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 556:	00 00       	nop
 558:	88 24       	eor	r8, r8
 55a:	8a 94       	dec	r8
 55c:	15 b8       	out	0x05, r1	; 5
 55e:	85 b8       	out	0x05, r8	; 5
	_delay_ms(200);
	
    while (1)
    {
		PORTB = 0x00;
		PORTB = 0xFF;
 560:	97 e1       	ldi	r25, 0x17	; 23
 562:	9a 95       	dec	r25
	
	_delay_ms(200);
	
    while (1)
    {
		PORTB = 0x00;
 564:	f1 f7       	brne	.-4      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		PORTB = 0xFF;
 566:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 568:	15 b8       	out	0x05, r1	; 5
 56a:	bd de       	rcall	.-646    	; 0x2e6 <HX711_read>
 56c:	6b 01       	movw	r12, r22
 56e:	7c 01       	movw	r14, r24
		
		_delay_us(70);
		
		PORTB = 0x00;
 570:	46 16       	cp	r4, r22
		
	    new_joy_value = HX711_read();
 572:	57 06       	cpc	r5, r23
 574:	68 06       	cpc	r6, r24
 576:	79 06       	cpc	r7, r25
 578:	09 f4       	brne	.+2      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
	    
	    if(new_joy_value != joystick_value){
 57a:	d4 c0       	rjmp	.+424    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 57c:	81 e8       	ldi	r24, 0x81	; 129
 57e:	c8 16       	cp	r12, r24
 580:	86 e9       	ldi	r24, 0x96	; 150
 582:	d8 06       	cpc	r13, r24
		    tens = 0;
		    ones = 0;
		    
		    joystick_value = new_joy_value;
		    
		    if(joystick_value > 10000000){
 584:	88 e9       	ldi	r24, 0x98	; 152
 586:	e8 06       	cpc	r14, r24
 588:	f1 04       	cpc	r15, r1
 58a:	6c f0       	brlt	.+26     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 58c:	c7 01       	movw	r24, r14
 58e:	b6 01       	movw	r22, r12
 590:	20 e8       	ldi	r18, 0x80	; 128
 592:	36 e9       	ldi	r19, 0x96	; 150
			    ten_millions = joystick_value / 10000000;
 594:	48 e9       	ldi	r20, 0x98	; 152
 596:	50 e0       	ldi	r21, 0x00	; 0
 598:	47 d2       	rcall	.+1166   	; 0xa28 <__divmodsi4>
 59a:	92 2e       	mov	r9, r18
 59c:	c6 2e       	mov	r12, r22
 59e:	d7 2e       	mov	r13, r23
 5a0:	e8 2e       	mov	r14, r24
 5a2:	f9 2e       	mov	r15, r25
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			    joystick_value = joystick_value % 10000000;
 5a6:	91 2c       	mov	r9, r1
 5a8:	91 e4       	ldi	r25, 0x41	; 65
 5aa:	c9 16       	cp	r12, r25
 5ac:	92 e4       	ldi	r25, 0x42	; 66
		PORTB = 0x00;
		
	    new_joy_value = HX711_read();
	    
	    if(new_joy_value != joystick_value){
			ten_millions = 0;
 5ae:	d9 06       	cpc	r13, r25
		    if(joystick_value > 10000000){
			    ten_millions = joystick_value / 10000000;
			    joystick_value = joystick_value % 10000000;
		    }
		    
		    if(joystick_value > 1000000){
 5b0:	9f e0       	ldi	r25, 0x0F	; 15
 5b2:	e9 06       	cpc	r14, r25
 5b4:	f1 04       	cpc	r15, r1
 5b6:	6c f0       	brlt	.+26     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5b8:	c7 01       	movw	r24, r14
 5ba:	b6 01       	movw	r22, r12
 5bc:	20 e4       	ldi	r18, 0x40	; 64
 5be:	32 e4       	ldi	r19, 0x42	; 66
			    millions = joystick_value / 1000000;
 5c0:	4f e0       	ldi	r20, 0x0F	; 15
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	31 d2       	rcall	.+1122   	; 0xa28 <__divmodsi4>
 5c6:	a2 2e       	mov	r10, r18
 5c8:	c6 2e       	mov	r12, r22
 5ca:	d7 2e       	mov	r13, r23
 5cc:	e8 2e       	mov	r14, r24
 5ce:	f9 2e       	mov	r15, r25
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
			    joystick_value = joystick_value % 1000000;
 5d2:	a1 2c       	mov	r10, r1
 5d4:	81 ea       	ldi	r24, 0xA1	; 161
 5d6:	c8 16       	cp	r12, r24
 5d8:	86 e8       	ldi	r24, 0x86	; 134
		
	    new_joy_value = HX711_read();
	    
	    if(new_joy_value != joystick_value){
			ten_millions = 0;
			millions = 0;
 5da:	d8 06       	cpc	r13, r24
		    if(joystick_value > 1000000){
			    millions = joystick_value / 1000000;
			    joystick_value = joystick_value % 1000000;
		    }
		    
		    if(joystick_value > 100000){
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	e8 06       	cpc	r14, r24
 5e0:	f1 04       	cpc	r15, r1
 5e2:	6c f0       	brlt	.+26     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5e4:	c7 01       	movw	r24, r14
 5e6:	b6 01       	movw	r22, r12
 5e8:	20 ea       	ldi	r18, 0xA0	; 160
 5ea:	36 e8       	ldi	r19, 0x86	; 134
			    hundred_thousands = joystick_value / 100000;
 5ec:	41 e0       	ldi	r20, 0x01	; 1
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	1b d2       	rcall	.+1078   	; 0xa28 <__divmodsi4>
 5f2:	b2 2e       	mov	r11, r18
 5f4:	c6 2e       	mov	r12, r22
 5f6:	d7 2e       	mov	r13, r23
 5f8:	e8 2e       	mov	r14, r24
 5fa:	f9 2e       	mov	r15, r25
			    joystick_value = joystick_value % 100000;
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5fe:	b1 2c       	mov	r11, r1
 600:	91 e1       	ldi	r25, 0x11	; 17
 602:	c9 16       	cp	r12, r25
 604:	97 e2       	ldi	r25, 0x27	; 39
	    new_joy_value = HX711_read();
	    
	    if(new_joy_value != joystick_value){
			ten_millions = 0;
			millions = 0;
			hundred_thousands = 0;
 606:	d9 06       	cpc	r13, r25
		    if(joystick_value > 100000){
			    hundred_thousands = joystick_value / 100000;
			    joystick_value = joystick_value % 100000;
		    }
		    
		    if(joystick_value > 10000){
 608:	e1 04       	cpc	r14, r1
 60a:	f1 04       	cpc	r15, r1
 60c:	6c f0       	brlt	.+26     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 60e:	c7 01       	movw	r24, r14
 610:	b6 01       	movw	r22, r12
 612:	20 e1       	ldi	r18, 0x10	; 16
 614:	37 e2       	ldi	r19, 0x27	; 39
			    ten_thousands = joystick_value / 10000;
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	06 d2       	rcall	.+1036   	; 0xa28 <__divmodsi4>
 61c:	02 2f       	mov	r16, r18
 61e:	c6 2e       	mov	r12, r22
 620:	d7 2e       	mov	r13, r23
 622:	e8 2e       	mov	r14, r24
 624:	f9 2e       	mov	r15, r25
			    joystick_value = joystick_value % 10000;
 626:	01 c0       	rjmp	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 628:	00 e0       	ldi	r16, 0x00	; 0
 62a:	89 ee       	ldi	r24, 0xE9	; 233
 62c:	c8 16       	cp	r12, r24
 62e:	83 e0       	ldi	r24, 0x03	; 3
	    
	    if(new_joy_value != joystick_value){
			ten_millions = 0;
			millions = 0;
			hundred_thousands = 0;
			ten_thousands = 0;
 630:	d8 06       	cpc	r13, r24
		    if(joystick_value > 10000){
			    ten_thousands = joystick_value / 10000;
			    joystick_value = joystick_value % 10000;
		    }
		    
		    if(joystick_value > 1000){
 632:	e1 04       	cpc	r14, r1
 634:	f1 04       	cpc	r15, r1
 636:	6c f0       	brlt	.+26     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 638:	c7 01       	movw	r24, r14
 63a:	b6 01       	movw	r22, r12
 63c:	28 ee       	ldi	r18, 0xE8	; 232
 63e:	33 e0       	ldi	r19, 0x03	; 3
			    thousands = joystick_value / 1000;
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	50 e0       	ldi	r21, 0x00	; 0
 644:	f1 d1       	rcall	.+994    	; 0xa28 <__divmodsi4>
 646:	12 2f       	mov	r17, r18
 648:	c6 2e       	mov	r12, r22
 64a:	d7 2e       	mov	r13, r23
 64c:	e8 2e       	mov	r14, r24
 64e:	f9 2e       	mov	r15, r25
			    joystick_value = joystick_value % 1000;
 650:	01 c0       	rjmp	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	95 e6       	ldi	r25, 0x65	; 101
 656:	c9 16       	cp	r12, r25
	    if(new_joy_value != joystick_value){
			ten_millions = 0;
			millions = 0;
			hundred_thousands = 0;
			ten_thousands = 0;
		    thousands = 0;
 658:	d1 04       	cpc	r13, r1
		    if(joystick_value > 1000){
			    thousands = joystick_value / 1000;
			    joystick_value = joystick_value % 1000;
		    }
		    
		    if(joystick_value > 100){
 65a:	e1 04       	cpc	r14, r1
 65c:	f1 04       	cpc	r15, r1
 65e:	6c f0       	brlt	.+26     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 660:	c7 01       	movw	r24, r14
			    hundreds = joystick_value / 100;
 662:	b6 01       	movw	r22, r12
 664:	24 e6       	ldi	r18, 0x64	; 100
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	40 e0       	ldi	r20, 0x00	; 0
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	dd d1       	rcall	.+954    	; 0xa28 <__divmodsi4>
 66e:	d2 2f       	mov	r29, r18
			    joystick_value = joystick_value % 100;
 670:	c6 2e       	mov	r12, r22
 672:	d7 2e       	mov	r13, r23
 674:	e8 2e       	mov	r14, r24
 676:	f9 2e       	mov	r15, r25
			ten_millions = 0;
			millions = 0;
			hundred_thousands = 0;
			ten_thousands = 0;
		    thousands = 0;
		    hundreds = 0;
 678:	01 c0       	rjmp	.+2      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
		    if(joystick_value > 100){
			    hundreds = joystick_value / 100;
			    joystick_value = joystick_value % 100;
		    }
		    
		    if(joystick_value > 10){
 67a:	d0 e0       	ldi	r29, 0x00	; 0
 67c:	8b e0       	ldi	r24, 0x0B	; 11
 67e:	c8 16       	cp	r12, r24
 680:	d1 04       	cpc	r13, r1
			    tens = joystick_value / 10;
 682:	e1 04       	cpc	r14, r1
 684:	f1 04       	cpc	r15, r1
 686:	6c f0       	brlt	.+26     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 688:	c7 01       	movw	r24, r14
 68a:	b6 01       	movw	r22, r12
 68c:	2a e0       	ldi	r18, 0x0A	; 10
 68e:	30 e0       	ldi	r19, 0x00	; 0
			    joystick_value = joystick_value % 10;
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	c9 d1       	rcall	.+914    	; 0xa28 <__divmodsi4>
 696:	c2 2f       	mov	r28, r18
			millions = 0;
			hundred_thousands = 0;
			ten_thousands = 0;
		    thousands = 0;
		    hundreds = 0;
		    tens = 0;
 698:	c6 2e       	mov	r12, r22
		    if(joystick_value > 10){
			    tens = joystick_value / 10;
			    joystick_value = joystick_value % 10;
		    }
		    
			nokia_lcd_clear();
 69a:	d7 2e       	mov	r13, r23
		    nokia_lcd_write_char(ten_millions + '0', 1);
 69c:	e8 2e       	mov	r14, r24
 69e:	f9 2e       	mov	r15, r25
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6a2:	c0 e0       	ldi	r28, 0x00	; 0
		    nokia_lcd_set_cursor(6,0);
 6a4:	a1 d0       	rcall	.+322    	; 0x7e8 <nokia_lcd_clear>
 6a6:	61 e0       	ldi	r22, 0x01	; 1
 6a8:	80 e3       	ldi	r24, 0x30	; 48
		    nokia_lcd_write_char(millions + '0', 1);
 6aa:	89 0d       	add	r24, r9
 6ac:	d9 d0       	rcall	.+434    	; 0x860 <nokia_lcd_write_char>
 6ae:	60 e0       	ldi	r22, 0x00	; 0
		    
		    nokia_lcd_set_cursor(14,0);
 6b0:	86 e0       	ldi	r24, 0x06	; 6
 6b2:	92 d1       	rcall	.+804    	; 0x9d8 <nokia_lcd_set_cursor>
 6b4:	61 e0       	ldi	r22, 0x01	; 1
 6b6:	80 e3       	ldi	r24, 0x30	; 48
		    nokia_lcd_write_char(hundred_thousands + '0', 1);
 6b8:	8a 0d       	add	r24, r10
 6ba:	d2 d0       	rcall	.+420    	; 0x860 <nokia_lcd_write_char>
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	8e e0       	ldi	r24, 0x0E	; 14
		    nokia_lcd_set_cursor(20,0);
 6c0:	8b d1       	rcall	.+790    	; 0x9d8 <nokia_lcd_set_cursor>
 6c2:	61 e0       	ldi	r22, 0x01	; 1
		    nokia_lcd_write_char(ten_thousands + '0', 1);
 6c4:	80 e3       	ldi	r24, 0x30	; 48
 6c6:	8b 0d       	add	r24, r11
 6c8:	cb d0       	rcall	.+406    	; 0x860 <nokia_lcd_write_char>
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	84 e1       	ldi	r24, 0x14	; 20
		    nokia_lcd_set_cursor(26,0);
 6ce:	84 d1       	rcall	.+776    	; 0x9d8 <nokia_lcd_set_cursor>
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	80 e3       	ldi	r24, 0x30	; 48
 6d4:	80 0f       	add	r24, r16
		    nokia_lcd_write_char(thousands + '0', 1);
 6d6:	c4 d0       	rcall	.+392    	; 0x860 <nokia_lcd_write_char>
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	8a e1       	ldi	r24, 0x1A	; 26
 6dc:	7d d1       	rcall	.+762    	; 0x9d8 <nokia_lcd_set_cursor>
 6de:	61 e0       	ldi	r22, 0x01	; 1
		    
		    nokia_lcd_set_cursor(34,0);
 6e0:	80 e3       	ldi	r24, 0x30	; 48
 6e2:	81 0f       	add	r24, r17
 6e4:	bd d0       	rcall	.+378    	; 0x860 <nokia_lcd_write_char>
 6e6:	60 e0       	ldi	r22, 0x00	; 0
		    nokia_lcd_write_char(hundreds + '0', 1);
 6e8:	82 e2       	ldi	r24, 0x22	; 34
 6ea:	76 d1       	rcall	.+748    	; 0x9d8 <nokia_lcd_set_cursor>
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	80 e3       	ldi	r24, 0x30	; 48
 6f0:	8d 0f       	add	r24, r29
		    nokia_lcd_set_cursor(40,0);
 6f2:	b6 d0       	rcall	.+364    	; 0x860 <nokia_lcd_write_char>
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	88 e2       	ldi	r24, 0x28	; 40
 6f8:	6f d1       	rcall	.+734    	; 0x9d8 <nokia_lcd_set_cursor>
		    nokia_lcd_write_char(tens + '0', 1);
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	80 e3       	ldi	r24, 0x30	; 48
 6fe:	8c 0f       	add	r24, r28
 700:	af d0       	rcall	.+350    	; 0x860 <nokia_lcd_write_char>
 702:	60 e0       	ldi	r22, 0x00	; 0
		    nokia_lcd_set_cursor(46,0);
 704:	8e e2       	ldi	r24, 0x2E	; 46
 706:	68 d1       	rcall	.+720    	; 0x9d8 <nokia_lcd_set_cursor>
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	80 e3       	ldi	r24, 0x30	; 48
		    nokia_lcd_write_char(ones + '0', 1);
 70c:	a9 d0       	rcall	.+338    	; 0x860 <nokia_lcd_write_char>
 70e:	6e e1       	ldi	r22, 0x1E	; 30
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	62 d1       	rcall	.+708    	; 0x9d8 <nokia_lcd_set_cursor>
			nokia_lcd_set_cursor(0, 30);
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	83 e2       	ldi	r24, 0x23	; 35
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	4c d1       	rcall	.+664    	; 0x9b4 <nokia_lcd_write_string>
			nokia_lcd_write_string("New Val", 1);
 71c:	62 d1       	rcall	.+708    	; 0x9e2 <nokia_lcd_render>
 71e:	26 01       	movw	r4, r12
 720:	37 01       	movw	r6, r14
 722:	02 c0       	rjmp	.+4      	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 724:	2b 01       	movw	r4, r22
		    nokia_lcd_render();
 726:	3c 01       	movw	r6, r24
 728:	6e e1       	ldi	r22, 0x1E	; 30
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	55 d1       	rcall	.+682    	; 0x9d8 <nokia_lcd_set_cursor>
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	8b e1       	ldi	r24, 0x1B	; 27
 732:	91 e0       	ldi	r25, 0x01	; 1
		
	    }
		
		nokia_lcd_set_cursor(0, 30);
 734:	3f d1       	rcall	.+638    	; 0x9b4 <nokia_lcd_write_string>
 736:	55 d1       	rcall	.+682    	; 0x9e2 <nokia_lcd_render>
 738:	11 cf       	rjmp	.-478    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>

0000073a <write>:
 73a:	59 98       	cbi	0x0b, 1	; 11
		nokia_lcd_write_string("Old Val", 1);
 73c:	66 23       	and	r22, r22
 73e:	11 f0       	breq	.+4      	; 0x744 <write+0xa>
 740:	5b 9a       	sbi	0x0b, 3	; 11
 742:	15 c0       	rjmp	.+42     	; 0x76e <write+0x34>
 744:	5b 98       	cbi	0x0b, 3	; 11
		nokia_lcd_render();
 746:	13 c0       	rjmp	.+38     	; 0x76e <write+0x34>
 748:	ac 01       	movw	r20, r24
    }
 74a:	02 2e       	mov	r0, r18
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 74c:	02 c0       	rjmp	.+4      	; 0x752 <write+0x18>
 74e:	55 95       	asr	r21
 750:	47 95       	ror	r20
 752:	0a 94       	dec	r0
 754:	e2 f7       	brpl	.-8      	; 0x74e <write+0x14>
 756:	40 ff       	sbrs	r20, 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <write+0x24>
 75a:	5c 9a       	sbi	0x0b, 4	; 11
 75c:	01 c0       	rjmp	.+2      	; 0x760 <write+0x26>
 75e:	5c 98       	cbi	0x0b, 4	; 11
 760:	5d 9a       	sbi	0x0b, 5	; 11
 762:	5d 98       	cbi	0x0b, 5	; 11
 764:	21 50       	subi	r18, 0x01	; 1
 766:	31 09       	sbc	r19, r1
 768:	78 f7       	brcc	.-34     	; 0x748 <write+0xe>
 76a:	59 9a       	sbi	0x0b, 1	; 11
 76c:	08 95       	ret
 76e:	27 e0       	ldi	r18, 0x07	; 7
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	e9 cf       	rjmp	.-46     	; 0x748 <write+0xe>

00000776 <write_cmd>:
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	e0 cf       	rjmp	.-64     	; 0x73a <write>
 77a:	08 95       	ret

0000077c <nokia_lcd_init>:
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	51 9a       	sbi	0x0a, 1	; 10
 782:	52 9a       	sbi	0x0a, 2	; 10
 784:	53 9a       	sbi	0x0a, 3	; 10
 786:	54 9a       	sbi	0x0a, 4	; 10
 788:	55 9a       	sbi	0x0a, 5	; 10
 78a:	5a 9a       	sbi	0x0b, 2	; 11
 78c:	59 9a       	sbi	0x0b, 1	; 11
 78e:	83 ec       	ldi	r24, 0xC3	; 195
 790:	99 e0       	ldi	r25, 0x09	; 9
 792:	01 97       	sbiw	r24, 0x01	; 1
 794:	f1 f7       	brne	.-4      	; 0x792 <nokia_lcd_init+0x16>
 796:	00 c0       	rjmp	.+0      	; 0x798 <nokia_lcd_init+0x1c>
 798:	00 00       	nop
 79a:	5a 98       	cbi	0x0b, 2	; 11
 79c:	8b e5       	ldi	r24, 0x5B	; 91
 79e:	94 e4       	ldi	r25, 0x44	; 68
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <nokia_lcd_init+0x24>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <nokia_lcd_init+0x2a>
 7a6:	00 00       	nop
 7a8:	5a 9a       	sbi	0x0b, 2	; 11
 7aa:	59 98       	cbi	0x0b, 1	; 11
 7ac:	81 e2       	ldi	r24, 0x21	; 33
 7ae:	e3 df       	rcall	.-58     	; 0x776 <write_cmd>
 7b0:	83 e1       	ldi	r24, 0x13	; 19
 7b2:	e1 df       	rcall	.-62     	; 0x776 <write_cmd>
 7b4:	86 e0       	ldi	r24, 0x06	; 6
 7b6:	df df       	rcall	.-66     	; 0x776 <write_cmd>
 7b8:	82 ec       	ldi	r24, 0xC2	; 194
 7ba:	dd df       	rcall	.-70     	; 0x776 <write_cmd>
 7bc:	80 e2       	ldi	r24, 0x20	; 32
 7be:	db df       	rcall	.-74     	; 0x776 <write_cmd>
 7c0:	89 e0       	ldi	r24, 0x09	; 9
 7c2:	d9 df       	rcall	.-78     	; 0x776 <write_cmd>
 7c4:	80 e8       	ldi	r24, 0x80	; 128
 7c6:	d7 df       	rcall	.-82     	; 0x776 <write_cmd>
 7c8:	80 e4       	ldi	r24, 0x40	; 64
 7ca:	d5 df       	rcall	.-86     	; 0x776 <write_cmd>
 7cc:	c8 ef       	ldi	r28, 0xF8	; 248
 7ce:	d1 e0       	ldi	r29, 0x01	; 1
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	b2 df       	rcall	.-156    	; 0x73a <write>
 7d6:	21 97       	sbiw	r28, 0x01	; 1
 7d8:	d9 f7       	brne	.-10     	; 0x7d0 <nokia_lcd_init+0x54>
 7da:	88 e0       	ldi	r24, 0x08	; 8
 7dc:	cc df       	rcall	.-104    	; 0x776 <write_cmd>
 7de:	8c e0       	ldi	r24, 0x0C	; 12
 7e0:	ca df       	rcall	.-108    	; 0x776 <write_cmd>
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <nokia_lcd_clear>:
 7e8:	80 e8       	ldi	r24, 0x80	; 128
 7ea:	c5 df       	rcall	.-118    	; 0x776 <write_cmd>
 7ec:	80 e4       	ldi	r24, 0x40	; 64
 7ee:	c3 df       	rcall	.-122    	; 0x776 <write_cmd>
 7f0:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <__data_end+0x1f8>
 7f4:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <__data_end+0x1f9>
 7f8:	ec e2       	ldi	r30, 0x2C	; 44
 7fa:	f1 e0       	ldi	r31, 0x01	; 1
 7fc:	84 e2       	ldi	r24, 0x24	; 36
 7fe:	93 e0       	ldi	r25, 0x03	; 3
 800:	11 92       	st	Z+, r1
 802:	e8 17       	cp	r30, r24
 804:	f9 07       	cpc	r31, r25
 806:	e1 f7       	brne	.-8      	; 0x800 <nokia_lcd_clear+0x18>
 808:	08 95       	ret

0000080a <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 80a:	26 2f       	mov	r18, r22
 80c:	26 95       	lsr	r18
 80e:	26 95       	lsr	r18
 810:	26 95       	lsr	r18
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	34 e5       	ldi	r19, 0x54	; 84
 816:	23 9f       	mul	r18, r19
 818:	80 0d       	add	r24, r0
 81a:	91 1d       	adc	r25, r1
 81c:	11 24       	eor	r1, r1
	if (value)
 81e:	44 23       	and	r20, r20
 820:	79 f0       	breq	.+30     	; 0x840 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 822:	fc 01       	movw	r30, r24
 824:	e4 5d       	subi	r30, 0xD4	; 212
 826:	fe 4f       	sbci	r31, 0xFE	; 254
 828:	67 70       	andi	r22, 0x07	; 7
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <nokia_lcd_set_pixel+0x2a>
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	6a 95       	dec	r22
 836:	e2 f7       	brpl	.-8      	; 0x830 <nokia_lcd_set_pixel+0x26>
 838:	90 81       	ld	r25, Z
 83a:	89 2b       	or	r24, r25
 83c:	80 83       	st	Z, r24
 83e:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 840:	fc 01       	movw	r30, r24
 842:	e4 5d       	subi	r30, 0xD4	; 212
 844:	fe 4f       	sbci	r31, 0xFE	; 254
 846:	67 70       	andi	r22, 0x07	; 7
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <nokia_lcd_set_pixel+0x48>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	6a 95       	dec	r22
 854:	e2 f7       	brpl	.-8      	; 0x84e <nokia_lcd_set_pixel+0x44>
 856:	80 95       	com	r24
 858:	90 81       	ld	r25, Z
 85a:	89 23       	and	r24, r25
 85c:	80 83       	st	Z, r24
 85e:	08 95       	ret

00000860 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 860:	5f 92       	push	r5
 862:	6f 92       	push	r6
 864:	7f 92       	push	r7
 866:	8f 92       	push	r8
 868:	9f 92       	push	r9
 86a:	af 92       	push	r10
 86c:	bf 92       	push	r11
 86e:	cf 92       	push	r12
 870:	df 92       	push	r13
 872:	ef 92       	push	r14
 874:	ff 92       	push	r15
 876:	0f 93       	push	r16
 878:	1f 93       	push	r17
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 880:	26 2f       	mov	r18, r22
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	49 01       	movw	r8, r18
 886:	88 0c       	add	r8, r8
 888:	99 1c       	adc	r9, r9
 88a:	88 0c       	add	r8, r8
 88c:	99 1c       	adc	r9, r9
 88e:	82 0e       	add	r8, r18
 890:	93 1e       	adc	r9, r19
 892:	18 14       	cp	r1, r8
 894:	19 04       	cpc	r1, r9
 896:	0c f0       	brlt	.+2      	; 0x89a <nokia_lcd_write_char+0x3a>
 898:	59 c0       	rjmp	.+178    	; 0x94c <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
 89a:	89 01       	movw	r16, r18
 89c:	00 0f       	add	r16, r16
 89e:	11 1f       	adc	r17, r17
 8a0:	00 0f       	add	r16, r16
 8a2:	11 1f       	adc	r17, r17
 8a4:	00 0f       	add	r16, r16
 8a6:	11 1f       	adc	r17, r17
 8a8:	02 1b       	sub	r16, r18
 8aa:	13 0b       	sbc	r17, r19
 8ac:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 8ae:	a8 2e       	mov	r10, r24
 8b0:	b1 2c       	mov	r11, r1
 8b2:	c5 01       	movw	r24, r10
 8b4:	80 97       	sbiw	r24, 0x20	; 32
 8b6:	5c 01       	movw	r10, r24
 8b8:	aa 0c       	add	r10, r10
 8ba:	bb 1c       	adc	r11, r11
 8bc:	aa 0c       	add	r10, r10
 8be:	bb 1c       	adc	r11, r11
 8c0:	a8 0e       	add	r10, r24
 8c2:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 8c4:	0f 2e       	mov	r0, r31
 8c6:	f5 e2       	ldi	r31, 0x25	; 37
 8c8:	cf 2e       	mov	r12, r31
 8ca:	f3 e0       	ldi	r31, 0x03	; 3
 8cc:	df 2e       	mov	r13, r31
 8ce:	f0 2d       	mov	r31, r0
 8d0:	0f 2e       	mov	r0, r31
 8d2:	f4 e2       	ldi	r31, 0x24	; 36
 8d4:	ef 2e       	mov	r14, r31
 8d6:	f3 e0       	ldi	r31, 0x03	; 3
 8d8:	ff 2e       	mov	r15, r31
 8da:	f0 2d       	mov	r31, r0
 8dc:	2a c0       	rjmp	.+84     	; 0x932 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 8de:	fe 01       	movw	r30, r28
 8e0:	24 91       	lpm	r18, Z
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	87 2d       	mov	r24, r7
 8e6:	65 2d       	mov	r22, r5
 8e8:	93 d0       	rcall	.+294    	; 0xa10 <__udivmodqi4>
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <nokia_lcd_write_char+0x90>
 8ec:	35 95       	asr	r19
 8ee:	27 95       	ror	r18
 8f0:	8a 95       	dec	r24
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <nokia_lcd_write_char+0x8c>
 8f4:	20 ff       	sbrs	r18, 0
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 8f8:	f6 01       	movw	r30, r12
 8fa:	60 81       	ld	r22, Z
 8fc:	67 0d       	add	r22, r7
 8fe:	f7 01       	movw	r30, r14
 900:	80 81       	ld	r24, Z
 902:	41 e0       	ldi	r20, 0x01	; 1
 904:	86 0d       	add	r24, r6
 906:	81 df       	rcall	.-254    	; 0x80a <nokia_lcd_set_pixel>
 908:	08 c0       	rjmp	.+16     	; 0x91a <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 90a:	f6 01       	movw	r30, r12
 90c:	60 81       	ld	r22, Z
 90e:	67 0d       	add	r22, r7
 910:	f7 01       	movw	r30, r14
 912:	80 81       	ld	r24, Z
 914:	40 e0       	ldi	r20, 0x00	; 0
 916:	86 0d       	add	r24, r6
 918:	78 df       	rcall	.-272    	; 0x80a <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 91a:	73 94       	inc	r7
 91c:	87 2d       	mov	r24, r7
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	80 17       	cp	r24, r16
 922:	91 07       	cpc	r25, r17
 924:	e4 f2       	brlt	.-72     	; 0x8de <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 926:	63 94       	inc	r6
 928:	86 2d       	mov	r24, r6
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	88 15       	cp	r24, r8
 92e:	99 05       	cpc	r25, r9
 930:	6c f4       	brge	.+26     	; 0x94c <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
 932:	10 16       	cp	r1, r16
 934:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 936:	bc f7       	brge	.-18     	; 0x926 <nokia_lcd_write_char+0xc6>
 938:	86 2d       	mov	r24, r6
 93a:	65 2d       	mov	r22, r5
 93c:	69 d0       	rcall	.+210    	; 0xa10 <__udivmodqi4>
 93e:	e5 01       	movw	r28, r10
 940:	c8 0f       	add	r28, r24
 942:	d1 1d       	adc	r29, r1
 944:	c4 57       	subi	r28, 0x74	; 116
 946:	df 4f       	sbci	r29, 0xFF	; 255
 948:	71 2c       	mov	r7, r1
 94a:	c9 cf       	rjmp	.-110    	; 0x8de <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 94c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <__data_end+0x1f8>
 950:	91 e0       	ldi	r25, 0x01	; 1
 952:	98 0f       	add	r25, r24
 954:	85 2d       	mov	r24, r5
 956:	88 0f       	add	r24, r24
 958:	88 0f       	add	r24, r24
 95a:	85 0d       	add	r24, r5
 95c:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
 95e:	84 35       	cpi	r24, 0x54	; 84
 960:	18 f4       	brcc	.+6      	; 0x968 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 962:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <__data_end+0x1f8>
 966:	0e c0       	rjmp	.+28     	; 0x984 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
 968:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <__data_end+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
 96c:	e5 e2       	ldi	r30, 0x25	; 37
 96e:	f3 e0       	ldi	r31, 0x03	; 3
 970:	80 81       	ld	r24, Z
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	98 0f       	add	r25, r24
 976:	85 2d       	mov	r24, r5
 978:	88 0f       	add	r24, r24
 97a:	88 0f       	add	r24, r24
 97c:	88 0f       	add	r24, r24
 97e:	85 19       	sub	r24, r5
 980:	89 0f       	add	r24, r25
 982:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 984:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__data_end+0x1f9>
 988:	80 33       	cpi	r24, 0x30	; 48
 98a:	20 f0       	brcs	.+8      	; 0x994 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
 98c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <__data_end+0x1f8>
		nokia_lcd.cursor_y = 0;
 990:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <__data_end+0x1f9>
	}
}
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	ff 90       	pop	r15
 99e:	ef 90       	pop	r14
 9a0:	df 90       	pop	r13
 9a2:	cf 90       	pop	r12
 9a4:	bf 90       	pop	r11
 9a6:	af 90       	pop	r10
 9a8:	9f 90       	pop	r9
 9aa:	8f 90       	pop	r8
 9ac:	7f 90       	pop	r7
 9ae:	6f 90       	pop	r6
 9b0:	5f 90       	pop	r5
 9b2:	08 95       	ret

000009b4 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 9b4:	1f 93       	push	r17
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	ec 01       	movw	r28, r24
	while(*str)
 9bc:	88 81       	ld	r24, Y
 9be:	88 23       	and	r24, r24
 9c0:	39 f0       	breq	.+14     	; 0x9d0 <nokia_lcd_write_string+0x1c>
 9c2:	16 2f       	mov	r17, r22
 9c4:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
 9c6:	61 2f       	mov	r22, r17
 9c8:	4b df       	rcall	.-362    	; 0x860 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 9ca:	89 91       	ld	r24, Y+
 9cc:	81 11       	cpse	r24, r1
 9ce:	fb cf       	rjmp	.-10     	; 0x9c6 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	1f 91       	pop	r17
 9d6:	08 95       	ret

000009d8 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 9d8:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <__data_end+0x1f8>
	nokia_lcd.cursor_y = y;
 9dc:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <__data_end+0x1f9>
 9e0:	08 95       	ret

000009e2 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 9ea:	80 e8       	ldi	r24, 0x80	; 128
 9ec:	c4 de       	rcall	.-632    	; 0x776 <write_cmd>
	write_cmd(0x40);
 9ee:	80 e4       	ldi	r24, 0x40	; 64
 9f0:	c2 de       	rcall	.-636    	; 0x776 <write_cmd>
 9f2:	cc e2       	ldi	r28, 0x2C	; 44
 9f4:	d1 e0       	ldi	r29, 0x01	; 1
 9f6:	04 e2       	ldi	r16, 0x24	; 36
 9f8:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	89 91       	ld	r24, Y+
 9fe:	9d de       	rcall	.-710    	; 0x73a <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 a00:	c0 17       	cp	r28, r16
 a02:	d1 07       	cpc	r29, r17
 a04:	d1 f7       	brne	.-12     	; 0x9fa <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	1f 91       	pop	r17
 a0c:	0f 91       	pop	r16
 a0e:	08 95       	ret

00000a10 <__udivmodqi4>:
 a10:	99 1b       	sub	r25, r25
 a12:	79 e0       	ldi	r23, 0x09	; 9
 a14:	04 c0       	rjmp	.+8      	; 0xa1e <__udivmodqi4_ep>

00000a16 <__udivmodqi4_loop>:
 a16:	99 1f       	adc	r25, r25
 a18:	96 17       	cp	r25, r22
 a1a:	08 f0       	brcs	.+2      	; 0xa1e <__udivmodqi4_ep>
 a1c:	96 1b       	sub	r25, r22

00000a1e <__udivmodqi4_ep>:
 a1e:	88 1f       	adc	r24, r24
 a20:	7a 95       	dec	r23
 a22:	c9 f7       	brne	.-14     	; 0xa16 <__udivmodqi4_loop>
 a24:	80 95       	com	r24
 a26:	08 95       	ret

00000a28 <__divmodsi4>:
 a28:	05 2e       	mov	r0, r21
 a2a:	97 fb       	bst	r25, 7
 a2c:	16 f4       	brtc	.+4      	; 0xa32 <__divmodsi4+0xa>
 a2e:	00 94       	com	r0
 a30:	0f d0       	rcall	.+30     	; 0xa50 <__negsi2>
 a32:	57 fd       	sbrc	r21, 7
 a34:	05 d0       	rcall	.+10     	; 0xa40 <__divmodsi4_neg2>
 a36:	14 d0       	rcall	.+40     	; 0xa60 <__udivmodsi4>
 a38:	07 fc       	sbrc	r0, 7
 a3a:	02 d0       	rcall	.+4      	; 0xa40 <__divmodsi4_neg2>
 a3c:	46 f4       	brtc	.+16     	; 0xa4e <__divmodsi4_exit>
 a3e:	08 c0       	rjmp	.+16     	; 0xa50 <__negsi2>

00000a40 <__divmodsi4_neg2>:
 a40:	50 95       	com	r21
 a42:	40 95       	com	r20
 a44:	30 95       	com	r19
 a46:	21 95       	neg	r18
 a48:	3f 4f       	sbci	r19, 0xFF	; 255
 a4a:	4f 4f       	sbci	r20, 0xFF	; 255
 a4c:	5f 4f       	sbci	r21, 0xFF	; 255

00000a4e <__divmodsi4_exit>:
 a4e:	08 95       	ret

00000a50 <__negsi2>:
 a50:	90 95       	com	r25
 a52:	80 95       	com	r24
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__udivmodsi4>:
 a60:	a1 e2       	ldi	r26, 0x21	; 33
 a62:	1a 2e       	mov	r1, r26
 a64:	aa 1b       	sub	r26, r26
 a66:	bb 1b       	sub	r27, r27
 a68:	fd 01       	movw	r30, r26
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <__udivmodsi4_ep>

00000a6c <__udivmodsi4_loop>:
 a6c:	aa 1f       	adc	r26, r26
 a6e:	bb 1f       	adc	r27, r27
 a70:	ee 1f       	adc	r30, r30
 a72:	ff 1f       	adc	r31, r31
 a74:	a2 17       	cp	r26, r18
 a76:	b3 07       	cpc	r27, r19
 a78:	e4 07       	cpc	r30, r20
 a7a:	f5 07       	cpc	r31, r21
 a7c:	20 f0       	brcs	.+8      	; 0xa86 <__udivmodsi4_ep>
 a7e:	a2 1b       	sub	r26, r18
 a80:	b3 0b       	sbc	r27, r19
 a82:	e4 0b       	sbc	r30, r20
 a84:	f5 0b       	sbc	r31, r21

00000a86 <__udivmodsi4_ep>:
 a86:	66 1f       	adc	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	1a 94       	dec	r1
 a90:	69 f7       	brne	.-38     	; 0xa6c <__udivmodsi4_loop>
 a92:	60 95       	com	r22
 a94:	70 95       	com	r23
 a96:	80 95       	com	r24
 a98:	90 95       	com	r25
 a9a:	9b 01       	movw	r18, r22
 a9c:	ac 01       	movw	r20, r24
 a9e:	bd 01       	movw	r22, r26
 aa0:	cf 01       	movw	r24, r30
 aa2:	08 95       	ret

00000aa4 <_exit>:
 aa4:	f8 94       	cli

00000aa6 <__stop_program>:
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stop_program>
