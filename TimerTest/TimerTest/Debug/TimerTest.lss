
TimerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001328  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000837  00800144  00800144  00001400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c7b  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d3  00000000  00000000  0000434b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c8  00000000  00000000  0000541e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000660  00000000  00000000  00006ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc3  00000000  00000000  00007348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019ae  00000000  00000000  0000830b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00009cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	51 c1       	rjmp	.+674    	; 0x2a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	4f c1       	rjmp	.+670    	; 0x2a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	4d c1       	rjmp	.+666    	; 0x2a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	4b c1       	rjmp	.+662    	; 0x2a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	49 c1       	rjmp	.+658    	; 0x2a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c1       	rjmp	.+654    	; 0x2a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c1       	rjmp	.+650    	; 0x2a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c1       	rjmp	.+646    	; 0x2a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c1       	rjmp	.+642    	; 0x2a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c1       	rjmp	.+638    	; 0x2a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3d c1       	rjmp	.+634    	; 0x2a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3b c1       	rjmp	.+630    	; 0x2a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	da c5       	rjmp	.+2996   	; 0xbea <__vector_13>
      36:	00 00       	nop
      38:	37 c1       	rjmp	.+622    	; 0x2a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	35 c1       	rjmp	.+618    	; 0x2a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c1       	rjmp	.+614    	; 0x2a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	31 c1       	rjmp	.+610    	; 0x2a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c1       	rjmp	.+606    	; 0x2a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c1       	rjmp	.+602    	; 0x2a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c1       	rjmp	.+598    	; 0x2a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c1       	rjmp	.+594    	; 0x2a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c1       	rjmp	.+590    	; 0x2a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	25 c1       	rjmp	.+586    	; 0x2a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	23 c1       	rjmp	.+582    	; 0x2a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c1       	rjmp	.+578    	; 0x2a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	1f c1       	rjmp	.+574    	; 0x2a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1d c1       	rjmp	.+570    	; 0x2a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1b c1       	rjmp	.+566    	; 0x2a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	19 c1       	rjmp	.+562    	; 0x2a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	17 c1       	rjmp	.+558    	; 0x2a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	15 c1       	rjmp	.+554    	; 0x2a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	13 c1       	rjmp	.+550    	; 0x2a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	11 c1       	rjmp	.+546    	; 0x2a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0f c1       	rjmp	.+542    	; 0x2a8 <__bad_interrupt>
	...

0000008c <CHARSET>:
      8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      9c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      ac:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      bc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      cc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      dc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      ec:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      fc:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     10c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     11c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     12c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     13c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     14c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     15c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     16c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     17c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     18c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     19c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1ac:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1bc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1cc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1dc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1ec:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1fc:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     20c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     21c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     22c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     24c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     25c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d0 e4       	ldi	r29, 0x40	; 64
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	e8 e2       	ldi	r30, 0x28	; 40
     280:	f3 e1       	ldi	r31, 0x13	; 19
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a4 34       	cpi	r26, 0x44	; 68
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	29 e0       	ldi	r18, 0x09	; 9
     294:	a4 e4       	ldi	r26, 0x44	; 68
     296:	b1 e0       	ldi	r27, 0x01	; 1
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	ab 37       	cpi	r26, 0x7B	; 123
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	d3 d1       	rcall	.+934    	; 0x64a <main>
     2a4:	0c 94 92 09 	jmp	0x1324	; 0x1324 <_exit>

000002a8 <__bad_interrupt>:
     2a8:	ab ce       	rjmp	.-682    	; 0x0 <__vectors>

000002aa <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     2b0:	ef d5       	rcall	.+3038   	; 0xe90 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     2b2:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__data_end>
     2b6:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__data_end+0x1>
     2ba:	c9 01       	movw	r24, r18
     2bc:	8c 0f       	add	r24, r28
     2be:	9d 1f       	adc	r25, r29
     2c0:	8c 3d       	cpi	r24, 0xDC	; 220
     2c2:	45 e0       	ldi	r20, 0x05	; 5
     2c4:	94 07       	cpc	r25, r20
     2c6:	58 f4       	brcc	.+22     	; 0x2de <pvPortMalloc+0x34>
     2c8:	28 17       	cp	r18, r24
     2ca:	39 07       	cpc	r19, r25
     2cc:	58 f4       	brcc	.+22     	; 0x2e4 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     2ce:	e9 01       	movw	r28, r18
     2d0:	ca 5b       	subi	r28, 0xBA	; 186
     2d2:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
     2d4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     2d8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     2de:	c0 e0       	ldi	r28, 0x00	; 0
     2e0:	d0 e0       	ldi	r29, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <pvPortMalloc+0x3e>
     2e4:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     2e6:	d0 e0       	ldi	r29, 0x00	; 0
     2e8:	9a d6       	rcall	.+3380   	; 0x101e <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     2ea:	ce 01       	movw	r24, r28
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     2f2:	08 95       	ret

000002f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     2f4:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     2f6:	03 96       	adiw	r24, 0x03	; 3
     2f8:	92 83       	std	Z+2, r25	; 0x02
     2fa:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     2fc:	2f ef       	ldi	r18, 0xFF	; 255
     2fe:	3f ef       	ldi	r19, 0xFF	; 255
     300:	34 83       	std	Z+4, r19	; 0x04
     302:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     304:	96 83       	std	Z+6, r25	; 0x06
     306:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     308:	90 87       	std	Z+8, r25	; 0x08
     30a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     30c:	10 82       	st	Z, r1
     30e:	08 95       	ret

00000310 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     310:	fc 01       	movw	r30, r24
     312:	11 86       	std	Z+9, r1	; 0x09
     314:	10 86       	std	Z+8, r1	; 0x08
     316:	08 95       	ret

00000318 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	fc 01       	movw	r30, r24
     31e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     320:	21 81       	ldd	r18, Z+1	; 0x01
     322:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     324:	e9 01       	movw	r28, r18
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	9b 81       	ldd	r25, Y+3	; 0x03
     32a:	13 96       	adiw	r26, 0x03	; 3
     32c:	9c 93       	st	X, r25
     32e:	8e 93       	st	-X, r24
     330:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     332:	81 81       	ldd	r24, Z+1	; 0x01
     334:	92 81       	ldd	r25, Z+2	; 0x02
     336:	15 96       	adiw	r26, 0x05	; 5
     338:	9c 93       	st	X, r25
     33a:	8e 93       	st	-X, r24
     33c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	9b 81       	ldd	r25, Y+3	; 0x03
     342:	ec 01       	movw	r28, r24
     344:	7d 83       	std	Y+5, r23	; 0x05
     346:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     348:	e9 01       	movw	r28, r18
     34a:	7b 83       	std	Y+3, r23	; 0x03
     34c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     34e:	72 83       	std	Z+2, r23	; 0x02
     350:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     352:	19 96       	adiw	r26, 0x09	; 9
     354:	fc 93       	st	X, r31
     356:	ee 93       	st	-X, r30
     358:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     35a:	80 81       	ld	r24, Z
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	80 83       	st	Z, r24
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     36c:	48 81       	ld	r20, Y
     36e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     370:	4f 3f       	cpi	r20, 0xFF	; 255
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	52 07       	cpc	r21, r18
     376:	31 f4       	brne	.+12     	; 0x384 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     378:	dc 01       	movw	r26, r24
     37a:	17 96       	adiw	r26, 0x07	; 7
     37c:	ed 91       	ld	r30, X+
     37e:	fc 91       	ld	r31, X
     380:	18 97       	sbiw	r26, 0x08	; 8
     382:	17 c0       	rjmp	.+46     	; 0x3b2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     384:	fc 01       	movw	r30, r24
     386:	33 96       	adiw	r30, 0x03	; 3
     388:	dc 01       	movw	r26, r24
     38a:	15 96       	adiw	r26, 0x05	; 5
     38c:	2d 91       	ld	r18, X+
     38e:	3c 91       	ld	r19, X
     390:	16 97       	sbiw	r26, 0x06	; 6
     392:	d9 01       	movw	r26, r18
     394:	2d 91       	ld	r18, X+
     396:	3c 91       	ld	r19, X
     398:	42 17       	cp	r20, r18
     39a:	53 07       	cpc	r21, r19
     39c:	50 f0       	brcs	.+20     	; 0x3b2 <vListInsert+0x4c>
     39e:	02 80       	ldd	r0, Z+2	; 0x02
     3a0:	f3 81       	ldd	r31, Z+3	; 0x03
     3a2:	e0 2d       	mov	r30, r0
     3a4:	a2 81       	ldd	r26, Z+2	; 0x02
     3a6:	b3 81       	ldd	r27, Z+3	; 0x03
     3a8:	2d 91       	ld	r18, X+
     3aa:	3c 91       	ld	r19, X
     3ac:	42 17       	cp	r20, r18
     3ae:	53 07       	cpc	r21, r19
     3b0:	b0 f7       	brcc	.-20     	; 0x39e <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     3b2:	a2 81       	ldd	r26, Z+2	; 0x02
     3b4:	b3 81       	ldd	r27, Z+3	; 0x03
     3b6:	bb 83       	std	Y+3, r27	; 0x03
     3b8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     3ba:	15 96       	adiw	r26, 0x05	; 5
     3bc:	dc 93       	st	X, r29
     3be:	ce 93       	st	-X, r28
     3c0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     3c2:	fd 83       	std	Y+5, r31	; 0x05
     3c4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     3c6:	d3 83       	std	Z+3, r29	; 0x03
     3c8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     3ca:	99 87       	std	Y+9, r25	; 0x09
     3cc:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 81       	ld	r18, Z
     3d2:	2f 5f       	subi	r18, 0xFF	; 255
     3d4:	20 83       	st	Z, r18
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     3dc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3de:	a2 81       	ldd	r26, Z+2	; 0x02
     3e0:	b3 81       	ldd	r27, Z+3	; 0x03
     3e2:	84 81       	ldd	r24, Z+4	; 0x04
     3e4:	95 81       	ldd	r25, Z+5	; 0x05
     3e6:	15 96       	adiw	r26, 0x05	; 5
     3e8:	9c 93       	st	X, r25
     3ea:	8e 93       	st	-X, r24
     3ec:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3ee:	a4 81       	ldd	r26, Z+4	; 0x04
     3f0:	b5 81       	ldd	r27, Z+5	; 0x05
     3f2:	82 81       	ldd	r24, Z+2	; 0x02
     3f4:	93 81       	ldd	r25, Z+3	; 0x03
     3f6:	13 96       	adiw	r26, 0x03	; 3
     3f8:	9c 93       	st	X, r25
     3fa:	8e 93       	st	-X, r24
     3fc:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     3fe:	a0 85       	ldd	r26, Z+8	; 0x08
     400:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     402:	11 96       	adiw	r26, 0x01	; 1
     404:	8d 91       	ld	r24, X+
     406:	9c 91       	ld	r25, X
     408:	12 97       	sbiw	r26, 0x02	; 2
     40a:	e8 17       	cp	r30, r24
     40c:	f9 07       	cpc	r31, r25
     40e:	31 f4       	brne	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     410:	84 81       	ldd	r24, Z+4	; 0x04
     412:	95 81       	ldd	r25, Z+5	; 0x05
     414:	12 96       	adiw	r26, 0x02	; 2
     416:	9c 93       	st	X, r25
     418:	8e 93       	st	-X, r24
     41a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     41c:	11 86       	std	Z+9, r1	; 0x09
     41e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     420:	8c 91       	ld	r24, X
     422:	81 50       	subi	r24, 0x01	; 1
     424:	8c 93       	st	X, r24
     426:	08 95       	ret

00000428 <display_Tick>:
	}
}

void TimeRemainingPulse(unsigned portBASE_TYPE Priority){
	xTaskCreate(TimeRemainingTask, (signed portCHAR *)"TimeRemainingTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <display_state>
     438:	81 11       	cpse	r24, r1
     43a:	7c c0       	rjmp	.+248    	; 0x534 <display_Tick+0x10c>
     43c:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <time_elapsed_counter>
     440:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <time_elapsed_counter+0x1>
     444:	8c 01       	movw	r16, r24
     446:	16 95       	lsr	r17
     448:	07 95       	ror	r16
     44a:	60 e2       	ldi	r22, 0x20	; 32
     44c:	7c e1       	ldi	r23, 0x1C	; 28
     44e:	31 d7       	rcall	.+3682   	; 0x12b2 <__udivmodhi4>
     450:	d6 2f       	mov	r29, r22
     452:	c8 01       	movw	r24, r16
     454:	60 e1       	ldi	r22, 0x10	; 16
     456:	7e e0       	ldi	r23, 0x0E	; 14
     458:	2c d7       	rcall	.+3672   	; 0x12b2 <__udivmodhi4>
     45a:	9c 01       	movw	r18, r24
     45c:	a9 e8       	ldi	r26, 0x89	; 137
     45e:	b8 e8       	ldi	r27, 0x88	; 136
     460:	3c d7       	rcall	.+3704   	; 0x12da <__umulhisi3>
     462:	7c 01       	movw	r14, r24
     464:	f6 94       	lsr	r15
     466:	e7 94       	ror	r14
     468:	f6 94       	lsr	r15
     46a:	e7 94       	ror	r14
     46c:	f6 94       	lsr	r15
     46e:	e7 94       	ror	r14
     470:	f6 94       	lsr	r15
     472:	e7 94       	ror	r14
     474:	f6 94       	lsr	r15
     476:	e7 94       	ror	r14
     478:	98 01       	movw	r18, r16
     47a:	2f d7       	rcall	.+3678   	; 0x12da <__umulhisi3>
     47c:	96 95       	lsr	r25
     47e:	87 95       	ror	r24
     480:	92 95       	swap	r25
     482:	82 95       	swap	r24
     484:	8f 70       	andi	r24, 0x0F	; 15
     486:	89 27       	eor	r24, r25
     488:	9f 70       	andi	r25, 0x0F	; 15
     48a:	89 27       	eor	r24, r25
     48c:	4c e3       	ldi	r20, 0x3C	; 60
     48e:	48 9f       	mul	r20, r24
     490:	90 01       	movw	r18, r0
     492:	49 9f       	mul	r20, r25
     494:	30 0d       	add	r19, r0
     496:	11 24       	eor	r1, r1
     498:	02 1b       	sub	r16, r18
     49a:	13 0b       	sbc	r17, r19
     49c:	3b d1       	rcall	.+630    	; 0x714 <nokia_lcd_clear>
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	1d d2       	rcall	.+1082   	; 0x8e0 <nokia_lcd_write_string>
     4a6:	6a e0       	ldi	r22, 0x0A	; 10
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	2c d2       	rcall	.+1112   	; 0x904 <nokia_lcd_set_cursor>
     4ac:	cd ec       	ldi	r28, 0xCD	; 205
     4ae:	dc 9f       	mul	r29, r28
     4b0:	11 2d       	mov	r17, r1
     4b2:	11 24       	eor	r1, r1
     4b4:	16 95       	lsr	r17
     4b6:	16 95       	lsr	r17
     4b8:	16 95       	lsr	r17
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	80 e3       	ldi	r24, 0x30	; 48
     4be:	81 0f       	add	r24, r17
     4c0:	65 d1       	rcall	.+714    	; 0x78c <nokia_lcd_write_char>
     4c2:	11 0f       	add	r17, r17
     4c4:	81 2f       	mov	r24, r17
     4c6:	88 0f       	add	r24, r24
     4c8:	88 0f       	add	r24, r24
     4ca:	18 0f       	add	r17, r24
     4cc:	8d 2f       	mov	r24, r29
     4ce:	81 1b       	sub	r24, r17
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	80 5d       	subi	r24, 0xD0	; 208
     4d4:	5b d1       	rcall	.+694    	; 0x78c <nokia_lcd_write_char>
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	8a e3       	ldi	r24, 0x3A	; 58
     4da:	58 d1       	rcall	.+688    	; 0x78c <nokia_lcd_write_char>
     4dc:	ec 9e       	mul	r14, r28
     4de:	11 2d       	mov	r17, r1
     4e0:	11 24       	eor	r1, r1
     4e2:	16 95       	lsr	r17
     4e4:	16 95       	lsr	r17
     4e6:	16 95       	lsr	r17
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	80 e3       	ldi	r24, 0x30	; 48
     4ec:	81 0f       	add	r24, r17
     4ee:	4e d1       	rcall	.+668    	; 0x78c <nokia_lcd_write_char>
     4f0:	11 0f       	add	r17, r17
     4f2:	81 2f       	mov	r24, r17
     4f4:	88 0f       	add	r24, r24
     4f6:	88 0f       	add	r24, r24
     4f8:	18 0f       	add	r17, r24
     4fa:	8e 2d       	mov	r24, r14
     4fc:	81 1b       	sub	r24, r17
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	80 5d       	subi	r24, 0xD0	; 208
     502:	44 d1       	rcall	.+648    	; 0x78c <nokia_lcd_write_char>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	8a e3       	ldi	r24, 0x3A	; 58
     508:	41 d1       	rcall	.+642    	; 0x78c <nokia_lcd_write_char>
     50a:	0c 9f       	mul	r16, r28
     50c:	c1 2d       	mov	r28, r1
     50e:	11 24       	eor	r1, r1
     510:	c6 95       	lsr	r28
     512:	c6 95       	lsr	r28
     514:	c6 95       	lsr	r28
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	80 e3       	ldi	r24, 0x30	; 48
     51a:	8c 0f       	add	r24, r28
     51c:	37 d1       	rcall	.+622    	; 0x78c <nokia_lcd_write_char>
     51e:	cc 0f       	add	r28, r28
     520:	8c 2f       	mov	r24, r28
     522:	88 0f       	add	r24, r24
     524:	88 0f       	add	r24, r24
     526:	c8 0f       	add	r28, r24
     528:	80 2f       	mov	r24, r16
     52a:	8c 1b       	sub	r24, r28
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	80 5d       	subi	r24, 0xD0	; 208
     530:	2d d1       	rcall	.+602    	; 0x78c <nokia_lcd_write_char>
     532:	ed d1       	rcall	.+986    	; 0x90e <nokia_lcd_render>
     534:	80 91 78 09 	lds	r24, 0x0978	; 0x800978 <display_state>
     538:	81 11       	cpse	r24, r1
     53a:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <display_state>
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	08 95       	ret

0000054c <displayTask>:
     54c:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <display_state>
     550:	6b df       	rcall	.-298    	; 0x428 <display_Tick>
     552:	84 e6       	ldi	r24, 0x64	; 100
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	e4 d5       	rcall	.+3016   	; 0x1120 <vTaskDelay>
     558:	fb cf       	rjmp	.-10     	; 0x550 <displayTask+0x4>

0000055a <displayPulse>:
     55a:	af 92       	push	r10
     55c:	bf 92       	push	r11
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	a1 2c       	mov	r10, r1
     56a:	b1 2c       	mov	r11, r1
     56c:	c1 2c       	mov	r12, r1
     56e:	d1 2c       	mov	r13, r1
     570:	e1 2c       	mov	r14, r1
     572:	f1 2c       	mov	r15, r1
     574:	08 2f       	mov	r16, r24
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	45 e5       	ldi	r20, 0x55	; 85
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	60 e1       	ldi	r22, 0x10	; 16
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	86 ea       	ldi	r24, 0xA6	; 166
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	68 d3       	rcall	.+1744   	; 0xc58 <xTaskGenericCreate>
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	08 95       	ret

00000598 <TimeElapsed_Tick>:
     598:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <time_elapsed_state>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	71 f4       	brne	.+28     	; 0x5bc <TimeElapsed_Tick+0x24>
     5a0:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <time_elapsed_counter>
     5a4:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <time_elapsed_counter+0x1>
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <time_elapsed_counter+0x1>
     5ae:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <time_elapsed_counter>
     5b2:	00 99       	sbic	0x00, 0	; 0
     5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <TimeElapsed_Tick+0x4a>
     5b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     5ba:	17 c0       	rjmp	.+46     	; 0x5ea <TimeElapsed_Tick+0x52>
     5bc:	88 23       	and	r24, r24
     5be:	19 f0       	breq	.+6      	; 0x5c6 <TimeElapsed_Tick+0x2e>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	d1 f4       	brne	.+52     	; 0x5f8 <TimeElapsed_Tick+0x60>
     5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <TimeElapsed_Tick+0x4a>
     5c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5ca:	88 23       	and	r24, r24
     5cc:	b9 f0       	breq	.+46     	; 0x5fc <TimeElapsed_Tick+0x64>
     5ce:	8d e9       	ldi	r24, 0x9D	; 157
     5d0:	9c e8       	ldi	r25, 0x8C	; 140
     5d2:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <time_elapsed_counter+0x1>
     5d6:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <time_elapsed_counter>
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <time_elapsed_state>
     5e0:	08 95       	ret
     5e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5e6:	81 11       	cpse	r24, r1
     5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <TimeElapsed_Tick+0x58>
     5ea:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <time_elapsed_state>
     5ee:	08 95       	ret
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <time_elapsed_state>
     5f6:	08 95       	ret
     5f8:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <time_elapsed_state>
     5fc:	08 95       	ret

000005fe <TimeElapsedTask>:
     5fe:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <time_elapsed_state>
     602:	ca df       	rcall	.-108    	; 0x598 <TimeElapsed_Tick>
     604:	84 ef       	ldi	r24, 0xF4	; 244
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	8b d5       	rcall	.+2838   	; 0x1120 <vTaskDelay>
     60a:	fb cf       	rjmp	.-10     	; 0x602 <TimeElapsedTask+0x4>

0000060c <TimeElapsedPulse>:
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	a1 2c       	mov	r10, r1
     61c:	b1 2c       	mov	r11, r1
     61e:	c1 2c       	mov	r12, r1
     620:	d1 2c       	mov	r13, r1
     622:	e1 2c       	mov	r14, r1
     624:	f1 2c       	mov	r15, r1
     626:	08 2f       	mov	r16, r24
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	45 e5       	ldi	r20, 0x55	; 85
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	6c e1       	ldi	r22, 0x1C	; 28
     632:	71 e0       	ldi	r23, 0x01	; 1
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	0f d3       	rcall	.+1566   	; 0xc58 <xTaskGenericCreate>
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	bf 90       	pop	r11
     646:	af 90       	pop	r10
     648:	08 95       	ret

0000064a <main>:


int main(void) 
{ 
	DDRA = 0x00;	//Controls the sensors to make sure door is locked
     64a:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;	//Set Port D to output
     650:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//Init Port D to 0s
     652:	1b b8       	out	0x0b, r1	; 11
   
	nokia_lcd_init();
     654:	29 d0       	rcall	.+82     	; 0x6a8 <nokia_lcd_init>
   
	//Start Tasks  
	displayPulse(1);
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 df       	rcall	.-256    	; 0x55a <displayPulse>
	TimeElapsedPulse(1);
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	d7 df       	rcall	.-82     	; 0x60c <TimeElapsedPulse>
	//TimeRemainingPulse(1);
   
    //RunSchedular 
	vTaskStartScheduler(); 
     65e:	ef d3       	rcall	.+2014   	; 0xe3e <vTaskStartScheduler>
     660:	80 e0       	ldi	r24, 0x00	; 0
 
	return 0; 
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	08 95       	ret

00000666 <write>:
     666:	59 98       	cbi	0x0b, 1	; 11
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     668:	66 23       	and	r22, r22
     66a:	11 f0       	breq	.+4      	; 0x670 <write+0xa>
     66c:	5b 9a       	sbi	0x0b, 3	; 11
     66e:	15 c0       	rjmp	.+42     	; 0x69a <write+0x34>
     670:	5b 98       	cbi	0x0b, 3	; 11
     672:	13 c0       	rjmp	.+38     	; 0x69a <write+0x34>
     674:	ac 01       	movw	r20, r24
     676:	02 2e       	mov	r0, r18
     678:	02 c0       	rjmp	.+4      	; 0x67e <write+0x18>
     67a:	55 95       	asr	r21
     67c:	47 95       	ror	r20
     67e:	0a 94       	dec	r0
     680:	e2 f7       	brpl	.-8      	; 0x67a <write+0x14>
     682:	40 ff       	sbrs	r20, 0
     684:	02 c0       	rjmp	.+4      	; 0x68a <write+0x24>
     686:	5c 9a       	sbi	0x0b, 4	; 11
     688:	01 c0       	rjmp	.+2      	; 0x68c <write+0x26>
     68a:	5c 98       	cbi	0x0b, 4	; 11
     68c:	5d 9a       	sbi	0x0b, 5	; 11
     68e:	5d 98       	cbi	0x0b, 5	; 11
     690:	21 50       	subi	r18, 0x01	; 1
     692:	31 09       	sbc	r19, r1
     694:	78 f7       	brcc	.-34     	; 0x674 <write+0xe>
     696:	59 9a       	sbi	0x0b, 1	; 11
     698:	08 95       	ret
     69a:	27 e0       	ldi	r18, 0x07	; 7
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	e9 cf       	rjmp	.-46     	; 0x674 <write+0xe>

000006a2 <write_cmd>:
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	e0 cf       	rjmp	.-64     	; 0x666 <write>
     6a6:	08 95       	ret

000006a8 <nokia_lcd_init>:
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	51 9a       	sbi	0x0a, 1	; 10
     6ae:	52 9a       	sbi	0x0a, 2	; 10
     6b0:	53 9a       	sbi	0x0a, 3	; 10
     6b2:	54 9a       	sbi	0x0a, 4	; 10
     6b4:	55 9a       	sbi	0x0a, 5	; 10
     6b6:	5a 9a       	sbi	0x0b, 2	; 11
     6b8:	59 9a       	sbi	0x0b, 1	; 11
     6ba:	83 ec       	ldi	r24, 0xC3	; 195
     6bc:	99 e0       	ldi	r25, 0x09	; 9
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <nokia_lcd_init+0x16>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <nokia_lcd_init+0x1c>
     6c4:	00 00       	nop
     6c6:	5a 98       	cbi	0x0b, 2	; 11
     6c8:	8b e5       	ldi	r24, 0x5B	; 91
     6ca:	94 e4       	ldi	r25, 0x44	; 68
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <nokia_lcd_init+0x24>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <nokia_lcd_init+0x2a>
     6d2:	00 00       	nop
     6d4:	5a 9a       	sbi	0x0b, 2	; 11
     6d6:	59 98       	cbi	0x0b, 1	; 11
     6d8:	81 e2       	ldi	r24, 0x21	; 33
     6da:	e3 df       	rcall	.-58     	; 0x6a2 <write_cmd>
     6dc:	83 e1       	ldi	r24, 0x13	; 19
     6de:	e1 df       	rcall	.-62     	; 0x6a2 <write_cmd>
     6e0:	86 e0       	ldi	r24, 0x06	; 6
     6e2:	df df       	rcall	.-66     	; 0x6a2 <write_cmd>
     6e4:	82 ec       	ldi	r24, 0xC2	; 194
     6e6:	dd df       	rcall	.-70     	; 0x6a2 <write_cmd>
     6e8:	80 e2       	ldi	r24, 0x20	; 32
     6ea:	db df       	rcall	.-74     	; 0x6a2 <write_cmd>
     6ec:	89 e0       	ldi	r24, 0x09	; 9
     6ee:	d9 df       	rcall	.-78     	; 0x6a2 <write_cmd>
     6f0:	80 e8       	ldi	r24, 0x80	; 128
     6f2:	d7 df       	rcall	.-82     	; 0x6a2 <write_cmd>
     6f4:	80 e4       	ldi	r24, 0x40	; 64
     6f6:	d5 df       	rcall	.-86     	; 0x6a2 <write_cmd>
     6f8:	c8 ef       	ldi	r28, 0xF8	; 248
     6fa:	d1 e0       	ldi	r29, 0x01	; 1
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	b2 df       	rcall	.-156    	; 0x666 <write>
     702:	21 97       	sbiw	r28, 0x01	; 1
     704:	d9 f7       	brne	.-10     	; 0x6fc <nokia_lcd_init+0x54>
     706:	88 e0       	ldi	r24, 0x08	; 8
     708:	cc df       	rcall	.-104    	; 0x6a2 <write_cmd>
     70a:	8c e0       	ldi	r24, 0x0C	; 12
     70c:	ca df       	rcall	.-108    	; 0x6a2 <write_cmd>
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <nokia_lcd_clear>:
     714:	80 e8       	ldi	r24, 0x80	; 128
     716:	c5 df       	rcall	.-118    	; 0x6a2 <write_cmd>
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	c3 df       	rcall	.-122    	; 0x6a2 <write_cmd>
     71c:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <nokia_lcd+0x1f8>
     720:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <nokia_lcd+0x1f9>
     724:	e4 e2       	ldi	r30, 0x24	; 36
     726:	f7 e0       	ldi	r31, 0x07	; 7
     728:	8c e1       	ldi	r24, 0x1C	; 28
     72a:	99 e0       	ldi	r25, 0x09	; 9
     72c:	11 92       	st	Z+, r1
     72e:	e8 17       	cp	r30, r24
     730:	f9 07       	cpc	r31, r25
     732:	e1 f7       	brne	.-8      	; 0x72c <nokia_lcd_clear+0x18>
     734:	08 95       	ret

00000736 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     736:	26 2f       	mov	r18, r22
     738:	26 95       	lsr	r18
     73a:	26 95       	lsr	r18
     73c:	26 95       	lsr	r18
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	34 e5       	ldi	r19, 0x54	; 84
     742:	23 9f       	mul	r18, r19
     744:	80 0d       	add	r24, r0
     746:	91 1d       	adc	r25, r1
     748:	11 24       	eor	r1, r1
	if (value)
     74a:	44 23       	and	r20, r20
     74c:	79 f0       	breq	.+30     	; 0x76c <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     74e:	fc 01       	movw	r30, r24
     750:	ec 5d       	subi	r30, 0xDC	; 220
     752:	f8 4f       	sbci	r31, 0xF8	; 248
     754:	67 70       	andi	r22, 0x07	; 7
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	02 c0       	rjmp	.+4      	; 0x760 <nokia_lcd_set_pixel+0x2a>
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	6a 95       	dec	r22
     762:	e2 f7       	brpl	.-8      	; 0x75c <nokia_lcd_set_pixel+0x26>
     764:	90 81       	ld	r25, Z
     766:	89 2b       	or	r24, r25
     768:	80 83       	st	Z, r24
     76a:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     76c:	fc 01       	movw	r30, r24
     76e:	ec 5d       	subi	r30, 0xDC	; 220
     770:	f8 4f       	sbci	r31, 0xF8	; 248
     772:	67 70       	andi	r22, 0x07	; 7
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	02 c0       	rjmp	.+4      	; 0x77e <nokia_lcd_set_pixel+0x48>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	6a 95       	dec	r22
     780:	e2 f7       	brpl	.-8      	; 0x77a <nokia_lcd_set_pixel+0x44>
     782:	80 95       	com	r24
     784:	90 81       	ld	r25, Z
     786:	89 23       	and	r24, r25
     788:	80 83       	st	Z, r24
     78a:	08 95       	ret

0000078c <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     78c:	5f 92       	push	r5
     78e:	6f 92       	push	r6
     790:	7f 92       	push	r7
     792:	8f 92       	push	r8
     794:	9f 92       	push	r9
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     7ac:	26 2f       	mov	r18, r22
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	49 01       	movw	r8, r18
     7b2:	88 0c       	add	r8, r8
     7b4:	99 1c       	adc	r9, r9
     7b6:	88 0c       	add	r8, r8
     7b8:	99 1c       	adc	r9, r9
     7ba:	82 0e       	add	r8, r18
     7bc:	93 1e       	adc	r9, r19
     7be:	18 14       	cp	r1, r8
     7c0:	19 04       	cpc	r1, r9
     7c2:	0c f0       	brlt	.+2      	; 0x7c6 <nokia_lcd_write_char+0x3a>
     7c4:	59 c0       	rjmp	.+178    	; 0x878 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
     7c6:	89 01       	movw	r16, r18
     7c8:	00 0f       	add	r16, r16
     7ca:	11 1f       	adc	r17, r17
     7cc:	00 0f       	add	r16, r16
     7ce:	11 1f       	adc	r17, r17
     7d0:	00 0f       	add	r16, r16
     7d2:	11 1f       	adc	r17, r17
     7d4:	02 1b       	sub	r16, r18
     7d6:	13 0b       	sbc	r17, r19
     7d8:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     7da:	a8 2e       	mov	r10, r24
     7dc:	b1 2c       	mov	r11, r1
     7de:	c5 01       	movw	r24, r10
     7e0:	80 97       	sbiw	r24, 0x20	; 32
     7e2:	5c 01       	movw	r10, r24
     7e4:	aa 0c       	add	r10, r10
     7e6:	bb 1c       	adc	r11, r11
     7e8:	aa 0c       	add	r10, r10
     7ea:	bb 1c       	adc	r11, r11
     7ec:	a8 0e       	add	r10, r24
     7ee:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     7f0:	0f 2e       	mov	r0, r31
     7f2:	fd e1       	ldi	r31, 0x1D	; 29
     7f4:	cf 2e       	mov	r12, r31
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	df 2e       	mov	r13, r31
     7fa:	f0 2d       	mov	r31, r0
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fc e1       	ldi	r31, 0x1C	; 28
     800:	ef 2e       	mov	r14, r31
     802:	f9 e0       	ldi	r31, 0x09	; 9
     804:	ff 2e       	mov	r15, r31
     806:	f0 2d       	mov	r31, r0
     808:	2a c0       	rjmp	.+84     	; 0x85e <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     80a:	fe 01       	movw	r30, r28
     80c:	24 91       	lpm	r18, Z
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	87 2d       	mov	r24, r7
     812:	65 2d       	mov	r22, r5
     814:	42 d5       	rcall	.+2692   	; 0x129a <__udivmodqi4>
     816:	02 c0       	rjmp	.+4      	; 0x81c <nokia_lcd_write_char+0x90>
     818:	35 95       	asr	r19
     81a:	27 95       	ror	r18
     81c:	8a 95       	dec	r24
     81e:	e2 f7       	brpl	.-8      	; 0x818 <nokia_lcd_write_char+0x8c>
     820:	20 ff       	sbrs	r18, 0
     822:	09 c0       	rjmp	.+18     	; 0x836 <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     824:	f6 01       	movw	r30, r12
     826:	60 81       	ld	r22, Z
     828:	67 0d       	add	r22, r7
     82a:	f7 01       	movw	r30, r14
     82c:	80 81       	ld	r24, Z
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	86 0d       	add	r24, r6
     832:	81 df       	rcall	.-254    	; 0x736 <nokia_lcd_set_pixel>
     834:	08 c0       	rjmp	.+16     	; 0x846 <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     836:	f6 01       	movw	r30, r12
     838:	60 81       	ld	r22, Z
     83a:	67 0d       	add	r22, r7
     83c:	f7 01       	movw	r30, r14
     83e:	80 81       	ld	r24, Z
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	86 0d       	add	r24, r6
     844:	78 df       	rcall	.-272    	; 0x736 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     846:	73 94       	inc	r7
     848:	87 2d       	mov	r24, r7
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	80 17       	cp	r24, r16
     84e:	91 07       	cpc	r25, r17
     850:	e4 f2       	brlt	.-72     	; 0x80a <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     852:	63 94       	inc	r6
     854:	86 2d       	mov	r24, r6
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	88 15       	cp	r24, r8
     85a:	99 05       	cpc	r25, r9
     85c:	6c f4       	brge	.+26     	; 0x878 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
     85e:	10 16       	cp	r1, r16
     860:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     862:	bc f7       	brge	.-18     	; 0x852 <nokia_lcd_write_char+0xc6>
     864:	86 2d       	mov	r24, r6
     866:	65 2d       	mov	r22, r5
     868:	18 d5       	rcall	.+2608   	; 0x129a <__udivmodqi4>
     86a:	e5 01       	movw	r28, r10
     86c:	c8 0f       	add	r28, r24
     86e:	d1 1d       	adc	r29, r1
     870:	c4 57       	subi	r28, 0x74	; 116
     872:	df 4f       	sbci	r29, 0xFF	; 255
     874:	71 2c       	mov	r7, r1
     876:	c9 cf       	rjmp	.-110    	; 0x80a <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     878:	80 91 1c 09 	lds	r24, 0x091C	; 0x80091c <nokia_lcd+0x1f8>
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	98 0f       	add	r25, r24
     880:	85 2d       	mov	r24, r5
     882:	88 0f       	add	r24, r24
     884:	88 0f       	add	r24, r24
     886:	85 0d       	add	r24, r5
     888:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
     88a:	84 35       	cpi	r24, 0x54	; 84
     88c:	18 f4       	brcc	.+6      	; 0x894 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     88e:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <nokia_lcd+0x1f8>
     892:	0e c0       	rjmp	.+28     	; 0x8b0 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
     894:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     898:	ed e1       	ldi	r30, 0x1D	; 29
     89a:	f9 e0       	ldi	r31, 0x09	; 9
     89c:	80 81       	ld	r24, Z
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	98 0f       	add	r25, r24
     8a2:	85 2d       	mov	r24, r5
     8a4:	88 0f       	add	r24, r24
     8a6:	88 0f       	add	r24, r24
     8a8:	88 0f       	add	r24, r24
     8aa:	85 19       	sub	r24, r5
     8ac:	89 0f       	add	r24, r25
     8ae:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
     8b0:	80 91 1d 09 	lds	r24, 0x091D	; 0x80091d <nokia_lcd+0x1f9>
     8b4:	80 33       	cpi	r24, 0x30	; 48
     8b6:	20 f0       	brcs	.+8      	; 0x8c0 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
     8b8:	10 92 1c 09 	sts	0x091C, r1	; 0x80091c <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
     8bc:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <nokia_lcd+0x1f9>
	}
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	7f 90       	pop	r7
     8da:	6f 90       	pop	r6
     8dc:	5f 90       	pop	r5
     8de:	08 95       	ret

000008e0 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
	while(*str)
     8e8:	88 81       	ld	r24, Y
     8ea:	88 23       	and	r24, r24
     8ec:	39 f0       	breq	.+14     	; 0x8fc <nokia_lcd_write_string+0x1c>
     8ee:	16 2f       	mov	r17, r22
     8f0:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
     8f2:	61 2f       	mov	r22, r17
     8f4:	4b df       	rcall	.-362    	; 0x78c <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
     8f6:	89 91       	ld	r24, Y+
     8f8:	81 11       	cpse	r24, r1
     8fa:	fb cf       	rjmp	.-10     	; 0x8f2 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	08 95       	ret

00000904 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
     904:	80 93 1c 09 	sts	0x091C, r24	; 0x80091c <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
     908:	60 93 1d 09 	sts	0x091D, r22	; 0x80091d <nokia_lcd+0x1f9>
     90c:	08 95       	ret

0000090e <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
     916:	80 e8       	ldi	r24, 0x80	; 128
     918:	c4 de       	rcall	.-632    	; 0x6a2 <write_cmd>
	write_cmd(0x40);
     91a:	80 e4       	ldi	r24, 0x40	; 64
     91c:	c2 de       	rcall	.-636    	; 0x6a2 <write_cmd>
     91e:	c4 e2       	ldi	r28, 0x24	; 36
     920:	d7 e0       	ldi	r29, 0x07	; 7
     922:	0c e1       	ldi	r16, 0x1C	; 28
     924:	19 e0       	ldi	r17, 0x09	; 9
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	89 91       	ld	r24, Y+
     92a:	9d de       	rcall	.-710    	; 0x666 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     92c:	c0 17       	cp	r28, r16
     92e:	d1 07       	cpc	r29, r17
     930:	d1 f7       	brne	.-12     	; 0x926 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	08 95       	ret

0000093c <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     93c:	31 e1       	ldi	r19, 0x11	; 17
     93e:	fc 01       	movw	r30, r24
     940:	30 83       	st	Z, r19
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	22 e2       	ldi	r18, 0x22	; 34
     946:	20 83       	st	Z, r18
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	a3 e3       	ldi	r26, 0x33	; 51
     94c:	a0 83       	st	Z, r26
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	60 83       	st	Z, r22
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	70 83       	st	Z, r23
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	10 82       	st	Z, r1
     95a:	31 97       	sbiw	r30, 0x01	; 1
     95c:	60 e8       	ldi	r22, 0x80	; 128
     95e:	60 83       	st	Z, r22
     960:	31 97       	sbiw	r30, 0x01	; 1
     962:	10 82       	st	Z, r1
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	60 83       	st	Z, r22
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	63 e0       	ldi	r22, 0x03	; 3
     96e:	60 83       	st	Z, r22
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	64 e0       	ldi	r22, 0x04	; 4
     974:	60 83       	st	Z, r22
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	65 e0       	ldi	r22, 0x05	; 5
     97a:	60 83       	st	Z, r22
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	66 e0       	ldi	r22, 0x06	; 6
     980:	60 83       	st	Z, r22
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	67 e0       	ldi	r22, 0x07	; 7
     986:	60 83       	st	Z, r22
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	68 e0       	ldi	r22, 0x08	; 8
     98c:	60 83       	st	Z, r22
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	69 e0       	ldi	r22, 0x09	; 9
     992:	60 83       	st	Z, r22
     994:	31 97       	sbiw	r30, 0x01	; 1
     996:	60 e1       	ldi	r22, 0x10	; 16
     998:	60 83       	st	Z, r22
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	30 83       	st	Z, r19
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	32 e1       	ldi	r19, 0x12	; 18
     9a2:	30 83       	st	Z, r19
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	33 e1       	ldi	r19, 0x13	; 19
     9a8:	30 83       	st	Z, r19
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	34 e1       	ldi	r19, 0x14	; 20
     9ae:	30 83       	st	Z, r19
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	35 e1       	ldi	r19, 0x15	; 21
     9b4:	30 83       	st	Z, r19
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	36 e1       	ldi	r19, 0x16	; 22
     9ba:	30 83       	st	Z, r19
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	37 e1       	ldi	r19, 0x17	; 23
     9c0:	30 83       	st	Z, r19
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	38 e1       	ldi	r19, 0x18	; 24
     9c6:	30 83       	st	Z, r19
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	39 e1       	ldi	r19, 0x19	; 25
     9cc:	30 83       	st	Z, r19
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	30 e2       	ldi	r19, 0x20	; 32
     9d2:	30 83       	st	Z, r19
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	31 e2       	ldi	r19, 0x21	; 33
     9d8:	30 83       	st	Z, r19
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	20 83       	st	Z, r18
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	23 e2       	ldi	r18, 0x23	; 35
     9e2:	20 83       	st	Z, r18
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	40 83       	st	Z, r20
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	50 83       	st	Z, r21
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	26 e2       	ldi	r18, 0x26	; 38
     9f0:	20 83       	st	Z, r18
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	27 e2       	ldi	r18, 0x27	; 39
     9f6:	20 83       	st	Z, r18
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	28 e2       	ldi	r18, 0x28	; 40
     9fc:	20 83       	st	Z, r18
     9fe:	31 97       	sbiw	r30, 0x01	; 1
     a00:	29 e2       	ldi	r18, 0x29	; 41
     a02:	20 83       	st	Z, r18
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	20 e3       	ldi	r18, 0x30	; 48
     a08:	20 83       	st	Z, r18
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	21 e3       	ldi	r18, 0x31	; 49
     a0e:	20 83       	st	Z, r18
     a10:	86 97       	sbiw	r24, 0x26	; 38
     a12:	08 95       	ret

00000a14 <xPortStartScheduler>:
     a14:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a18:	8c e7       	ldi	r24, 0x7C	; 124
     a1a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a1e:	8b e0       	ldi	r24, 0x0B	; 11
     a20:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a24:	ef e6       	ldi	r30, 0x6F	; 111
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	80 83       	st	Z, r24
     a2e:	a0 91 76 09 	lds	r26, 0x0976	; 0x800976 <pxCurrentTCB>
     a32:	b0 91 77 09 	lds	r27, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     a36:	cd 91       	ld	r28, X+
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	dd 91       	ld	r29, X+
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	9f 90       	pop	r9
     a6c:	8f 90       	pop	r8
     a6e:	7f 90       	pop	r7
     a70:	6f 90       	pop	r6
     a72:	5f 90       	pop	r5
     a74:	4f 90       	pop	r4
     a76:	3f 90       	pop	r3
     a78:	2f 90       	pop	r2
     a7a:	1f 90       	pop	r1
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	08 95       	ret
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	08 95       	ret

00000a88 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	0f 92       	push	r0
     a90:	1f 92       	push	r1
     a92:	11 24       	eor	r1, r1
     a94:	2f 92       	push	r2
     a96:	3f 92       	push	r3
     a98:	4f 92       	push	r4
     a9a:	5f 92       	push	r5
     a9c:	6f 92       	push	r6
     a9e:	7f 92       	push	r7
     aa0:	8f 92       	push	r8
     aa2:	9f 92       	push	r9
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
     ad0:	a0 91 76 09 	lds	r26, 0x0976	; 0x800976 <pxCurrentTCB>
     ad4:	b0 91 77 09 	lds	r27, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     ad8:	0d b6       	in	r0, 0x3d	; 61
     ada:	0d 92       	st	X+, r0
     adc:	0e b6       	in	r0, 0x3e	; 62
     ade:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     ae0:	70 d3       	rcall	.+1760   	; 0x11c2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     ae2:	a0 91 76 09 	lds	r26, 0x0976	; 0x800976 <pxCurrentTCB>
     ae6:	b0 91 77 09 	lds	r27, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     aea:	cd 91       	ld	r28, X+
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	dd 91       	ld	r29, X+
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	7f 90       	pop	r7
     b24:	6f 90       	pop	r6
     b26:	5f 90       	pop	r5
     b28:	4f 90       	pop	r4
     b2a:	3f 90       	pop	r3
     b2c:	2f 90       	pop	r2
     b2e:	1f 90       	pop	r1
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b36:	08 95       	ret

00000b38 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	0f 92       	push	r0
     b40:	1f 92       	push	r1
     b42:	11 24       	eor	r1, r1
     b44:	2f 92       	push	r2
     b46:	3f 92       	push	r3
     b48:	4f 92       	push	r4
     b4a:	5f 92       	push	r5
     b4c:	6f 92       	push	r6
     b4e:	7f 92       	push	r7
     b50:	8f 92       	push	r8
     b52:	9f 92       	push	r9
     b54:	af 92       	push	r10
     b56:	bf 92       	push	r11
     b58:	cf 92       	push	r12
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	2f 93       	push	r18
     b66:	3f 93       	push	r19
     b68:	4f 93       	push	r20
     b6a:	5f 93       	push	r21
     b6c:	6f 93       	push	r22
     b6e:	7f 93       	push	r23
     b70:	8f 93       	push	r24
     b72:	9f 93       	push	r25
     b74:	af 93       	push	r26
     b76:	bf 93       	push	r27
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	a0 91 76 09 	lds	r26, 0x0976	; 0x800976 <pxCurrentTCB>
     b84:	b0 91 77 09 	lds	r27, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     b88:	0d b6       	in	r0, 0x3d	; 61
     b8a:	0d 92       	st	X+, r0
     b8c:	0e b6       	in	r0, 0x3e	; 62
     b8e:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     b90:	85 d1       	rcall	.+778    	; 0xe9c <vTaskIncrementTick>
	vTaskSwitchContext();
     b92:	17 d3       	rcall	.+1582   	; 0x11c2 <vTaskSwitchContext>
     b94:	a0 91 76 09 	lds	r26, 0x0976	; 0x800976 <pxCurrentTCB>
	portRESTORE_CONTEXT();
     b98:	b0 91 77 09 	lds	r27, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     b9c:	cd 91       	ld	r28, X+
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	dd 91       	ld	r29, X+
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	ff 91       	pop	r31
     ba6:	ef 91       	pop	r30
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	bf 90       	pop	r11
     bce:	af 90       	pop	r10
     bd0:	9f 90       	pop	r9
     bd2:	8f 90       	pop	r8
     bd4:	7f 90       	pop	r7
     bd6:	6f 90       	pop	r6
     bd8:	5f 90       	pop	r5
     bda:	4f 90       	pop	r4
     bdc:	3f 90       	pop	r3
     bde:	2f 90       	pop	r2
     be0:	1f 90       	pop	r1
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 90       	pop	r0
     be8:	08 95       	ret

00000bea <__vector_13>:

	asm volatile ( "ret" );
     bea:	a6 df       	rcall	.-180    	; 0xb38 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
     bec:	18 95       	reti

00000bee <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	ec 01       	movw	r28, r24
     bf4:	e0 91 76 09 	lds	r30, 0x0976	; 0x800976 <pxCurrentTCB>
     bf8:	f0 91 77 09 	lds	r31, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     bfc:	93 83       	std	Z+3, r25	; 0x03
     bfe:	82 83       	std	Z+2, r24	; 0x02
     c00:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <xTickCount>
     c04:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <xTickCount+0x1>
     c08:	c8 17       	cp	r28, r24
     c0a:	d9 07       	cpc	r29, r25
     c0c:	60 f4       	brcc	.+24     	; 0xc26 <prvAddCurrentTaskToDelayedList+0x38>
     c0e:	60 91 76 09 	lds	r22, 0x0976	; 0x800976 <pxCurrentTCB>
     c12:	70 91 77 09 	lds	r23, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     c16:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <pxOverflowDelayedTaskList>
     c1a:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <pxOverflowDelayedTaskList+0x1>
     c1e:	6e 5f       	subi	r22, 0xFE	; 254
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	a1 db       	rcall	.-2238   	; 0x366 <vListInsert>
     c24:	16 c0       	rjmp	.+44     	; 0xc52 <prvAddCurrentTaskToDelayedList+0x64>
     c26:	60 91 76 09 	lds	r22, 0x0976	; 0x800976 <pxCurrentTCB>
     c2a:	70 91 77 09 	lds	r23, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     c2e:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <pxDelayedTaskList>
     c32:	90 91 3f 09 	lds	r25, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
     c36:	6e 5f       	subi	r22, 0xFE	; 254
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	95 db       	rcall	.-2262   	; 0x366 <vListInsert>
     c3c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     c40:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     c44:	c8 17       	cp	r28, r24
     c46:	d9 07       	cpc	r29, r25
     c48:	20 f4       	brcc	.+8      	; 0xc52 <prvAddCurrentTaskToDelayedList+0x64>
     c4a:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <xNextTaskUnblockTime+0x1>
     c4e:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <xNextTaskUnblockTime>
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <xTaskGenericCreate>:
     c58:	4f 92       	push	r4
     c5a:	5f 92       	push	r5
     c5c:	6f 92       	push	r6
     c5e:	7f 92       	push	r7
     c60:	8f 92       	push	r8
     c62:	9f 92       	push	r9
     c64:	af 92       	push	r10
     c66:	bf 92       	push	r11
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	5c 01       	movw	r10, r24
     c7a:	4b 01       	movw	r8, r22
     c7c:	3a 01       	movw	r6, r20
     c7e:	29 01       	movw	r4, r18
     c80:	81 e2       	ldi	r24, 0x21	; 33
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	12 db       	rcall	.-2524   	; 0x2aa <pvPortMalloc>
     c86:	ec 01       	movw	r28, r24
     c88:	89 2b       	or	r24, r25
     c8a:	09 f4       	brne	.+2      	; 0xc8e <xTaskGenericCreate+0x36>
     c8c:	c6 c0       	rjmp	.+396    	; 0xe1a <xTaskGenericCreate+0x1c2>
     c8e:	c1 14       	cp	r12, r1
     c90:	d1 04       	cpc	r13, r1
     c92:	09 f0       	breq	.+2      	; 0xc96 <xTaskGenericCreate+0x3e>
     c94:	be c0       	rjmp	.+380    	; 0xe12 <xTaskGenericCreate+0x1ba>
     c96:	c3 01       	movw	r24, r6
     c98:	08 db       	rcall	.-2544   	; 0x2aa <pvPortMalloc>
     c9a:	98 8f       	std	Y+24, r25	; 0x18
     c9c:	8f 8b       	std	Y+23, r24	; 0x17
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	19 f4       	brne	.+6      	; 0xca8 <xTaskGenericCreate+0x50>
     ca2:	ce 01       	movw	r24, r28
     ca4:	26 db       	rcall	.-2484   	; 0x2f2 <vPortFree>
     ca6:	b9 c0       	rjmp	.+370    	; 0xe1a <xTaskGenericCreate+0x1c2>
     ca8:	a3 01       	movw	r20, r6
     caa:	65 ea       	ldi	r22, 0xA5	; 165
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	24 d3       	rcall	.+1608   	; 0x12f8 <memset>
     cb0:	93 01       	movw	r18, r6
     cb2:	21 50       	subi	r18, 0x01	; 1
     cb4:	31 09       	sbc	r19, r1
     cb6:	8f 89       	ldd	r24, Y+23	; 0x17
     cb8:	98 8d       	ldd	r25, Y+24	; 0x18
     cba:	3c 01       	movw	r6, r24
     cbc:	62 0e       	add	r6, r18
     cbe:	73 1e       	adc	r7, r19
     cc0:	48 e0       	ldi	r20, 0x08	; 8
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	b4 01       	movw	r22, r8
     cc6:	ce 01       	movw	r24, r28
     cc8:	49 96       	adiw	r24, 0x19	; 25
     cca:	1d d3       	rcall	.+1594   	; 0x1306 <strncpy>
     ccc:	18 a2       	std	Y+32, r1	; 0x20
     cce:	10 2f       	mov	r17, r16
     cd0:	04 30       	cpi	r16, 0x04	; 4
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <xTaskGenericCreate+0x7e>
     cd4:	13 e0       	ldi	r17, 0x03	; 3
     cd6:	1e 8b       	std	Y+22, r17	; 0x16
     cd8:	6e 01       	movw	r12, r28
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	c8 0e       	add	r12, r24
     cde:	d1 1c       	adc	r13, r1
     ce0:	c6 01       	movw	r24, r12
     ce2:	16 db       	rcall	.-2516   	; 0x310 <vListInitialiseItem>
     ce4:	ce 01       	movw	r24, r28
     ce6:	0c 96       	adiw	r24, 0x0c	; 12
     ce8:	13 db       	rcall	.-2522   	; 0x310 <vListInitialiseItem>
     cea:	d9 87       	std	Y+9, r29	; 0x09
     cec:	c8 87       	std	Y+8, r28	; 0x08
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	81 1b       	sub	r24, r17
     cf4:	91 09       	sbc	r25, r1
     cf6:	9d 87       	std	Y+13, r25	; 0x0d
     cf8:	8c 87       	std	Y+12, r24	; 0x0c
     cfa:	db 8b       	std	Y+19, r29	; 0x13
     cfc:	ca 8b       	std	Y+18, r28	; 0x12
     cfe:	a2 01       	movw	r20, r4
     d00:	b5 01       	movw	r22, r10
     d02:	c3 01       	movw	r24, r6
     d04:	1b de       	rcall	.-970    	; 0x93c <pxPortInitialiseStack>
     d06:	99 83       	std	Y+1, r25	; 0x01
     d08:	88 83       	st	Y, r24
     d0a:	e1 14       	cp	r14, r1
     d0c:	f1 04       	cpc	r15, r1
     d0e:	19 f0       	breq	.+6      	; 0xd16 <xTaskGenericCreate+0xbe>
     d10:	f7 01       	movw	r30, r14
     d12:	d1 83       	std	Z+1, r29	; 0x01
     d14:	c0 83       	st	Z, r28
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	0f 92       	push	r0
     d1c:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <uxCurrentNumberOfTasks>
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <uxCurrentNumberOfTasks>
     d26:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <pxCurrentTCB>
     d2a:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     d2e:	89 2b       	or	r24, r25
     d30:	69 f5       	brne	.+90     	; 0xd8c <xTaskGenericCreate+0x134>
     d32:	d0 93 77 09 	sts	0x0977, r29	; 0x800977 <pxCurrentTCB+0x1>
     d36:	c0 93 76 09 	sts	0x0976, r28	; 0x800976 <pxCurrentTCB>
     d3a:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <uxCurrentNumberOfTasks>
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	a1 f5       	brne	.+104    	; 0xdaa <xTaskGenericCreate+0x152>
     d42:	82 e5       	ldi	r24, 0x52	; 82
     d44:	99 e0       	ldi	r25, 0x09	; 9
     d46:	d6 da       	rcall	.-2644   	; 0x2f4 <vListInitialise>
     d48:	8b e5       	ldi	r24, 0x5B	; 91
     d4a:	99 e0       	ldi	r25, 0x09	; 9
     d4c:	d3 da       	rcall	.-2650   	; 0x2f4 <vListInitialise>
     d4e:	84 e6       	ldi	r24, 0x64	; 100
     d50:	99 e0       	ldi	r25, 0x09	; 9
     d52:	d0 da       	rcall	.-2656   	; 0x2f4 <vListInitialise>
     d54:	8d e6       	ldi	r24, 0x6D	; 109
     d56:	99 e0       	ldi	r25, 0x09	; 9
     d58:	cd da       	rcall	.-2662   	; 0x2f4 <vListInitialise>
     d5a:	89 e4       	ldi	r24, 0x49	; 73
     d5c:	99 e0       	ldi	r25, 0x09	; 9
     d5e:	ca da       	rcall	.-2668   	; 0x2f4 <vListInitialise>
     d60:	80 e4       	ldi	r24, 0x40	; 64
     d62:	99 e0       	ldi	r25, 0x09	; 9
     d64:	c7 da       	rcall	.-2674   	; 0x2f4 <vListInitialise>
     d66:	83 e3       	ldi	r24, 0x33	; 51
     d68:	99 e0       	ldi	r25, 0x09	; 9
     d6a:	c4 da       	rcall	.-2680   	; 0x2f4 <vListInitialise>
     d6c:	8a e2       	ldi	r24, 0x2A	; 42
     d6e:	99 e0       	ldi	r25, 0x09	; 9
     d70:	c1 da       	rcall	.-2686   	; 0x2f4 <vListInitialise>
     d72:	89 e4       	ldi	r24, 0x49	; 73
     d74:	99 e0       	ldi	r25, 0x09	; 9
     d76:	90 93 3f 09 	sts	0x093F, r25	; 0x80093f <pxDelayedTaskList+0x1>
     d7a:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <pxDelayedTaskList>
     d7e:	80 e4       	ldi	r24, 0x40	; 64
     d80:	99 e0       	ldi	r25, 0x09	; 9
     d82:	90 93 3d 09 	sts	0x093D, r25	; 0x80093d <pxOverflowDelayedTaskList+0x1>
     d86:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <pxOverflowDelayedTaskList>
     d8a:	0f c0       	rjmp	.+30     	; 0xdaa <xTaskGenericCreate+0x152>
     d8c:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <xSchedulerRunning>
     d90:	81 11       	cpse	r24, r1
     d92:	0b c0       	rjmp	.+22     	; 0xdaa <xTaskGenericCreate+0x152>
     d94:	e0 91 76 09 	lds	r30, 0x0976	; 0x800976 <pxCurrentTCB>
     d98:	f0 91 77 09 	lds	r31, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     d9c:	86 89       	ldd	r24, Z+22	; 0x16
     d9e:	08 17       	cp	r16, r24
     da0:	20 f0       	brcs	.+8      	; 0xdaa <xTaskGenericCreate+0x152>
     da2:	d0 93 77 09 	sts	0x0977, r29	; 0x800977 <pxCurrentTCB+0x1>
     da6:	c0 93 76 09 	sts	0x0976, r28	; 0x800976 <pxCurrentTCB>
     daa:	8e 89       	ldd	r24, Y+22	; 0x16
     dac:	90 91 25 09 	lds	r25, 0x0925	; 0x800925 <uxTopUsedPriority>
     db0:	98 17       	cp	r25, r24
     db2:	10 f4       	brcc	.+4      	; 0xdb8 <xTaskGenericCreate+0x160>
     db4:	80 93 25 09 	sts	0x0925, r24	; 0x800925 <uxTopUsedPriority>
     db8:	90 91 1e 09 	lds	r25, 0x091E	; 0x80091e <uxTaskNumber>
     dbc:	9f 5f       	subi	r25, 0xFF	; 255
     dbe:	90 93 1e 09 	sts	0x091E, r25	; 0x80091e <uxTaskNumber>
     dc2:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <uxTopReadyPriority>
     dc6:	98 17       	cp	r25, r24
     dc8:	10 f4       	brcc	.+4      	; 0xdce <xTaskGenericCreate+0x176>
     dca:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <uxTopReadyPriority>
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	9c 01       	movw	r18, r24
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	82 0f       	add	r24, r18
     de0:	93 1f       	adc	r25, r19
     de2:	b6 01       	movw	r22, r12
     de4:	8e 5a       	subi	r24, 0xAE	; 174
     de6:	96 4f       	sbci	r25, 0xF6	; 246
     de8:	97 da       	rcall	.-2770   	; 0x318 <vListInsertEnd>
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	80 91 23 09 	lds	r24, 0x0923	; 0x800923 <xSchedulerRunning>
     df2:	88 23       	and	r24, r24
     df4:	51 f0       	breq	.+20     	; 0xe0a <xTaskGenericCreate+0x1b2>
     df6:	e0 91 76 09 	lds	r30, 0x0976	; 0x800976 <pxCurrentTCB>
     dfa:	f0 91 77 09 	lds	r31, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
     dfe:	86 89       	ldd	r24, Z+22	; 0x16
     e00:	80 17       	cp	r24, r16
     e02:	28 f4       	brcc	.+10     	; 0xe0e <xTaskGenericCreate+0x1b6>
     e04:	41 de       	rcall	.-894    	; 0xa88 <vPortYield>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <xTaskGenericCreate+0x1c4>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	07 c0       	rjmp	.+14     	; 0xe1c <xTaskGenericCreate+0x1c4>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	05 c0       	rjmp	.+10     	; 0xe1c <xTaskGenericCreate+0x1c4>
     e12:	d8 8e       	std	Y+24, r13	; 0x18
     e14:	cf 8a       	std	Y+23, r12	; 0x17
     e16:	c6 01       	movw	r24, r12
     e18:	47 cf       	rjmp	.-370    	; 0xca8 <xTaskGenericCreate+0x50>
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	9f 90       	pop	r9
     e32:	8f 90       	pop	r8
     e34:	7f 90       	pop	r7
     e36:	6f 90       	pop	r6
     e38:	5f 90       	pop	r5
     e3a:	4f 90       	pop	r4
     e3c:	08 95       	ret

00000e3e <vTaskStartScheduler>:
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	a1 2c       	mov	r10, r1
     e4e:	b1 2c       	mov	r11, r1
     e50:	c1 2c       	mov	r12, r1
     e52:	d1 2c       	mov	r13, r1
     e54:	e1 2c       	mov	r14, r1
     e56:	f1 2c       	mov	r15, r1
     e58:	00 e0       	ldi	r16, 0x00	; 0
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	45 e5       	ldi	r20, 0x55	; 85
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	6e e3       	ldi	r22, 0x3E	; 62
     e64:	71 e0       	ldi	r23, 0x01	; 1
     e66:	8b ea       	ldi	r24, 0xAB	; 171
     e68:	98 e0       	ldi	r25, 0x08	; 8
     e6a:	f6 de       	rcall	.-532    	; 0xc58 <xTaskGenericCreate>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	41 f4       	brne	.+16     	; 0xe80 <vTaskStartScheduler+0x42>
     e70:	f8 94       	cli
     e72:	80 93 23 09 	sts	0x0923, r24	; 0x800923 <xSchedulerRunning>
     e76:	10 92 27 09 	sts	0x0927, r1	; 0x800927 <xTickCount+0x1>
     e7a:	10 92 26 09 	sts	0x0926, r1	; 0x800926 <xTickCount>
     e7e:	ca dd       	rcall	.-1132   	; 0xa14 <xPortStartScheduler>
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	08 95       	ret

00000e90 <vTaskSuspendAll>:
     e90:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <uxSchedulerSuspended>
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 22 09 	sts	0x0922, r24	; 0x800922 <uxSchedulerSuspended>
     e9a:	08 95       	ret

00000e9c <vTaskIncrementTick>:
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <uxSchedulerSuspended>
     ea8:	81 11       	cpse	r24, r1
     eaa:	af c0       	rjmp	.+350    	; 0x100a <vTaskIncrementTick+0x16e>
     eac:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <xTickCount>
     eb0:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <xTickCount+0x1>
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <xTickCount+0x1>
     eba:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <xTickCount>
     ebe:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <xTickCount>
     ec2:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <xTickCount+0x1>
     ec6:	89 2b       	or	r24, r25
     ec8:	99 f5       	brne	.+102    	; 0xf30 <vTaskIncrementTick+0x94>
     eca:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <pxDelayedTaskList>
     ece:	90 91 3f 09 	lds	r25, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
     ed2:	20 91 3c 09 	lds	r18, 0x093C	; 0x80093c <pxOverflowDelayedTaskList>
     ed6:	30 91 3d 09 	lds	r19, 0x093D	; 0x80093d <pxOverflowDelayedTaskList+0x1>
     eda:	30 93 3f 09 	sts	0x093F, r19	; 0x80093f <pxDelayedTaskList+0x1>
     ede:	20 93 3e 09 	sts	0x093E, r18	; 0x80093e <pxDelayedTaskList>
     ee2:	90 93 3d 09 	sts	0x093D, r25	; 0x80093d <pxOverflowDelayedTaskList+0x1>
     ee6:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <pxOverflowDelayedTaskList>
     eea:	80 91 1f 09 	lds	r24, 0x091F	; 0x80091f <xNumOfOverflows>
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	80 93 1f 09 	sts	0x091F, r24	; 0x80091f <xNumOfOverflows>
     ef4:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <pxDelayedTaskList>
     ef8:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
     efc:	80 81       	ld	r24, Z
     efe:	81 11       	cpse	r24, r1
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <vTaskIncrementTick+0x74>
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	9f ef       	ldi	r25, 0xFF	; 255
     f06:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     f0a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     f0e:	10 c0       	rjmp	.+32     	; 0xf30 <vTaskIncrementTick+0x94>
     f10:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <pxDelayedTaskList>
     f14:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
     f18:	05 80       	ldd	r0, Z+5	; 0x05
     f1a:	f6 81       	ldd	r31, Z+6	; 0x06
     f1c:	e0 2d       	mov	r30, r0
     f1e:	06 80       	ldd	r0, Z+6	; 0x06
     f20:	f7 81       	ldd	r31, Z+7	; 0x07
     f22:	e0 2d       	mov	r30, r0
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     f2c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     f30:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <xTickCount>
     f34:	30 91 27 09 	lds	r19, 0x0927	; 0x800927 <xTickCount+0x1>
     f38:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <xNextTaskUnblockTime>
     f3c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <xNextTaskUnblockTime+0x1>
     f40:	28 17       	cp	r18, r24
     f42:	39 07       	cpc	r19, r25
     f44:	08 f4       	brcc	.+2      	; 0xf48 <vTaskIncrementTick+0xac>
     f46:	66 c0       	rjmp	.+204    	; 0x1014 <vTaskIncrementTick+0x178>
     f48:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <pxDelayedTaskList>
     f4c:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
     f50:	80 81       	ld	r24, Z
     f52:	88 23       	and	r24, r24
     f54:	99 f0       	breq	.+38     	; 0xf7c <vTaskIncrementTick+0xe0>
     f56:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <pxDelayedTaskList>
     f5a:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
     f5e:	05 80       	ldd	r0, Z+5	; 0x05
     f60:	f6 81       	ldd	r31, Z+6	; 0x06
     f62:	e0 2d       	mov	r30, r0
     f64:	c6 81       	ldd	r28, Z+6	; 0x06
     f66:	d7 81       	ldd	r29, Z+7	; 0x07
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <xTickCount>
     f70:	30 91 27 09 	lds	r19, 0x0927	; 0x800927 <xTickCount+0x1>
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	f8 f4       	brcc	.+62     	; 0xfb8 <vTaskIncrementTick+0x11c>
     f7a:	19 c0       	rjmp	.+50     	; 0xfae <vTaskIncrementTick+0x112>
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     f84:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     f88:	45 c0       	rjmp	.+138    	; 0x1014 <vTaskIncrementTick+0x178>
     f8a:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <pxDelayedTaskList>
     f8e:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
     f92:	05 80       	ldd	r0, Z+5	; 0x05
     f94:	f6 81       	ldd	r31, Z+6	; 0x06
     f96:	e0 2d       	mov	r30, r0
     f98:	c6 81       	ldd	r28, Z+6	; 0x06
     f9a:	d7 81       	ldd	r29, Z+7	; 0x07
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	9b 81       	ldd	r25, Y+3	; 0x03
     fa0:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <xTickCount>
     fa4:	30 91 27 09 	lds	r19, 0x0927	; 0x800927 <xTickCount+0x1>
     fa8:	28 17       	cp	r18, r24
     faa:	39 07       	cpc	r19, r25
     fac:	28 f4       	brcc	.+10     	; 0xfb8 <vTaskIncrementTick+0x11c>
     fae:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <xNextTaskUnblockTime+0x1>
     fb2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <xNextTaskUnblockTime>
     fb6:	2e c0       	rjmp	.+92     	; 0x1014 <vTaskIncrementTick+0x178>
     fb8:	8e 01       	movw	r16, r28
     fba:	0e 5f       	subi	r16, 0xFE	; 254
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	c8 01       	movw	r24, r16
     fc0:	0d da       	rcall	.-3046   	; 0x3dc <vListRemove>
     fc2:	8c 89       	ldd	r24, Y+20	; 0x14
     fc4:	9d 89       	ldd	r25, Y+21	; 0x15
     fc6:	89 2b       	or	r24, r25
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <vTaskIncrementTick+0x134>
     fca:	ce 01       	movw	r24, r28
     fcc:	0c 96       	adiw	r24, 0x0c	; 12
     fce:	06 da       	rcall	.-3060   	; 0x3dc <vListRemove>
     fd0:	8e 89       	ldd	r24, Y+22	; 0x16
     fd2:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <uxTopReadyPriority>
     fd6:	98 17       	cp	r25, r24
     fd8:	10 f4       	brcc	.+4      	; 0xfde <vTaskIncrementTick+0x142>
     fda:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <uxTopReadyPriority>
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c 01       	movw	r18, r24
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	22 0f       	add	r18, r18
     fe8:	33 1f       	adc	r19, r19
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	b8 01       	movw	r22, r16
     ff4:	8e 5a       	subi	r24, 0xAE	; 174
     ff6:	96 4f       	sbci	r25, 0xF6	; 246
     ff8:	8f d9       	rcall	.-3298   	; 0x318 <vListInsertEnd>
     ffa:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <pxDelayedTaskList>
     ffe:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <pxDelayedTaskList+0x1>
    1002:	80 81       	ld	r24, Z
    1004:	81 11       	cpse	r24, r1
    1006:	c1 cf       	rjmp	.-126    	; 0xf8a <vTaskIncrementTick+0xee>
    1008:	b9 cf       	rjmp	.-142    	; 0xf7c <vTaskIncrementTick+0xe0>
    100a:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxMissedTicks>
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <uxMissedTicks>
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

0000101e <xTaskResumeAll>:
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	0f 92       	push	r0
    1034:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <uxSchedulerSuspended>
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	80 93 22 09 	sts	0x0922, r24	; 0x800922 <uxSchedulerSuspended>
    103e:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <uxSchedulerSuspended>
    1042:	81 11       	cpse	r24, r1
    1044:	5f c0       	rjmp	.+190    	; 0x1104 <xTaskResumeAll+0xe6>
    1046:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <uxCurrentNumberOfTasks>
    104a:	81 11       	cpse	r24, r1
    104c:	2f c0       	rjmp	.+94     	; 0x10ac <xTaskResumeAll+0x8e>
    104e:	5d c0       	rjmp	.+186    	; 0x110a <xTaskResumeAll+0xec>
    1050:	d7 01       	movw	r26, r14
    1052:	15 96       	adiw	r26, 0x05	; 5
    1054:	ed 91       	ld	r30, X+
    1056:	fc 91       	ld	r31, X
    1058:	16 97       	sbiw	r26, 0x06	; 6
    105a:	c6 81       	ldd	r28, Z+6	; 0x06
    105c:	d7 81       	ldd	r29, Z+7	; 0x07
    105e:	ce 01       	movw	r24, r28
    1060:	0c 96       	adiw	r24, 0x0c	; 12
    1062:	bc d9       	rcall	.-3208   	; 0x3dc <vListRemove>
    1064:	8e 01       	movw	r16, r28
    1066:	0e 5f       	subi	r16, 0xFE	; 254
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	c8 01       	movw	r24, r16
    106c:	b7 d9       	rcall	.-3218   	; 0x3dc <vListRemove>
    106e:	8e 89       	ldd	r24, Y+22	; 0x16
    1070:	90 91 24 09 	lds	r25, 0x0924	; 0x800924 <uxTopReadyPriority>
    1074:	98 17       	cp	r25, r24
    1076:	10 f4       	brcc	.+4      	; 0x107c <xTaskResumeAll+0x5e>
    1078:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <uxTopReadyPriority>
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9c 01       	movw	r18, r24
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	82 0f       	add	r24, r18
    108e:	93 1f       	adc	r25, r19
    1090:	b8 01       	movw	r22, r16
    1092:	8e 5a       	subi	r24, 0xAE	; 174
    1094:	96 4f       	sbci	r25, 0xF6	; 246
    1096:	40 d9       	rcall	.-3456   	; 0x318 <vListInsertEnd>
    1098:	e0 91 76 09 	lds	r30, 0x0976	; 0x800976 <pxCurrentTCB>
    109c:	f0 91 77 09 	lds	r31, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
    10a0:	9e 89       	ldd	r25, Y+22	; 0x16
    10a2:	86 89       	ldd	r24, Z+22	; 0x16
    10a4:	98 17       	cp	r25, r24
    10a6:	58 f0       	brcs	.+22     	; 0x10be <xTaskResumeAll+0xa0>
    10a8:	dc 2c       	mov	r13, r12
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <xTaskResumeAll+0xa0>
    10ac:	d1 2c       	mov	r13, r1
    10ae:	0f 2e       	mov	r0, r31
    10b0:	f3 e3       	ldi	r31, 0x33	; 51
    10b2:	ef 2e       	mov	r14, r31
    10b4:	f9 e0       	ldi	r31, 0x09	; 9
    10b6:	ff 2e       	mov	r15, r31
    10b8:	f0 2d       	mov	r31, r0
    10ba:	cc 24       	eor	r12, r12
    10bc:	c3 94       	inc	r12
    10be:	f7 01       	movw	r30, r14
    10c0:	80 81       	ld	r24, Z
    10c2:	81 11       	cpse	r24, r1
    10c4:	c5 cf       	rjmp	.-118    	; 0x1050 <xTaskResumeAll+0x32>
    10c6:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxMissedTicks>
    10ca:	88 23       	and	r24, r24
    10cc:	79 f0       	breq	.+30     	; 0x10ec <xTaskResumeAll+0xce>
    10ce:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxMissedTicks>
    10d2:	88 23       	and	r24, r24
    10d4:	91 f0       	breq	.+36     	; 0x10fa <xTaskResumeAll+0xdc>
    10d6:	e2 de       	rcall	.-572    	; 0xe9c <vTaskIncrementTick>
    10d8:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxMissedTicks>
    10dc:	81 50       	subi	r24, 0x01	; 1
    10de:	80 93 21 09 	sts	0x0921, r24	; 0x800921 <uxMissedTicks>
    10e2:	80 91 21 09 	lds	r24, 0x0921	; 0x800921 <uxMissedTicks>
    10e6:	81 11       	cpse	r24, r1
    10e8:	f6 cf       	rjmp	.-20     	; 0x10d6 <xTaskResumeAll+0xb8>
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <xTaskResumeAll+0xdc>
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	df 16       	cp	r13, r31
    10f0:	21 f0       	breq	.+8      	; 0x10fa <xTaskResumeAll+0xdc>
    10f2:	80 91 20 09 	lds	r24, 0x0920	; 0x800920 <xMissedYield>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	39 f4       	brne	.+14     	; 0x1108 <xTaskResumeAll+0xea>
    10fa:	10 92 20 09 	sts	0x0920, r1	; 0x800920 <xMissedYield>
    10fe:	c4 dc       	rcall	.-1656   	; 0xa88 <vPortYield>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	03 c0       	rjmp	.+6      	; 0x110a <xTaskResumeAll+0xec>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	01 c0       	rjmp	.+2      	; 0x110a <xTaskResumeAll+0xec>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	08 95       	ret

00001120 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1126:	89 2b       	or	r24, r25
    1128:	91 f0       	breq	.+36     	; 0x114e <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
    112a:	b2 de       	rcall	.-668    	; 0xe90 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    112c:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <xTickCount>
    1130:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <xTickCount+0x1>
    1134:	c8 0f       	add	r28, r24
    1136:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1138:	80 91 76 09 	lds	r24, 0x0976	; 0x800976 <pxCurrentTCB>
    113c:	90 91 77 09 	lds	r25, 0x0977	; 0x800977 <pxCurrentTCB+0x1>
    1140:	02 96       	adiw	r24, 0x02	; 2
    1142:	4c d9       	rcall	.-3432   	; 0x3dc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1144:	ce 01       	movw	r24, r28
    1146:	53 dd       	rcall	.-1370   	; 0xbee <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1148:	6a df       	rcall	.-300    	; 0x101e <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    114a:	81 11       	cpse	r24, r1
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    114e:	9c dc       	rcall	.-1736   	; 0xa88 <vPortYield>
    1150:	df 91       	pop	r29
		}
	}
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <prvIdleTask>:
    1156:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1158:	fa e2       	ldi	r31, 0x2A	; 42
    115a:	ef 2e       	mov	r14, r31
    115c:	f9 e0       	ldi	r31, 0x09	; 9
    115e:	ff 2e       	mov	r15, r31
    1160:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1162:	c2 e5       	ldi	r28, 0x52	; 82
    1164:	d9 e0       	ldi	r29, 0x09	; 9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1166:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <uxTasksDeleted>
    116a:	88 23       	and	r24, r24
    116c:	29 f1       	breq	.+74     	; 0x11b8 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
    116e:	90 de       	rcall	.-736    	; 0xe90 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1170:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    1172:	1c 91       	ld	r17, X
    1174:	54 df       	rcall	.-344    	; 0x101e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1176:	11 23       	and	r17, r17
    1178:	f9 f0       	breq	.+62     	; 0x11b8 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1180:	d7 01       	movw	r26, r14
    1182:	15 96       	adiw	r26, 0x05	; 5
    1184:	ed 91       	ld	r30, X+
    1186:	fc 91       	ld	r31, X
    1188:	16 97       	sbiw	r26, 0x06	; 6
    118a:	06 81       	ldd	r16, Z+6	; 0x06
    118c:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    118e:	c8 01       	movw	r24, r16
    1190:	02 96       	adiw	r24, 0x02	; 2
    1192:	24 d9       	rcall	.-3512   	; 0x3dc <vListRemove>
					--uxCurrentNumberOfTasks;
    1194:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <uxCurrentNumberOfTasks>
    1198:	81 50       	subi	r24, 0x01	; 1
    119a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    119e:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <uxTasksDeleted>
    11a2:	81 50       	subi	r24, 0x01	; 1
    11a4:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    11ac:	f8 01       	movw	r30, r16
    11ae:	87 89       	ldd	r24, Z+23	; 0x17
    11b0:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
    11b2:	9f d8       	rcall	.-3778   	; 0x2f2 <vPortFree>
    11b4:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    11b6:	9d d8       	rcall	.-3782   	; 0x2f2 <vPortFree>
    11b8:	88 81       	ld	r24, Y
    11ba:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    11bc:	a0 f2       	brcs	.-88     	; 0x1166 <prvIdleTask+0x10>
    11be:	64 dc       	rcall	.-1848   	; 0xa88 <vPortYield>
    11c0:	d2 cf       	rjmp	.-92     	; 0x1166 <prvIdleTask+0x10>

000011c2 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    11c2:	80 91 22 09 	lds	r24, 0x0922	; 0x800922 <uxSchedulerSuspended>
    11c6:	81 11       	cpse	r24, r1
    11c8:	13 c0       	rjmp	.+38     	; 0x11f0 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    11ca:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <uxTopReadyPriority>
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	ee 0f       	add	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	8e 0f       	add	r24, r30
    11e0:	9f 1f       	adc	r25, r31
    11e2:	fc 01       	movw	r30, r24
    11e4:	ee 5a       	subi	r30, 0xAE	; 174
    11e6:	f6 4f       	sbci	r31, 0xF6	; 246
    11e8:	80 81       	ld	r24, Z
    11ea:	88 23       	and	r24, r24
    11ec:	29 f0       	breq	.+10     	; 0x11f8 <vTaskSwitchContext+0x36>
    11ee:	1b c0       	rjmp	.+54     	; 0x1226 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <xMissedYield>
    11f6:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    11f8:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <uxTopReadyPriority>
    11fc:	81 50       	subi	r24, 0x01	; 1
    11fe:	80 93 24 09 	sts	0x0924, r24	; 0x800924 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1202:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <uxTopReadyPriority>
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	fc 01       	movw	r30, r24
    120a:	ee 0f       	add	r30, r30
    120c:	ff 1f       	adc	r31, r31
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	8e 0f       	add	r24, r30
    1218:	9f 1f       	adc	r25, r31
    121a:	fc 01       	movw	r30, r24
    121c:	ee 5a       	subi	r30, 0xAE	; 174
    121e:	f6 4f       	sbci	r31, 0xF6	; 246
    1220:	80 81       	ld	r24, Z
    1222:	88 23       	and	r24, r24
    1224:	49 f3       	breq	.-46     	; 0x11f8 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1226:	80 91 24 09 	lds	r24, 0x0924	; 0x800924 <uxTopReadyPriority>
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9c 01       	movw	r18, r24
    122e:	22 0f       	add	r18, r18
    1230:	33 1f       	adc	r19, r19
    1232:	22 0f       	add	r18, r18
    1234:	33 1f       	adc	r19, r19
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	28 0f       	add	r18, r24
    123c:	39 1f       	adc	r19, r25
    123e:	d9 01       	movw	r26, r18
    1240:	ae 5a       	subi	r26, 0xAE	; 174
    1242:	b6 4f       	sbci	r27, 0xF6	; 246
    1244:	11 96       	adiw	r26, 0x01	; 1
    1246:	ed 91       	ld	r30, X+
    1248:	fc 91       	ld	r31, X
    124a:	12 97       	sbiw	r26, 0x02	; 2
    124c:	02 80       	ldd	r0, Z+2	; 0x02
    124e:	f3 81       	ldd	r31, Z+3	; 0x03
    1250:	e0 2d       	mov	r30, r0
    1252:	12 96       	adiw	r26, 0x02	; 2
    1254:	fc 93       	st	X, r31
    1256:	ee 93       	st	-X, r30
    1258:	11 97       	sbiw	r26, 0x01	; 1
    125a:	2b 5a       	subi	r18, 0xAB	; 171
    125c:	36 4f       	sbci	r19, 0xF6	; 246
    125e:	e2 17       	cp	r30, r18
    1260:	f3 07       	cpc	r31, r19
    1262:	29 f4       	brne	.+10     	; 0x126e <vTaskSwitchContext+0xac>
    1264:	22 81       	ldd	r18, Z+2	; 0x02
    1266:	33 81       	ldd	r19, Z+3	; 0x03
    1268:	fd 01       	movw	r30, r26
    126a:	32 83       	std	Z+2, r19	; 0x02
    126c:	21 83       	std	Z+1, r18	; 0x01
    126e:	fc 01       	movw	r30, r24
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	ee 0f       	add	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	8e 0f       	add	r24, r30
    127e:	9f 1f       	adc	r25, r31
    1280:	fc 01       	movw	r30, r24
    1282:	ee 5a       	subi	r30, 0xAE	; 174
    1284:	f6 4f       	sbci	r31, 0xF6	; 246
    1286:	01 80       	ldd	r0, Z+1	; 0x01
    1288:	f2 81       	ldd	r31, Z+2	; 0x02
    128a:	e0 2d       	mov	r30, r0
    128c:	86 81       	ldd	r24, Z+6	; 0x06
    128e:	97 81       	ldd	r25, Z+7	; 0x07
    1290:	90 93 77 09 	sts	0x0977, r25	; 0x800977 <pxCurrentTCB+0x1>
    1294:	80 93 76 09 	sts	0x0976, r24	; 0x800976 <pxCurrentTCB>
    1298:	08 95       	ret

0000129a <__udivmodqi4>:
    129a:	99 1b       	sub	r25, r25
    129c:	79 e0       	ldi	r23, 0x09	; 9
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <__udivmodqi4_ep>

000012a0 <__udivmodqi4_loop>:
    12a0:	99 1f       	adc	r25, r25
    12a2:	96 17       	cp	r25, r22
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <__udivmodqi4_ep>
    12a6:	96 1b       	sub	r25, r22

000012a8 <__udivmodqi4_ep>:
    12a8:	88 1f       	adc	r24, r24
    12aa:	7a 95       	dec	r23
    12ac:	c9 f7       	brne	.-14     	; 0x12a0 <__udivmodqi4_loop>
    12ae:	80 95       	com	r24
    12b0:	08 95       	ret

000012b2 <__udivmodhi4>:
    12b2:	aa 1b       	sub	r26, r26
    12b4:	bb 1b       	sub	r27, r27
    12b6:	51 e1       	ldi	r21, 0x11	; 17
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <__udivmodhi4_ep>

000012ba <__udivmodhi4_loop>:
    12ba:	aa 1f       	adc	r26, r26
    12bc:	bb 1f       	adc	r27, r27
    12be:	a6 17       	cp	r26, r22
    12c0:	b7 07       	cpc	r27, r23
    12c2:	10 f0       	brcs	.+4      	; 0x12c8 <__udivmodhi4_ep>
    12c4:	a6 1b       	sub	r26, r22
    12c6:	b7 0b       	sbc	r27, r23

000012c8 <__udivmodhi4_ep>:
    12c8:	88 1f       	adc	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	5a 95       	dec	r21
    12ce:	a9 f7       	brne	.-22     	; 0x12ba <__udivmodhi4_loop>
    12d0:	80 95       	com	r24
    12d2:	90 95       	com	r25
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	08 95       	ret

000012da <__umulhisi3>:
    12da:	a2 9f       	mul	r26, r18
    12dc:	b0 01       	movw	r22, r0
    12de:	b3 9f       	mul	r27, r19
    12e0:	c0 01       	movw	r24, r0
    12e2:	a3 9f       	mul	r26, r19
    12e4:	70 0d       	add	r23, r0
    12e6:	81 1d       	adc	r24, r1
    12e8:	11 24       	eor	r1, r1
    12ea:	91 1d       	adc	r25, r1
    12ec:	b2 9f       	mul	r27, r18
    12ee:	70 0d       	add	r23, r0
    12f0:	81 1d       	adc	r24, r1
    12f2:	11 24       	eor	r1, r1
    12f4:	91 1d       	adc	r25, r1
    12f6:	08 95       	ret

000012f8 <memset>:
    12f8:	dc 01       	movw	r26, r24
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <memset+0x6>
    12fc:	6d 93       	st	X+, r22
    12fe:	41 50       	subi	r20, 0x01	; 1
    1300:	50 40       	sbci	r21, 0x00	; 0
    1302:	e0 f7       	brcc	.-8      	; 0x12fc <memset+0x4>
    1304:	08 95       	ret

00001306 <strncpy>:
    1306:	fb 01       	movw	r30, r22
    1308:	dc 01       	movw	r26, r24
    130a:	41 50       	subi	r20, 0x01	; 1
    130c:	50 40       	sbci	r21, 0x00	; 0
    130e:	48 f0       	brcs	.+18     	; 0x1322 <strncpy+0x1c>
    1310:	01 90       	ld	r0, Z+
    1312:	0d 92       	st	X+, r0
    1314:	00 20       	and	r0, r0
    1316:	c9 f7       	brne	.-14     	; 0x130a <strncpy+0x4>
    1318:	01 c0       	rjmp	.+2      	; 0x131c <strncpy+0x16>
    131a:	1d 92       	st	X+, r1
    131c:	41 50       	subi	r20, 0x01	; 1
    131e:	50 40       	sbci	r21, 0x00	; 0
    1320:	e0 f7       	brcc	.-8      	; 0x131a <strncpy+0x14>
    1322:	08 95       	ret

00001324 <_exit>:
    1324:	f8 94       	cli

00001326 <__stop_program>:
    1326:	ff cf       	rjmp	.-2      	; 0x1326 <__stop_program>
