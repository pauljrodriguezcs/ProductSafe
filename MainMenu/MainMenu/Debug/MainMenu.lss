
MainMenu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c2  00800100  000024cc  00002560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000085f  008002c2  008002c2  00002722  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b32  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001298  00000000  00000000  00007556  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a5e  00000000  00000000  000087ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  0000b24c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011c3  00000000  00000000  0000b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002103  00000000  00000000  0000cab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000ebb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c1       	rjmp	.+722    	; 0x2d4 <__ctors_end>
       2:	00 00       	nop
       4:	86 c1       	rjmp	.+780    	; 0x312 <__bad_interrupt>
       6:	00 00       	nop
       8:	84 c1       	rjmp	.+776    	; 0x312 <__bad_interrupt>
       a:	00 00       	nop
       c:	82 c1       	rjmp	.+772    	; 0x312 <__bad_interrupt>
       e:	00 00       	nop
      10:	80 c1       	rjmp	.+768    	; 0x312 <__bad_interrupt>
      12:	00 00       	nop
      14:	7e c1       	rjmp	.+764    	; 0x312 <__bad_interrupt>
      16:	00 00       	nop
      18:	7c c1       	rjmp	.+760    	; 0x312 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7a c1       	rjmp	.+756    	; 0x312 <__bad_interrupt>
      1e:	00 00       	nop
      20:	78 c1       	rjmp	.+752    	; 0x312 <__bad_interrupt>
      22:	00 00       	nop
      24:	76 c1       	rjmp	.+748    	; 0x312 <__bad_interrupt>
      26:	00 00       	nop
      28:	74 c1       	rjmp	.+744    	; 0x312 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c1       	rjmp	.+740    	; 0x312 <__bad_interrupt>
      2e:	00 00       	nop
      30:	70 c1       	rjmp	.+736    	; 0x312 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_13>
      38:	6c c1       	rjmp	.+728    	; 0x312 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c1       	rjmp	.+724    	; 0x312 <__bad_interrupt>
      3e:	00 00       	nop
      40:	68 c1       	rjmp	.+720    	; 0x312 <__bad_interrupt>
      42:	00 00       	nop
      44:	66 c1       	rjmp	.+716    	; 0x312 <__bad_interrupt>
      46:	00 00       	nop
      48:	64 c1       	rjmp	.+712    	; 0x312 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	62 c1       	rjmp	.+708    	; 0x312 <__bad_interrupt>
      4e:	00 00       	nop
      50:	60 c1       	rjmp	.+704    	; 0x312 <__bad_interrupt>
      52:	00 00       	nop
      54:	5e c1       	rjmp	.+700    	; 0x312 <__bad_interrupt>
      56:	00 00       	nop
      58:	5c c1       	rjmp	.+696    	; 0x312 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5a c1       	rjmp	.+692    	; 0x312 <__bad_interrupt>
      5e:	00 00       	nop
      60:	58 c1       	rjmp	.+688    	; 0x312 <__bad_interrupt>
      62:	00 00       	nop
      64:	56 c1       	rjmp	.+684    	; 0x312 <__bad_interrupt>
      66:	00 00       	nop
      68:	54 c1       	rjmp	.+680    	; 0x312 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	52 c1       	rjmp	.+676    	; 0x312 <__bad_interrupt>
      6e:	00 00       	nop
      70:	50 c1       	rjmp	.+672    	; 0x312 <__bad_interrupt>
      72:	00 00       	nop
      74:	4e c1       	rjmp	.+668    	; 0x312 <__bad_interrupt>
      76:	00 00       	nop
      78:	4c c1       	rjmp	.+664    	; 0x312 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4a c1       	rjmp	.+660    	; 0x312 <__bad_interrupt>
      7e:	00 00       	nop
      80:	48 c1       	rjmp	.+656    	; 0x312 <__bad_interrupt>
      82:	00 00       	nop
      84:	46 c1       	rjmp	.+652    	; 0x312 <__bad_interrupt>
      86:	00 00       	nop
      88:	44 c1       	rjmp	.+648    	; 0x312 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 04       	cpc	r5, r9
      8e:	67 04       	cpc	r6, r7
      90:	75 04       	cpc	r7, r5
      92:	83 04       	cpc	r8, r3
      94:	91 04       	cpc	r9, r1
      96:	9f 04       	cpc	r9, r15
      98:	ad 04       	cpc	r10, r13
      9a:	bb 04       	cpc	r11, r11
      9c:	c9 04       	cpc	r12, r9
      9e:	d7 04       	cpc	r13, r7
      a0:	e5 04       	cpc	r14, r5
      a2:	f3 04       	cpc	r15, r3
      a4:	0d 05       	cpc	r16, r13
      a6:	45 05       	cpc	r20, r5
      a8:	58 05       	cpc	r21, r8
      aa:	6b 05       	cpc	r22, r11
      ac:	9f 05       	cpc	r25, r15
      ae:	c8 05       	cpc	r28, r8
      b0:	db 05       	cpc	r29, r11
      b2:	ee 05       	cpc	r30, r14
      b4:	23 06       	cpc	r2, r19
      b6:	2b 06       	cpc	r2, r27
      b8:	3e 06       	cpc	r3, r30
      ba:	50 06       	cpc	r5, r16
      bc:	d8 09       	sbc	r29, r8
      be:	24 0a       	sbc	r2, r20
      c0:	64 0a       	sbc	r6, r20
      c2:	a1 0a       	sbc	r10, r17
      c4:	d5 0a       	sbc	r13, r21
      c6:	17 0b       	sbc	r17, r23
      c8:	ad 0b       	sbc	r26, r29
      ca:	d8 09       	sbc	r29, r8
      cc:	24 0a       	sbc	r2, r20
      ce:	64 0a       	sbc	r6, r20
      d0:	a1 0a       	sbc	r10, r17
      d2:	d5 0a       	sbc	r13, r21
      d4:	13 0b       	sbc	r17, r19
      d6:	ad 0b       	sbc	r26, r29
      d8:	d8 09       	sbc	r29, r8
      da:	20 0a       	sbc	r2, r16
      dc:	64 0a       	sbc	r6, r20
      de:	a1 0a       	sbc	r10, r17
      e0:	d5 0a       	sbc	r13, r21
      e2:	13 0b       	sbc	r17, r19
      e4:	ad 0b       	sbc	r26, r29
      e6:	d8 09       	sbc	r29, r8
      e8:	24 0a       	sbc	r2, r20
      ea:	64 0a       	sbc	r6, r20
      ec:	a1 0a       	sbc	r10, r17
      ee:	d5 0a       	sbc	r13, r21
      f0:	13 0b       	sbc	r17, r19
      f2:	ad 0b       	sbc	r26, r29

000000f4 <CHARSET>:
      f4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     104:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     114:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     124:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     134:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     144:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     154:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     164:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     174:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     184:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     194:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     1a4:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     1b4:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     1c4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1d4:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1e4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1f4:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     204:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     214:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     224:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     234:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     244:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     254:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     264:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     274:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     284:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     294:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     2a4:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     2b4:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     2c4:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

000002d4 <__ctors_end>:
     2d4:	11 24       	eor	r1, r1
     2d6:	1f be       	out	0x3f, r1	; 63
     2d8:	cf ef       	ldi	r28, 0xFF	; 255
     2da:	d0 e4       	ldi	r29, 0x40	; 64
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	cd bf       	out	0x3d, r28	; 61

000002e0 <__do_copy_data>:
     2e0:	12 e0       	ldi	r17, 0x02	; 2
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b1 e0       	ldi	r27, 0x01	; 1
     2e6:	ec ec       	ldi	r30, 0xCC	; 204
     2e8:	f4 e2       	ldi	r31, 0x24	; 36
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	0b bf       	out	0x3b, r16	; 59
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x14>
     2f0:	07 90       	elpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	a2 3c       	cpi	r26, 0xC2	; 194
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0x10>

000002fa <__do_clear_bss>:
     2fa:	2b e0       	ldi	r18, 0x0B	; 11
     2fc:	a2 ec       	ldi	r26, 0xC2	; 194
     2fe:	b2 e0       	ldi	r27, 0x02	; 2
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	a1 32       	cpi	r26, 0x21	; 33
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <main>
     30e:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <_exit>

00000312 <__bad_interrupt>:
     312:	76 ce       	rjmp	.-788    	; 0x0 <__vectors>

00000314 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     31a:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     31e:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <__data_end>
     322:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <__data_end+0x1>
     326:	c9 01       	movw	r24, r18
     328:	8c 0f       	add	r24, r28
     32a:	9d 1f       	adc	r25, r29
     32c:	8c 3d       	cpi	r24, 0xDC	; 220
     32e:	45 e0       	ldi	r20, 0x05	; 5
     330:	94 07       	cpc	r25, r20
     332:	58 f4       	brcc	.+22     	; 0x34a <pvPortMalloc+0x36>
     334:	28 17       	cp	r18, r24
     336:	39 07       	cpc	r19, r25
     338:	58 f4       	brcc	.+22     	; 0x350 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     33a:	e9 01       	movw	r28, r18
     33c:	cc 53       	subi	r28, 0x3C	; 60
     33e:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
     340:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <__data_end+0x1>
     344:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__data_end>
     348:	05 c0       	rjmp	.+10     	; 0x354 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     34a:	c0 e0       	ldi	r28, 0x00	; 0
     34c:	d0 e0       	ldi	r29, 0x00	; 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <pvPortMalloc+0x40>
     350:	c0 e0       	ldi	r28, 0x00	; 0
     352:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     354:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     358:	ce 01       	movw	r24, r28
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     360:	08 95       	ret

00000362 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     362:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     364:	03 96       	adiw	r24, 0x03	; 3
     366:	92 83       	std	Z+2, r25	; 0x02
     368:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     36a:	2f ef       	ldi	r18, 0xFF	; 255
     36c:	3f ef       	ldi	r19, 0xFF	; 255
     36e:	34 83       	std	Z+4, r19	; 0x04
     370:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     372:	96 83       	std	Z+6, r25	; 0x06
     374:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     376:	90 87       	std	Z+8, r25	; 0x08
     378:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     37a:	10 82       	st	Z, r1
     37c:	08 95       	ret

0000037e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     37e:	fc 01       	movw	r30, r24
     380:	11 86       	std	Z+9, r1	; 0x09
     382:	10 86       	std	Z+8, r1	; 0x08
     384:	08 95       	ret

00000386 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	fc 01       	movw	r30, r24
     38c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     38e:	21 81       	ldd	r18, Z+1	; 0x01
     390:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     392:	e9 01       	movw	r28, r18
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	9b 81       	ldd	r25, Y+3	; 0x03
     398:	13 96       	adiw	r26, 0x03	; 3
     39a:	9c 93       	st	X, r25
     39c:	8e 93       	st	-X, r24
     39e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     3a0:	81 81       	ldd	r24, Z+1	; 0x01
     3a2:	92 81       	ldd	r25, Z+2	; 0x02
     3a4:	15 96       	adiw	r26, 0x05	; 5
     3a6:	9c 93       	st	X, r25
     3a8:	8e 93       	st	-X, r24
     3aa:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     3ac:	8a 81       	ldd	r24, Y+2	; 0x02
     3ae:	9b 81       	ldd	r25, Y+3	; 0x03
     3b0:	ec 01       	movw	r28, r24
     3b2:	7d 83       	std	Y+5, r23	; 0x05
     3b4:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     3b6:	e9 01       	movw	r28, r18
     3b8:	7b 83       	std	Y+3, r23	; 0x03
     3ba:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     3bc:	72 83       	std	Z+2, r23	; 0x02
     3be:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     3c0:	19 96       	adiw	r26, 0x09	; 9
     3c2:	fc 93       	st	X, r31
     3c4:	ee 93       	st	-X, r30
     3c6:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 5f       	subi	r24, 0xFF	; 255
     3cc:	80 83       	st	Z, r24
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     3da:	48 81       	ld	r20, Y
     3dc:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     3de:	4f 3f       	cpi	r20, 0xFF	; 255
     3e0:	2f ef       	ldi	r18, 0xFF	; 255
     3e2:	52 07       	cpc	r21, r18
     3e4:	31 f4       	brne	.+12     	; 0x3f2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     3e6:	dc 01       	movw	r26, r24
     3e8:	17 96       	adiw	r26, 0x07	; 7
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	18 97       	sbiw	r26, 0x08	; 8
     3f0:	17 c0       	rjmp	.+46     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     3f2:	fc 01       	movw	r30, r24
     3f4:	33 96       	adiw	r30, 0x03	; 3
     3f6:	dc 01       	movw	r26, r24
     3f8:	15 96       	adiw	r26, 0x05	; 5
     3fa:	2d 91       	ld	r18, X+
     3fc:	3c 91       	ld	r19, X
     3fe:	16 97       	sbiw	r26, 0x06	; 6
     400:	d9 01       	movw	r26, r18
     402:	2d 91       	ld	r18, X+
     404:	3c 91       	ld	r19, X
     406:	42 17       	cp	r20, r18
     408:	53 07       	cpc	r21, r19
     40a:	50 f0       	brcs	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     40c:	02 80       	ldd	r0, Z+2	; 0x02
     40e:	f3 81       	ldd	r31, Z+3	; 0x03
     410:	e0 2d       	mov	r30, r0
     412:	a2 81       	ldd	r26, Z+2	; 0x02
     414:	b3 81       	ldd	r27, Z+3	; 0x03
     416:	2d 91       	ld	r18, X+
     418:	3c 91       	ld	r19, X
     41a:	42 17       	cp	r20, r18
     41c:	53 07       	cpc	r21, r19
     41e:	b0 f7       	brcc	.-20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     420:	a2 81       	ldd	r26, Z+2	; 0x02
     422:	b3 81       	ldd	r27, Z+3	; 0x03
     424:	bb 83       	std	Y+3, r27	; 0x03
     426:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     428:	15 96       	adiw	r26, 0x05	; 5
     42a:	dc 93       	st	X, r29
     42c:	ce 93       	st	-X, r28
     42e:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     430:	fd 83       	std	Y+5, r31	; 0x05
     432:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     434:	d3 83       	std	Z+3, r29	; 0x03
     436:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     438:	99 87       	std	Y+9, r25	; 0x09
     43a:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     43c:	fc 01       	movw	r30, r24
     43e:	20 81       	ld	r18, Z
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	20 83       	st	Z, r18
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     44a:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     44c:	a2 81       	ldd	r26, Z+2	; 0x02
     44e:	b3 81       	ldd	r27, Z+3	; 0x03
     450:	84 81       	ldd	r24, Z+4	; 0x04
     452:	95 81       	ldd	r25, Z+5	; 0x05
     454:	15 96       	adiw	r26, 0x05	; 5
     456:	9c 93       	st	X, r25
     458:	8e 93       	st	-X, r24
     45a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     45c:	a4 81       	ldd	r26, Z+4	; 0x04
     45e:	b5 81       	ldd	r27, Z+5	; 0x05
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	13 96       	adiw	r26, 0x03	; 3
     466:	9c 93       	st	X, r25
     468:	8e 93       	st	-X, r24
     46a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     46c:	a0 85       	ldd	r26, Z+8	; 0x08
     46e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	8d 91       	ld	r24, X+
     474:	9c 91       	ld	r25, X
     476:	12 97       	sbiw	r26, 0x02	; 2
     478:	e8 17       	cp	r30, r24
     47a:	f9 07       	cpc	r31, r25
     47c:	31 f4       	brne	.+12     	; 0x48a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     47e:	84 81       	ldd	r24, Z+4	; 0x04
     480:	95 81       	ldd	r25, Z+5	; 0x05
     482:	12 96       	adiw	r26, 0x02	; 2
     484:	9c 93       	st	X, r25
     486:	8e 93       	st	-X, r24
     488:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     48a:	11 86       	std	Z+9, r1	; 0x09
     48c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     48e:	8c 91       	ld	r24, X
     490:	81 50       	subi	r24, 0x01	; 1
     492:	8c 93       	st	X, r24
     494:	08 95       	ret

00000496 <main_menu_display>:
	
	return 1;
}

void AddUser_Init(){
	adduser_state = adduser_init;
     496:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <nokia_lcd_clear>
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	83 e8       	ldi	r24, 0x83	; 131
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     4a4:	6a e0       	ldi	r22, 0x0A	; 10
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	85 e4       	ldi	r24, 0x45	; 69
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     4b6:	64 e1       	ldi	r22, 0x14	; 20
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	8f e4       	ldi	r24, 0x4F	; 79
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     4c8:	6e e1       	ldi	r22, 0x1E	; 30
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	87 e5       	ldi	r24, 0x57	; 87
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     4da:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <nokia_lcd_render>
     4de:	08 95       	ret

000004e0 <settings_submenu_display>:
     4e0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <nokia_lcd_clear>
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	8a e5       	ldi	r24, 0x5A	; 90
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     4ee:	6a e0       	ldi	r22, 0x0A	; 10
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	83 e6       	ldi	r24, 0x63	; 99
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     500:	64 e1       	ldi	r22, 0x14	; 20
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	8d e6       	ldi	r24, 0x6D	; 109
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     512:	6e e1       	ldi	r22, 0x1E	; 30
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	86 e7       	ldi	r24, 0x76	; 118
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     524:	68 e2       	ldi	r22, 0x28	; 40
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	80 e8       	ldi	r24, 0x80	; 128
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     536:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <nokia_lcd_render>
     53a:	08 95       	ret

0000053c <drinks_submenu_display>:
     53c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <nokia_lcd_clear>
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	86 e6       	ldi	r24, 0x66	; 102
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     54a:	6a e0       	ldi	r22, 0x0A	; 10
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	8d e8       	ldi	r24, 0x8D	; 141
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     55c:	64 e1       	ldi	r22, 0x14	; 20
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	8a e9       	ldi	r24, 0x9A	; 154
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     56e:	6e e1       	ldi	r22, 0x1E	; 30
     570:	84 e1       	ldi	r24, 0x14	; 20
     572:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	84 e9       	ldi	r24, 0x94	; 148
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     580:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <nokia_lcd_render>
     584:	08 95       	ret

00000586 <user_submenu_display>:
     586:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <nokia_lcd_clear>
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	80 e7       	ldi	r24, 0x70	; 112
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     594:	6a e0       	ldi	r22, 0x0A	; 10
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	85 ea       	ldi	r24, 0xA5	; 165
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     5a6:	64 e1       	ldi	r22, 0x14	; 20
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	81 eb       	ldi	r24, 0xB1	; 177
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     5b8:	6e e1       	ldi	r22, 0x1E	; 30
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	80 ec       	ldi	r24, 0xC0	; 192
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     5ca:	68 e2       	ldi	r22, 0x28	; 40
     5cc:	83 e2       	ldi	r24, 0x23	; 35
     5ce:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	89 ec       	ldi	r24, 0xC9	; 201
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     5dc:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <nokia_lcd_render>
     5e0:	08 95       	ret

000005e2 <adduser_name_display>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
     5e8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <nokia_lcd_clear>
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	82 ed       	ldi	r24, 0xD2	; 210
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     5f6:	6a e0       	ldi	r22, 0x0A	; 10
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	ce 01       	movw	r24, r28
     602:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     606:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <nokia_lcd_render>
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <GetKeypadKey>:
     610:	8e ef       	ldi	r24, 0xFE	; 254
     612:	88 b9       	out	0x08, r24	; 8
     614:	00 00       	nop
     616:	86 b1       	in	r24, 0x06	; 6
     618:	80 95       	com	r24
     61a:	84 fd       	sbrc	r24, 4
     61c:	46 c0       	rjmp	.+140    	; 0x6aa <GetKeypadKey+0x9a>
     61e:	86 b1       	in	r24, 0x06	; 6
     620:	80 95       	com	r24
     622:	85 fd       	sbrc	r24, 5
     624:	44 c0       	rjmp	.+136    	; 0x6ae <GetKeypadKey+0x9e>
     626:	86 b1       	in	r24, 0x06	; 6
     628:	80 95       	com	r24
     62a:	86 fd       	sbrc	r24, 6
     62c:	42 c0       	rjmp	.+132    	; 0x6b2 <GetKeypadKey+0xa2>
     62e:	86 b1       	in	r24, 0x06	; 6
     630:	80 95       	com	r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	88 0f       	add	r24, r24
     636:	89 2f       	mov	r24, r25
     638:	88 1f       	adc	r24, r24
     63a:	99 0b       	sbc	r25, r25
     63c:	91 95       	neg	r25
     63e:	89 2b       	or	r24, r25
     640:	d1 f5       	brne	.+116    	; 0x6b6 <GetKeypadKey+0xa6>
     642:	8d ef       	ldi	r24, 0xFD	; 253
     644:	88 b9       	out	0x08, r24	; 8
     646:	00 00       	nop
     648:	86 b1       	in	r24, 0x06	; 6
     64a:	80 95       	com	r24
     64c:	84 fd       	sbrc	r24, 4
     64e:	35 c0       	rjmp	.+106    	; 0x6ba <GetKeypadKey+0xaa>
     650:	86 b1       	in	r24, 0x06	; 6
     652:	80 95       	com	r24
     654:	85 fd       	sbrc	r24, 5
     656:	33 c0       	rjmp	.+102    	; 0x6be <GetKeypadKey+0xae>
     658:	86 b1       	in	r24, 0x06	; 6
     65a:	80 95       	com	r24
     65c:	86 fd       	sbrc	r24, 6
     65e:	31 c0       	rjmp	.+98     	; 0x6c2 <GetKeypadKey+0xb2>
     660:	86 b1       	in	r24, 0x06	; 6
     662:	80 95       	com	r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	88 0f       	add	r24, r24
     668:	89 2f       	mov	r24, r25
     66a:	88 1f       	adc	r24, r24
     66c:	99 0b       	sbc	r25, r25
     66e:	91 95       	neg	r25
     670:	89 2b       	or	r24, r25
     672:	49 f5       	brne	.+82     	; 0x6c6 <GetKeypadKey+0xb6>
     674:	8b ef       	ldi	r24, 0xFB	; 251
     676:	88 b9       	out	0x08, r24	; 8
     678:	00 00       	nop
     67a:	86 b1       	in	r24, 0x06	; 6
     67c:	80 95       	com	r24
     67e:	84 fd       	sbrc	r24, 4
     680:	24 c0       	rjmp	.+72     	; 0x6ca <GetKeypadKey+0xba>
     682:	86 b1       	in	r24, 0x06	; 6
     684:	80 95       	com	r24
     686:	85 fd       	sbrc	r24, 5
     688:	22 c0       	rjmp	.+68     	; 0x6ce <GetKeypadKey+0xbe>
     68a:	86 b1       	in	r24, 0x06	; 6
     68c:	80 95       	com	r24
     68e:	86 fd       	sbrc	r24, 6
     690:	20 c0       	rjmp	.+64     	; 0x6d2 <GetKeypadKey+0xc2>
     692:	86 b1       	in	r24, 0x06	; 6
     694:	80 95       	com	r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	88 0f       	add	r24, r24
     69a:	89 2f       	mov	r24, r25
     69c:	88 1f       	adc	r24, r24
     69e:	99 0b       	sbc	r25, r25
     6a0:	91 95       	neg	r25
     6a2:	89 2b       	or	r24, r25
     6a4:	c1 f4       	brne	.+48     	; 0x6d6 <GetKeypadKey+0xc6>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
     6aa:	81 e3       	ldi	r24, 0x31	; 49
     6ac:	08 95       	ret
     6ae:	84 e3       	ldi	r24, 0x34	; 52
     6b0:	08 95       	ret
     6b2:	87 e3       	ldi	r24, 0x37	; 55
     6b4:	08 95       	ret
     6b6:	8a e2       	ldi	r24, 0x2A	; 42
     6b8:	08 95       	ret
     6ba:	82 e3       	ldi	r24, 0x32	; 50
     6bc:	08 95       	ret
     6be:	85 e3       	ldi	r24, 0x35	; 53
     6c0:	08 95       	ret
     6c2:	88 e3       	ldi	r24, 0x38	; 56
     6c4:	08 95       	ret
     6c6:	80 e3       	ldi	r24, 0x30	; 48
     6c8:	08 95       	ret
     6ca:	83 e3       	ldi	r24, 0x33	; 51
     6cc:	08 95       	ret
     6ce:	86 e3       	ldi	r24, 0x36	; 54
     6d0:	08 95       	ret
     6d2:	89 e3       	ldi	r24, 0x39	; 57
     6d4:	08 95       	ret
     6d6:	83 e2       	ldi	r24, 0x23	; 35
     6d8:	08 95       	ret

000006da <AlphaNumPad>:
     6da:	2f c0       	rjmp	.+94     	; 0x73a <AlphaNumPad+0x60>
     6dc:	40 91 ba 08 	lds	r20, 0x08BA	; 0x8008ba <auto_timer>
     6e0:	50 91 bb 08 	lds	r21, 0x08BB	; 0x8008bb <auto_timer+0x1>
     6e4:	60 91 bc 08 	lds	r22, 0x08BC	; 0x8008bc <auto_timer+0x2>
     6e8:	70 91 bd 08 	lds	r23, 0x08BD	; 0x8008bd <auto_timer+0x3>
     6ec:	42 33       	cpi	r20, 0x32	; 50
     6ee:	51 05       	cpc	r21, r1
     6f0:	61 05       	cpc	r22, r1
     6f2:	71 05       	cpc	r23, r1
     6f4:	49 f4       	brne	.+18     	; 0x708 <AlphaNumPad+0x2e>
     6f6:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <auto_timer>
     6fa:	10 92 bb 08 	sts	0x08BB, r1	; 0x8008bb <auto_timer+0x1>
     6fe:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <auto_timer+0x2>
     702:	10 92 bd 08 	sts	0x08BD, r1	; 0x8008bd <auto_timer+0x3>
     706:	08 95       	ret
     708:	87 ea       	ldi	r24, 0xA7	; 167
     70a:	91 e6       	ldi	r25, 0x61	; 97
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <AlphaNumPad+0x32>
     710:	00 c0       	rjmp	.+0      	; 0x712 <AlphaNumPad+0x38>
     712:	00 00       	nop
     714:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <auto_timer>
     718:	90 91 bb 08 	lds	r25, 0x08BB	; 0x8008bb <auto_timer+0x1>
     71c:	a0 91 bc 08 	lds	r26, 0x08BC	; 0x8008bc <auto_timer+0x2>
     720:	b0 91 bd 08 	lds	r27, 0x08BD	; 0x8008bd <auto_timer+0x3>
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	a1 1d       	adc	r26, r1
     728:	b1 1d       	adc	r27, r1
     72a:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <auto_timer>
     72e:	90 93 bb 08 	sts	0x08BB, r25	; 0x8008bb <auto_timer+0x1>
     732:	a0 93 bc 08 	sts	0x08BC, r26	; 0x8008bc <auto_timer+0x2>
     736:	b0 93 bd 08 	sts	0x08BD, r27	; 0x8008bd <auto_timer+0x3>
     73a:	6a df       	rcall	.-300    	; 0x610 <GetKeypadKey>
     73c:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <pushed_key_ANP>
     740:	88 23       	and	r24, r24
     742:	61 f2       	breq	.-104    	; 0x6dc <AlphaNumPad+0x2>
     744:	65 df       	rcall	.-310    	; 0x610 <GetKeypadKey>
     746:	80 93 1f 0b 	sts	0x0B1F, r24	; 0x800b1f <tmp_pressed_key>
     74a:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <pushed_key_ANP>
     74e:	89 17       	cp	r24, r25
     750:	c9 f3       	breq	.-14     	; 0x744 <AlphaNumPad+0x6a>
     752:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <auto_timer>
     756:	10 92 bb 08 	sts	0x08BB, r1	; 0x8008bb <auto_timer+0x1>
     75a:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <auto_timer+0x2>
     75e:	10 92 bd 08 	sts	0x08BD, r1	; 0x8008bd <auto_timer+0x3>
     762:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <previous_key_ANP>
     766:	98 13       	cpse	r25, r24
     768:	8a c0       	rjmp	.+276    	; 0x87e <AlphaNumPad+0x1a4>
     76a:	20 91 be 08 	lds	r18, 0x08BE	; 0x8008be <num_times_key_pushed>
     76e:	30 91 bf 08 	lds	r19, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     772:	23 30       	cpi	r18, 0x03	; 3
     774:	31 05       	cpc	r19, r1
     776:	38 f4       	brcc	.+14     	; 0x786 <AlphaNumPad+0xac>
     778:	2f 5f       	subi	r18, 0xFF	; 255
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	30 93 bf 08 	sts	0x08BF, r19	; 0x8008bf <num_times_key_pushed+0x1>
     780:	20 93 be 08 	sts	0x08BE, r18	; 0x8008be <num_times_key_pushed>
     784:	04 c0       	rjmp	.+8      	; 0x78e <AlphaNumPad+0xb4>
     786:	10 92 bf 08 	sts	0x08BF, r1	; 0x8008bf <num_times_key_pushed+0x1>
     78a:	10 92 be 08 	sts	0x08BE, r1	; 0x8008be <num_times_key_pushed>
     78e:	81 33       	cpi	r24, 0x31	; 49
     790:	41 f4       	brne	.+16     	; 0x7a2 <AlphaNumPad+0xc8>
     792:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     796:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     79a:	e1 5c       	subi	r30, 0xC1	; 193
     79c:	fe 4f       	sbci	r31, 0xFE	; 254
     79e:	80 81       	ld	r24, Z
     7a0:	08 95       	ret
     7a2:	82 33       	cpi	r24, 0x32	; 50
     7a4:	41 f4       	brne	.+16     	; 0x7b6 <AlphaNumPad+0xdc>
     7a6:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     7aa:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     7ae:	e5 5c       	subi	r30, 0xC5	; 197
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	80 81       	ld	r24, Z
     7b4:	08 95       	ret
     7b6:	83 33       	cpi	r24, 0x33	; 51
     7b8:	41 f4       	brne	.+16     	; 0x7ca <AlphaNumPad+0xf0>
     7ba:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     7be:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     7c2:	e9 5c       	subi	r30, 0xC9	; 201
     7c4:	fe 4f       	sbci	r31, 0xFE	; 254
     7c6:	80 81       	ld	r24, Z
     7c8:	08 95       	ret
     7ca:	84 33       	cpi	r24, 0x34	; 52
     7cc:	41 f4       	brne	.+16     	; 0x7de <AlphaNumPad+0x104>
     7ce:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     7d2:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     7d6:	ed 5c       	subi	r30, 0xCD	; 205
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	80 81       	ld	r24, Z
     7dc:	08 95       	ret
     7de:	85 33       	cpi	r24, 0x35	; 53
     7e0:	41 f4       	brne	.+16     	; 0x7f2 <AlphaNumPad+0x118>
     7e2:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     7e6:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     7ea:	e1 5d       	subi	r30, 0xD1	; 209
     7ec:	fe 4f       	sbci	r31, 0xFE	; 254
     7ee:	80 81       	ld	r24, Z
     7f0:	08 95       	ret
     7f2:	86 33       	cpi	r24, 0x36	; 54
     7f4:	41 f4       	brne	.+16     	; 0x806 <AlphaNumPad+0x12c>
     7f6:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     7fa:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     7fe:	e5 5d       	subi	r30, 0xD5	; 213
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	80 81       	ld	r24, Z
     804:	08 95       	ret
     806:	87 33       	cpi	r24, 0x37	; 55
     808:	41 f4       	brne	.+16     	; 0x81a <AlphaNumPad+0x140>
     80a:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     80e:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     812:	e9 5d       	subi	r30, 0xD9	; 217
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	80 81       	ld	r24, Z
     818:	08 95       	ret
     81a:	88 33       	cpi	r24, 0x38	; 56
     81c:	41 f4       	brne	.+16     	; 0x82e <AlphaNumPad+0x154>
     81e:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     822:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     826:	ed 5d       	subi	r30, 0xDD	; 221
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	80 81       	ld	r24, Z
     82c:	08 95       	ret
     82e:	89 33       	cpi	r24, 0x39	; 57
     830:	41 f4       	brne	.+16     	; 0x842 <AlphaNumPad+0x168>
     832:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     836:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     83a:	e1 5e       	subi	r30, 0xE1	; 225
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	80 81       	ld	r24, Z
     840:	08 95       	ret
     842:	80 33       	cpi	r24, 0x30	; 48
     844:	41 f4       	brne	.+16     	; 0x856 <AlphaNumPad+0x17c>
     846:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     84a:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     84e:	e5 5e       	subi	r30, 0xE5	; 229
     850:	fe 4f       	sbci	r31, 0xFE	; 254
     852:	80 81       	ld	r24, Z
     854:	08 95       	ret
     856:	8a 32       	cpi	r24, 0x2A	; 42
     858:	41 f4       	brne	.+16     	; 0x86a <AlphaNumPad+0x190>
     85a:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     85e:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     862:	e9 5e       	subi	r30, 0xE9	; 233
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	80 81       	ld	r24, Z
     868:	08 95       	ret
     86a:	83 32       	cpi	r24, 0x23	; 35
     86c:	71 f4       	brne	.+28     	; 0x88a <AlphaNumPad+0x1b0>
     86e:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <num_times_key_pushed>
     872:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <num_times_key_pushed+0x1>
     876:	ed 5e       	subi	r30, 0xED	; 237
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	80 81       	ld	r24, Z
     87c:	08 95       	ret
     87e:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <previous_key_ANP>
     882:	10 92 bf 08 	sts	0x08BF, r1	; 0x8008bf <num_times_key_pushed+0x1>
     886:	10 92 be 08 	sts	0x08BE, r1	; 0x8008be <num_times_key_pushed>
     88a:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <previous_key_ANP>
     88e:	08 95       	ret

00000890 <MainMenu_Init>:
     890:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     894:	00 ce       	rjmp	.-1024   	; 0x496 <main_menu_display>
     896:	08 95       	ret

00000898 <MainMenu_Tick>:
     898:	e0 91 20 0b 	lds	r30, 0x0B20	; 0x800b20 <mainmenu_state>
     89c:	8e 2f       	mov	r24, r30
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	8c 30       	cpi	r24, 0x0C	; 12
     8a2:	91 05       	cpc	r25, r1
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <MainMenu_Tick+0x10>
     8a6:	ac c0       	rjmp	.+344    	; 0xa00 <MainMenu_Tick+0x168>
     8a8:	fc 01       	movw	r30, r24
     8aa:	ea 5b       	subi	r30, 0xBA	; 186
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	0c 94 45 12 	jmp	0x248a	; 0x248a <__tablejump2__>
     8b2:	ae de       	rcall	.-676    	; 0x610 <GetKeypadKey>
     8b4:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <main_menu_selection>
     8b8:	ab de       	rcall	.-682    	; 0x610 <GetKeypadKey>
     8ba:	90 91 c6 08 	lds	r25, 0x08C6	; 0x8008c6 <main_menu_selection>
     8be:	89 13       	cpse	r24, r25
     8c0:	9f c0       	rjmp	.+318    	; 0xa00 <MainMenu_Tick+0x168>
     8c2:	a6 de       	rcall	.-692    	; 0x610 <GetKeypadKey>
     8c4:	90 91 c6 08 	lds	r25, 0x08C6	; 0x8008c6 <main_menu_selection>
     8c8:	98 17       	cp	r25, r24
     8ca:	d9 f3       	breq	.-10     	; 0x8c2 <MainMenu_Tick+0x2a>
     8cc:	99 c0       	rjmp	.+306    	; 0xa00 <MainMenu_Tick+0x168>
     8ce:	a0 de       	rcall	.-704    	; 0x610 <GetKeypadKey>
     8d0:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     8d4:	9d de       	rcall	.-710    	; 0x610 <GetKeypadKey>
     8d6:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     8da:	89 13       	cpse	r24, r25
     8dc:	91 c0       	rjmp	.+290    	; 0xa00 <MainMenu_Tick+0x168>
     8de:	98 de       	rcall	.-720    	; 0x610 <GetKeypadKey>
     8e0:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     8e4:	98 17       	cp	r25, r24
     8e6:	d9 f3       	breq	.-10     	; 0x8de <MainMenu_Tick+0x46>
     8e8:	8b c0       	rjmp	.+278    	; 0xa00 <MainMenu_Tick+0x168>
     8ea:	92 de       	rcall	.-732    	; 0x610 <GetKeypadKey>
     8ec:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     8f0:	8f de       	rcall	.-738    	; 0x610 <GetKeypadKey>
     8f2:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     8f6:	89 13       	cpse	r24, r25
     8f8:	83 c0       	rjmp	.+262    	; 0xa00 <MainMenu_Tick+0x168>
     8fa:	8a de       	rcall	.-748    	; 0x610 <GetKeypadKey>
     8fc:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     900:	98 17       	cp	r25, r24
     902:	d9 f3       	breq	.-10     	; 0x8fa <MainMenu_Tick+0x62>
     904:	7d c0       	rjmp	.+250    	; 0xa00 <MainMenu_Tick+0x168>
     906:	84 de       	rcall	.-760    	; 0x610 <GetKeypadKey>
     908:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <settings_menu_selection>
     90c:	81 de       	rcall	.-766    	; 0x610 <GetKeypadKey>
     90e:	90 91 c4 08 	lds	r25, 0x08C4	; 0x8008c4 <settings_menu_selection>
     912:	89 13       	cpse	r24, r25
     914:	75 c0       	rjmp	.+234    	; 0xa00 <MainMenu_Tick+0x168>
     916:	7c de       	rcall	.-776    	; 0x610 <GetKeypadKey>
     918:	90 91 c4 08 	lds	r25, 0x08C4	; 0x8008c4 <settings_menu_selection>
     91c:	98 17       	cp	r25, r24
     91e:	d9 f3       	breq	.-10     	; 0x916 <MainMenu_Tick+0x7e>
     920:	6f c0       	rjmp	.+222    	; 0xa00 <MainMenu_Tick+0x168>
     922:	76 de       	rcall	.-788    	; 0x610 <GetKeypadKey>
     924:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <drink_menu_selection>
     928:	73 de       	rcall	.-794    	; 0x610 <GetKeypadKey>
     92a:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <drink_menu_selection>
     92e:	89 13       	cpse	r24, r25
     930:	67 c0       	rjmp	.+206    	; 0xa00 <MainMenu_Tick+0x168>
     932:	6e de       	rcall	.-804    	; 0x610 <GetKeypadKey>
     934:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <drink_menu_selection>
     938:	98 17       	cp	r25, r24
     93a:	d9 f3       	breq	.-10     	; 0x932 <MainMenu_Tick+0x9a>
     93c:	61 c0       	rjmp	.+194    	; 0xa00 <MainMenu_Tick+0x168>
     93e:	68 de       	rcall	.-816    	; 0x610 <GetKeypadKey>
     940:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     944:	65 de       	rcall	.-822    	; 0x610 <GetKeypadKey>
     946:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     94a:	89 13       	cpse	r24, r25
     94c:	59 c0       	rjmp	.+178    	; 0xa00 <MainMenu_Tick+0x168>
     94e:	60 de       	rcall	.-832    	; 0x610 <GetKeypadKey>
     950:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     954:	98 17       	cp	r25, r24
     956:	d9 f3       	breq	.-10     	; 0x94e <MainMenu_Tick+0xb6>
     958:	53 c0       	rjmp	.+166    	; 0xa00 <MainMenu_Tick+0x168>
     95a:	5a de       	rcall	.-844    	; 0x610 <GetKeypadKey>
     95c:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     960:	57 de       	rcall	.-850    	; 0x610 <GetKeypadKey>
     962:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     966:	89 13       	cpse	r24, r25
     968:	4b c0       	rjmp	.+150    	; 0xa00 <MainMenu_Tick+0x168>
     96a:	52 de       	rcall	.-860    	; 0x610 <GetKeypadKey>
     96c:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     970:	98 17       	cp	r25, r24
     972:	d9 f3       	breq	.-10     	; 0x96a <MainMenu_Tick+0xd2>
     974:	45 c0       	rjmp	.+138    	; 0xa00 <MainMenu_Tick+0x168>
     976:	4c de       	rcall	.-872    	; 0x610 <GetKeypadKey>
     978:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <user_menu_selection>
     97c:	49 de       	rcall	.-878    	; 0x610 <GetKeypadKey>
     97e:	90 91 c2 08 	lds	r25, 0x08C2	; 0x8008c2 <user_menu_selection>
     982:	89 13       	cpse	r24, r25
     984:	3d c0       	rjmp	.+122    	; 0xa00 <MainMenu_Tick+0x168>
     986:	44 de       	rcall	.-888    	; 0x610 <GetKeypadKey>
     988:	90 91 c2 08 	lds	r25, 0x08C2	; 0x8008c2 <user_menu_selection>
     98c:	98 17       	cp	r25, r24
     98e:	d9 f3       	breq	.-10     	; 0x986 <MainMenu_Tick+0xee>
     990:	37 c0       	rjmp	.+110    	; 0xa00 <MainMenu_Tick+0x168>
     992:	3e de       	rcall	.-900    	; 0x610 <GetKeypadKey>
     994:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     998:	3b de       	rcall	.-906    	; 0x610 <GetKeypadKey>
     99a:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     99e:	89 13       	cpse	r24, r25
     9a0:	2f c0       	rjmp	.+94     	; 0xa00 <MainMenu_Tick+0x168>
     9a2:	36 de       	rcall	.-916    	; 0x610 <GetKeypadKey>
     9a4:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     9a8:	98 17       	cp	r25, r24
     9aa:	d9 f3       	breq	.-10     	; 0x9a2 <MainMenu_Tick+0x10a>
     9ac:	29 c0       	rjmp	.+82     	; 0xa00 <MainMenu_Tick+0x168>
     9ae:	30 de       	rcall	.-928    	; 0x610 <GetKeypadKey>
     9b0:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     9b4:	2d de       	rcall	.-934    	; 0x610 <GetKeypadKey>
     9b6:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     9ba:	89 13       	cpse	r24, r25
     9bc:	21 c0       	rjmp	.+66     	; 0xa00 <MainMenu_Tick+0x168>
     9be:	28 de       	rcall	.-944    	; 0x610 <GetKeypadKey>
     9c0:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     9c4:	98 17       	cp	r25, r24
     9c6:	d9 f3       	breq	.-10     	; 0x9be <MainMenu_Tick+0x126>
     9c8:	1b c0       	rjmp	.+54     	; 0xa00 <MainMenu_Tick+0x168>
     9ca:	22 de       	rcall	.-956    	; 0x610 <GetKeypadKey>
     9cc:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     9d0:	1f de       	rcall	.-962    	; 0x610 <GetKeypadKey>
     9d2:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     9d6:	89 13       	cpse	r24, r25
     9d8:	13 c0       	rjmp	.+38     	; 0xa00 <MainMenu_Tick+0x168>
     9da:	1a de       	rcall	.-972    	; 0x610 <GetKeypadKey>
     9dc:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     9e0:	98 17       	cp	r25, r24
     9e2:	d9 f3       	breq	.-10     	; 0x9da <MainMenu_Tick+0x142>
     9e4:	0d c0       	rjmp	.+26     	; 0xa00 <MainMenu_Tick+0x168>
     9e6:	14 de       	rcall	.-984    	; 0x610 <GetKeypadKey>
     9e8:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <temp_menu_selection>
     9ec:	11 de       	rcall	.-990    	; 0x610 <GetKeypadKey>
     9ee:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     9f2:	89 13       	cpse	r24, r25
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <MainMenu_Tick+0x168>
     9f6:	0c de       	rcall	.-1000   	; 0x610 <GetKeypadKey>
     9f8:	90 91 c5 08 	lds	r25, 0x08C5	; 0x8008c5 <temp_menu_selection>
     9fc:	98 17       	cp	r25, r24
     9fe:	d9 f3       	breq	.-10     	; 0x9f6 <MainMenu_Tick+0x15e>
     a00:	e0 91 20 0b 	lds	r30, 0x0B20	; 0x800b20 <mainmenu_state>
     a04:	8e 2f       	mov	r24, r30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	8c 30       	cpi	r24, 0x0C	; 12
     a0a:	91 05       	cpc	r25, r1
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <MainMenu_Tick+0x178>
     a0e:	5a c1       	rjmp	.+692    	; 0xcc4 <MainMenu_Tick+0x42c>
     a10:	fc 01       	movw	r30, r24
     a12:	ee 5a       	subi	r30, 0xAE	; 174
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	0c 94 45 12 	jmp	0x248a	; 0x248a <__tablejump2__>
     a1a:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <main_menu_selection>
     a1e:	81 33       	cpi	r24, 0x31	; 49
     a20:	a9 f4       	brne	.+42     	; 0xa4c <MainMenu_Tick+0x1b4>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     a28:	47 d7       	rcall	.+3726   	; 0x18b8 <nokia_lcd_clear>
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	8d ed       	ldi	r24, 0xDD	; 221
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     a34:	6a e0       	ldi	r22, 0x0A	; 10
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	8b ee       	ldi	r24, 0xEB	; 235
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     a46:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <nokia_lcd_render>
     a4a:	08 95       	ret
     a4c:	82 33       	cpi	r24, 0x32	; 50
     a4e:	a9 f4       	brne	.+42     	; 0xa7a <MainMenu_Tick+0x1e2>
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     a56:	30 d7       	rcall	.+3680   	; 0x18b8 <nokia_lcd_clear>
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	87 ef       	ldi	r24, 0xF7	; 247
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <nokia_lcd_set_cursor>
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	8b ee       	ldi	r24, 0xEB	; 235
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <nokia_lcd_write_string>
     a74:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <nokia_lcd_render>
     a78:	08 95       	ret
     a7a:	83 33       	cpi	r24, 0x33	; 51
     a7c:	09 f0       	breq	.+2      	; 0xa80 <MainMenu_Tick+0x1e8>
     a7e:	2f c1       	rjmp	.+606    	; 0xcde <MainMenu_Tick+0x446>
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     a86:	2c cd       	rjmp	.-1448   	; 0x4e0 <settings_submenu_display>
     a88:	08 95       	ret
     a8a:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <temp_menu_selection>
     a8e:	83 32       	cpi	r24, 0x23	; 35
     a90:	09 f0       	breq	.+2      	; 0xa94 <MainMenu_Tick+0x1fc>
     a92:	25 c1       	rjmp	.+586    	; 0xcde <MainMenu_Tick+0x446>
     a94:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     a98:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     a9c:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     aa0:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     aa4:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     aa8:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     aac:	f4 cc       	rjmp	.-1560   	; 0x496 <main_menu_display>
     aae:	08 95       	ret
     ab0:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <temp_menu_selection>
     ab4:	83 32       	cpi	r24, 0x23	; 35
     ab6:	09 f0       	breq	.+2      	; 0xaba <MainMenu_Tick+0x222>
     ab8:	12 c1       	rjmp	.+548    	; 0xcde <MainMenu_Tick+0x446>
     aba:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     abe:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     ac2:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     ac6:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     aca:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     ace:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     ad2:	e1 cc       	rjmp	.-1598   	; 0x496 <main_menu_display>
     ad4:	08 95       	ret
     ad6:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <settings_menu_selection>
     ada:	81 33       	cpi	r24, 0x31	; 49
     adc:	29 f4       	brne	.+10     	; 0xae8 <MainMenu_Tick+0x250>
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     ae4:	2b cd       	rjmp	.-1450   	; 0x53c <drinks_submenu_display>
     ae6:	08 95       	ret
     ae8:	82 33       	cpi	r24, 0x32	; 50
     aea:	29 f4       	brne	.+10     	; 0xaf6 <MainMenu_Tick+0x25e>
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     af2:	49 cd       	rjmp	.-1390   	; 0x586 <user_submenu_display>
     af4:	08 95       	ret
     af6:	83 33       	cpi	r24, 0x33	; 51
     af8:	89 f4       	brne	.+34     	; 0xb1c <MainMenu_Tick+0x284>
     afa:	8b e0       	ldi	r24, 0x0B	; 11
     afc:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     b00:	db d6       	rcall	.+3510   	; 0x18b8 <nokia_lcd_clear>
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	bd d7       	rcall	.+3962   	; 0x1a84 <nokia_lcd_write_string>
     b0a:	6a e0       	ldi	r22, 0x0A	; 10
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	cc d7       	rcall	.+3992   	; 0x1aa8 <nokia_lcd_set_cursor>
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	8b ee       	ldi	r24, 0xEB	; 235
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	b6 d7       	rcall	.+3948   	; 0x1a84 <nokia_lcd_write_string>
     b18:	cc c7       	rjmp	.+3992   	; 0x1ab2 <nokia_lcd_render>
     b1a:	08 95       	ret
     b1c:	84 33       	cpi	r24, 0x34	; 52
     b1e:	09 f0       	breq	.+2      	; 0xb22 <MainMenu_Tick+0x28a>
     b20:	de c0       	rjmp	.+444    	; 0xcde <MainMenu_Tick+0x446>
     b22:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     b26:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     b2a:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     b2e:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     b32:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     b36:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     b3a:	ad cc       	rjmp	.-1702   	; 0x496 <main_menu_display>
     b3c:	08 95       	ret
     b3e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <drink_menu_selection>
     b42:	81 33       	cpi	r24, 0x31	; 49
     b44:	89 f4       	brne	.+34     	; 0xb68 <MainMenu_Tick+0x2d0>
     b46:	85 e0       	ldi	r24, 0x05	; 5
     b48:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     b4c:	b5 d6       	rcall	.+3434   	; 0x18b8 <nokia_lcd_clear>
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	82 e1       	ldi	r24, 0x12	; 18
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	97 d7       	rcall	.+3886   	; 0x1a84 <nokia_lcd_write_string>
     b56:	6a e0       	ldi	r22, 0x0A	; 10
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	a6 d7       	rcall	.+3916   	; 0x1aa8 <nokia_lcd_set_cursor>
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	8b ee       	ldi	r24, 0xEB	; 235
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	90 d7       	rcall	.+3872   	; 0x1a84 <nokia_lcd_write_string>
     b64:	a6 c7       	rjmp	.+3916   	; 0x1ab2 <nokia_lcd_render>
     b66:	08 95       	ret
     b68:	82 33       	cpi	r24, 0x32	; 50
     b6a:	09 f0       	breq	.+2      	; 0xb6e <MainMenu_Tick+0x2d6>
     b6c:	b8 c0       	rjmp	.+368    	; 0xcde <MainMenu_Tick+0x446>
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     b74:	a1 d6       	rcall	.+3394   	; 0x18b8 <nokia_lcd_clear>
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	8e e1       	ldi	r24, 0x1E	; 30
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	83 d7       	rcall	.+3846   	; 0x1a84 <nokia_lcd_write_string>
     b7e:	6a e0       	ldi	r22, 0x0A	; 10
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	92 d7       	rcall	.+3876   	; 0x1aa8 <nokia_lcd_set_cursor>
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	8b ee       	ldi	r24, 0xEB	; 235
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	7c d7       	rcall	.+3832   	; 0x1a84 <nokia_lcd_write_string>
     b8c:	92 c7       	rjmp	.+3876   	; 0x1ab2 <nokia_lcd_render>
     b8e:	08 95       	ret
     b90:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <temp_menu_selection>
     b94:	83 32       	cpi	r24, 0x23	; 35
     b96:	09 f0       	breq	.+2      	; 0xb9a <MainMenu_Tick+0x302>
     b98:	a2 c0       	rjmp	.+324    	; 0xcde <MainMenu_Tick+0x446>
     b9a:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     b9e:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     ba2:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     ba6:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     baa:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     bae:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     bb2:	71 cc       	rjmp	.-1822   	; 0x496 <main_menu_display>
     bb4:	08 95       	ret
     bb6:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <temp_menu_selection>
     bba:	83 32       	cpi	r24, 0x23	; 35
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <MainMenu_Tick+0x328>
     bbe:	8f c0       	rjmp	.+286    	; 0xcde <MainMenu_Tick+0x446>
     bc0:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     bc4:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     bc8:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     bcc:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     bd0:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     bd4:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     bd8:	5e cc       	rjmp	.-1860   	; 0x496 <main_menu_display>
     bda:	08 95       	ret
     bdc:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <user_menu_selection>
     be0:	81 33       	cpi	r24, 0x31	; 49
     be2:	51 f4       	brne	.+20     	; 0xbf8 <MainMenu_Tick+0x360>
     be4:	88 e0       	ldi	r24, 0x08	; 8
     be6:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 c1 08 	sts	0x08C1, r24	; 0x8008c1 <adding_user_flag>
     bf0:	8c e2       	ldi	r24, 0x2C	; 44
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	f6 cc       	rjmp	.-1556   	; 0x5e2 <adduser_name_display>
     bf6:	08 95       	ret
     bf8:	82 33       	cpi	r24, 0x32	; 50
     bfa:	89 f4       	brne	.+34     	; 0xc1e <MainMenu_Tick+0x386>
     bfc:	89 e0       	ldi	r24, 0x09	; 9
     bfe:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     c02:	5a d6       	rcall	.+3252   	; 0x18b8 <nokia_lcd_clear>
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	8e e2       	ldi	r24, 0x2E	; 46
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	3c d7       	rcall	.+3704   	; 0x1a84 <nokia_lcd_write_string>
     c0c:	6a e0       	ldi	r22, 0x0A	; 10
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	4b d7       	rcall	.+3734   	; 0x1aa8 <nokia_lcd_set_cursor>
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	8b ee       	ldi	r24, 0xEB	; 235
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	35 d7       	rcall	.+3690   	; 0x1a84 <nokia_lcd_write_string>
     c1a:	4b c7       	rjmp	.+3734   	; 0x1ab2 <nokia_lcd_render>
     c1c:	08 95       	ret
     c1e:	83 33       	cpi	r24, 0x33	; 51
     c20:	09 f0       	breq	.+2      	; 0xc24 <MainMenu_Tick+0x38c>
     c22:	5d c0       	rjmp	.+186    	; 0xcde <MainMenu_Tick+0x446>
     c24:	8a e0       	ldi	r24, 0x0A	; 10
     c26:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <mainmenu_state>
     c2a:	46 d6       	rcall	.+3212   	; 0x18b8 <nokia_lcd_clear>
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	8b e3       	ldi	r24, 0x3B	; 59
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	28 d7       	rcall	.+3664   	; 0x1a84 <nokia_lcd_write_string>
     c34:	6a e0       	ldi	r22, 0x0A	; 10
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	37 d7       	rcall	.+3694   	; 0x1aa8 <nokia_lcd_set_cursor>
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	8b ee       	ldi	r24, 0xEB	; 235
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	21 d7       	rcall	.+3650   	; 0x1a84 <nokia_lcd_write_string>
     c42:	37 c7       	rjmp	.+3694   	; 0x1ab2 <nokia_lcd_render>
     c44:	08 95       	ret
     c46:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
     c4a:	81 11       	cpse	r24, r1
     c4c:	48 c0       	rjmp	.+144    	; 0xcde <MainMenu_Tick+0x446>
     c4e:	23 dc       	rcall	.-1978   	; 0x496 <main_menu_display>
     c50:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     c54:	08 95       	ret
     c56:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <temp_menu_selection>
     c5a:	83 32       	cpi	r24, 0x23	; 35
     c5c:	09 f0       	breq	.+2      	; 0xc60 <MainMenu_Tick+0x3c8>
     c5e:	3f c0       	rjmp	.+126    	; 0xcde <MainMenu_Tick+0x446>
     c60:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     c64:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     c68:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     c6c:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     c70:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     c74:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     c78:	0e cc       	rjmp	.-2020   	; 0x496 <main_menu_display>
     c7a:	08 95       	ret
     c7c:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <temp_menu_selection>
     c80:	83 32       	cpi	r24, 0x23	; 35
     c82:	69 f5       	brne	.+90     	; 0xcde <MainMenu_Tick+0x446>
     c84:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     c88:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     c8c:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     c90:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     c94:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     c98:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     c9c:	fc cb       	rjmp	.-2056   	; 0x496 <main_menu_display>
     c9e:	08 95       	ret
     ca0:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <temp_menu_selection>
     ca4:	83 32       	cpi	r24, 0x23	; 35
     ca6:	d9 f4       	brne	.+54     	; 0xcde <MainMenu_Tick+0x446>
     ca8:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     cac:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     cb0:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     cb4:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     cb8:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     cbc:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     cc0:	ea cb       	rjmp	.-2092   	; 0x496 <main_menu_display>
     cc2:	08 95       	ret
     cc4:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <mainmenu_state>
     cc8:	10 92 c6 08 	sts	0x08C6, r1	; 0x8008c6 <main_menu_selection>
     ccc:	10 92 c5 08 	sts	0x08C5, r1	; 0x8008c5 <temp_menu_selection>
     cd0:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <settings_menu_selection>
     cd4:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <drink_menu_selection>
     cd8:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <user_menu_selection>
     cdc:	dc cb       	rjmp	.-2120   	; 0x496 <main_menu_display>
     cde:	08 95       	ret

00000ce0 <MainMenuTask>:
     ce0:	d7 dd       	rcall	.-1106   	; 0x890 <MainMenu_Init>
     ce2:	da dd       	rcall	.-1100   	; 0x898 <MainMenu_Tick>
     ce4:	8a e0       	ldi	r24, 0x0A	; 10
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <vTaskDelay>
     cec:	fa cf       	rjmp	.-12     	; 0xce2 <MainMenuTask+0x2>

00000cee <MainMenuPulse>:
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	a1 2c       	mov	r10, r1
     cfe:	b1 2c       	mov	r11, r1
     d00:	c1 2c       	mov	r12, r1
     d02:	d1 2c       	mov	r13, r1
     d04:	e1 2c       	mov	r14, r1
     d06:	f1 2c       	mov	r15, r1
     d08:	08 2f       	mov	r16, r24
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	45 e5       	ldi	r20, 0x55	; 85
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	66 e4       	ldi	r22, 0x46	; 70
     d14:	72 e0       	ldi	r23, 0x02	; 2
     d16:	80 e7       	ldi	r24, 0x70	; 112
     d18:	96 e0       	ldi	r25, 0x06	; 6
     d1a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskGenericCreate>
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	08 95       	ret

00000d2e <password_verification>:
     d2e:	90 91 ae 08 	lds	r25, 0x08AE	; 0x8008ae <user_password>
     d32:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <user_compare_password>
     d36:	98 13       	cpse	r25, r24
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <password_verification+0x2a>
     d3a:	ef ea       	ldi	r30, 0xAF	; 175
     d3c:	f8 e0       	ldi	r31, 0x08	; 8
     d3e:	a6 ea       	ldi	r26, 0xA6	; 166
     d40:	b8 e0       	ldi	r27, 0x08	; 8
     d42:	26 eb       	ldi	r18, 0xB6	; 182
     d44:	38 e0       	ldi	r19, 0x08	; 8
     d46:	91 91       	ld	r25, Z+
     d48:	8d 91       	ld	r24, X+
     d4a:	98 13       	cpse	r25, r24
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <password_verification+0x2e>
     d4e:	e2 17       	cp	r30, r18
     d50:	f3 07       	cpc	r31, r19
     d52:	c9 f7       	brne	.-14     	; 0xd46 <password_verification+0x18>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	08 95       	ret
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	08 95       	ret
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret

00000d60 <AddUser_Tick>:
}

void AddUser_Tick(){
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
	
	//Actions
	switch(adduser_state){
     d6a:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <adduser_state>
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	09 f4       	brne	.+2      	; 0xd74 <AddUser_Tick+0x14>
     d72:	21 c1       	rjmp	.+578    	; 0xfb6 <AddUser_Tick+0x256>
     d74:	30 f4       	brcc	.+12     	; 0xd82 <AddUser_Tick+0x22>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	69 f0       	breq	.+26     	; 0xd94 <AddUser_Tick+0x34>
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	09 f4       	brne	.+2      	; 0xd80 <AddUser_Tick+0x20>
     d7e:	5c c0       	rjmp	.+184    	; 0xe38 <AddUser_Tick+0xd8>
     d80:	0a c3       	rjmp	.+1556   	; 0x1396 <AddUser_Tick+0x636>
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	09 f4       	brne	.+2      	; 0xd88 <AddUser_Tick+0x28>
     d86:	26 c2       	rjmp	.+1100   	; 0x11d4 <AddUser_Tick+0x474>
     d88:	08 f4       	brcc	.+2      	; 0xd8c <AddUser_Tick+0x2c>
     d8a:	91 c1       	rjmp	.+802    	; 0x10ae <AddUser_Tick+0x34e>
     d8c:	86 30       	cpi	r24, 0x06	; 6
     d8e:	09 f4       	brne	.+2      	; 0xd92 <AddUser_Tick+0x32>
     d90:	dc c2       	rjmp	.+1464   	; 0x134a <AddUser_Tick+0x5ea>
     d92:	01 c3       	rjmp	.+1538   	; 0x1396 <AddUser_Tick+0x636>
		case adduser_init:
			break;
			
		case username:
			keypad_character = AlphaNumPad();
     d94:	a2 dc       	rcall	.-1724   	; 0x6da <AlphaNumPad>
     d96:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
			previous_character = '\0';
     d9a:	10 92 a2 08 	sts	0x08A2, r1	; 0x8008a2 <previous_character>
			while(keypad_character != '#'){
     d9e:	83 32       	cpi	r24, 0x23	; 35
     da0:	09 f4       	brne	.+2      	; 0xda4 <AddUser_Tick+0x44>
     da2:	e8 c4       	rjmp	.+2512   	; 0x1774 <AddUser_Tick+0xa14>
				if(keypad_character == '*'){
					if(user_name_size > 0){
						--user_name_size;
						user_name[user_name_size] = '_';
     da4:	cf e5       	ldi	r28, 0x5F	; 95
			
		case username:
			keypad_character = AlphaNumPad();
			previous_character = '\0';
			while(keypad_character != '#'){
				if(keypad_character == '*'){
     da6:	8a 32       	cpi	r24, 0x2A	; 42
     da8:	b1 f4       	brne	.+44     	; 0xdd6 <AddUser_Tick+0x76>
					if(user_name_size > 0){
     daa:	e0 91 b9 08 	lds	r30, 0x08B9	; 0x8008b9 <user_name_size>
     dae:	ee 23       	and	r30, r30
     db0:	71 f0       	breq	.+28     	; 0xdce <AddUser_Tick+0x6e>
						--user_name_size;
     db2:	e1 50       	subi	r30, 0x01	; 1
     db4:	e0 93 b9 08 	sts	0x08B9, r30	; 0x8008b9 <user_name_size>
						user_name[user_name_size] = '_';
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	eb 5f       	subi	r30, 0xFB	; 251
     dbc:	fe 4f       	sbci	r31, 0xFE	; 254
     dbe:	c0 83       	st	Z, r28
						user_name[user_name_size + 1] = '\0';
     dc0:	11 82       	std	Z+1, r1	; 0x01
						previous_character = '\0';
     dc2:	10 92 a2 08 	sts	0x08A2, r1	; 0x8008a2 <previous_character>
						adduser_name_display(user_name);
     dc6:	85 e0       	ldi	r24, 0x05	; 5
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0b dc       	rcall	.-2026   	; 0x5e2 <adduser_name_display>
     dcc:	28 c0       	rjmp	.+80     	; 0xe1e <AddUser_Tick+0xbe>
					}
				
					else{
						adduser_name_display(user_name);
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	07 dc       	rcall	.-2034   	; 0x5e2 <adduser_name_display>
     dd4:	24 c0       	rjmp	.+72     	; 0xe1e <AddUser_Tick+0xbe>
					}
				}
			
				else if(keypad_character != '\0'){
     dd6:	88 23       	and	r24, r24
     dd8:	69 f0       	breq	.+26     	; 0xdf4 <AddUser_Tick+0x94>
					user_name[user_name_size] = keypad_character;
     dda:	e0 91 b9 08 	lds	r30, 0x08B9	; 0x8008b9 <user_name_size>
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	eb 5f       	subi	r30, 0xFB	; 251
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	80 83       	st	Z, r24
					user_name[user_name_size + 1] = '\0';
     de6:	11 82       	std	Z+1, r1	; 0x01
					previous_character = keypad_character;
     de8:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
					adduser_name_display(user_name);
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	f8 db       	rcall	.-2064   	; 0x5e2 <adduser_name_display>
     df2:	15 c0       	rjmp	.+42     	; 0xe1e <AddUser_Tick+0xbe>
				}
			
				else{
					if(previous_character !='\0'){
     df4:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <previous_character>
     df8:	88 23       	and	r24, r24
     dfa:	89 f0       	breq	.+34     	; 0xe1e <AddUser_Tick+0xbe>
						if(user_name_size < 10){
     dfc:	e0 91 b9 08 	lds	r30, 0x08B9	; 0x8008b9 <user_name_size>
     e00:	ea 30       	cpi	r30, 0x0A	; 10
     e02:	68 f4       	brcc	.+26     	; 0xe1e <AddUser_Tick+0xbe>
							++user_name_size;
     e04:	ef 5f       	subi	r30, 0xFF	; 255
     e06:	e0 93 b9 08 	sts	0x08B9, r30	; 0x8008b9 <user_name_size>
							user_name[user_name_size] = '_';
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	eb 5f       	subi	r30, 0xFB	; 251
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	c0 83       	st	Z, r28
							user_name[user_name_size + 1] = '\0';
     e12:	11 82       	std	Z+1, r1	; 0x01
							previous_character = '\0';
     e14:	10 92 a2 08 	sts	0x08A2, r1	; 0x8008a2 <previous_character>
							adduser_name_display(user_name);
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	e2 db       	rcall	.-2108   	; 0x5e2 <adduser_name_display>
						}
					}
				}
				keypad_character = AlphaNumPad();
     e1e:	5d dc       	rcall	.-1862   	; 0x6da <AlphaNumPad>
     e20:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
     e24:	83 32       	cpi	r24, 0x23	; 35
			break;
			
		case username:
			keypad_character = AlphaNumPad();
			previous_character = '\0';
			while(keypad_character != '#'){
     e26:	09 f0       	breq	.+2      	; 0xe2a <AddUser_Tick+0xca>
     e28:	be cf       	rjmp	.-132    	; 0xda6 <AddUser_Tick+0x46>
     e2a:	a4 c4       	rjmp	.+2376   	; 0x1774 <AddUser_Tick+0xa14>
     e2c:	8f e4       	ldi	r24, 0x4F	; 79
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e2e:	93 ec       	ldi	r25, 0xC3	; 195
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <AddUser_Tick+0xd0>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <AddUser_Tick+0xd6>
     e36:	00 00       	nop

		
			break;
		
		case userweight:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     e38:	eb db       	rcall	.-2090   	; 0x610 <GetKeypadKey>
     e3a:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
     e3e:	88 23       	and	r24, r24
     e40:	a9 f3       	breq	.-22     	; 0xe2c <AddUser_Tick+0xcc>
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <AddUser_Tick+0xf0>
     e44:	ef e4       	ldi	r30, 0x4F	; 79
     e46:	f3 ec       	ldi	r31, 0xC3	; 195
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <AddUser_Tick+0xe8>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <AddUser_Tick+0xee>
     e4e:	00 00       	nop
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
     e50:	df db       	rcall	.-2114   	; 0x610 <GetKeypadKey>
     e52:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
     e56:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
     e5a:	89 17       	cp	r24, r25
     e5c:	99 f3       	breq	.-26     	; 0xe44 <AddUser_Tick+0xe4>
     e5e:	c0 e0       	ldi	r28, 0x00	; 0
					nokia_lcd_render();
				}
			
				else if(keypad_character == '*'){
					user_weight = 0;
					weight_output[0] = '_';
     e60:	d1 e0       	ldi	r29, 0x01	; 1
     e62:	1f e5       	ldi	r17, 0x5F	; 95
     e64:	9c c0       	rjmp	.+312    	; 0xf9e <AddUser_Tick+0x23e>
     e66:	88 23       	and	r24, r24
		case userweight:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }

			while(keypad_character != '#'){
				if(keypad_character != '\0' && keypad_character != '*' && user_weight == 0){
     e68:	09 f4       	brne	.+2      	; 0xe6c <AddUser_Tick+0x10c>
     e6a:	86 c0       	rjmp	.+268    	; 0xf78 <AddUser_Tick+0x218>
     e6c:	8a 32       	cpi	r24, 0x2A	; 42
     e6e:	09 f4       	brne	.+2      	; 0xe72 <AddUser_Tick+0x112>
     e70:	64 c0       	rjmp	.+200    	; 0xf3a <AddUser_Tick+0x1da>
     e72:	90 91 b8 08 	lds	r25, 0x08B8	; 0x8008b8 <user_weight>
     e76:	91 11       	cpse	r25, r1
     e78:	19 c0       	rjmp	.+50     	; 0xeac <AddUser_Tick+0x14c>
					user_weight = keypad_character - '0';
     e7a:	90 ed       	ldi	r25, 0xD0	; 208
     e7c:	98 0f       	add	r25, r24
     e7e:	90 93 b8 08 	sts	0x08B8, r25	; 0x8008b8 <user_weight>
					weight_output[0] =  keypad_character;
					nokia_lcd_clear();
     e82:	88 83       	st	Y, r24
					nokia_lcd_write_string("Enter your",1);
     e84:	19 d5       	rcall	.+2610   	; 0x18b8 <nokia_lcd_clear>
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	83 e5       	ldi	r24, 0x53	; 83
     e8a:	92 e0       	ldi	r25, 0x02	; 2
					nokia_lcd_set_cursor(0,10);
     e8c:	fb d5       	rcall	.+3062   	; 0x1a84 <nokia_lcd_write_string>
     e8e:	6a e0       	ldi	r22, 0x0A	; 10
     e90:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_write_string("weight in lbs",1);
     e92:	0a d6       	rcall	.+3092   	; 0x1aa8 <nokia_lcd_set_cursor>
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	8e e5       	ldi	r24, 0x5E	; 94
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	f4 d5       	rcall	.+3048   	; 0x1a84 <nokia_lcd_write_string>
					nokia_lcd_set_cursor(0,20);
     e9c:	64 e1       	ldi	r22, 0x14	; 20
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	03 d6       	rcall	.+3078   	; 0x1aa8 <nokia_lcd_set_cursor>
     ea2:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(weight_output,1);
     ea4:	ce 01       	movw	r24, r28
     ea6:	ee d5       	rcall	.+3036   	; 0x1a84 <nokia_lcd_write_string>
     ea8:	04 d6       	rcall	.+3080   	; 0x1ab2 <nokia_lcd_render>
     eaa:	66 c0       	rjmp	.+204    	; 0xf78 <AddUser_Tick+0x218>
					nokia_lcd_render();
     eac:	2f ef       	ldi	r18, 0xFF	; 255
     eae:	29 0f       	add	r18, r25
     eb0:	29 30       	cpi	r18, 0x09	; 9
				}
			
				else if(keypad_character != '\0' && keypad_character != '*' && user_weight >= 1 && user_weight <= 9){
     eb2:	f8 f4       	brcc	.+62     	; 0xef2 <AddUser_Tick+0x192>
     eb4:	30 ed       	ldi	r19, 0xD0	; 208
     eb6:	38 0f       	add	r19, r24
					user_weight = (user_weight * 10) + keypad_character - '0';
     eb8:	99 0f       	add	r25, r25
     eba:	29 2f       	mov	r18, r25
     ebc:	22 0f       	add	r18, r18
     ebe:	22 0f       	add	r18, r18
     ec0:	92 0f       	add	r25, r18
     ec2:	93 0f       	add	r25, r19
     ec4:	90 93 b8 08 	sts	0x08B8, r25	; 0x8008b8 <user_weight>
					weight_output[1] =  keypad_character;
					nokia_lcd_clear();
     ec8:	89 83       	std	Y+1, r24	; 0x01
					nokia_lcd_write_string("Enter your",1);
     eca:	f6 d4       	rcall	.+2540   	; 0x18b8 <nokia_lcd_clear>
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	83 e5       	ldi	r24, 0x53	; 83
					nokia_lcd_set_cursor(0,10);
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	d8 d5       	rcall	.+2992   	; 0x1a84 <nokia_lcd_write_string>
     ed4:	6a e0       	ldi	r22, 0x0A	; 10
     ed6:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_write_string("weight in lbs",1);
     ed8:	e7 d5       	rcall	.+3022   	; 0x1aa8 <nokia_lcd_set_cursor>
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	8e e5       	ldi	r24, 0x5E	; 94
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	d1 d5       	rcall	.+2978   	; 0x1a84 <nokia_lcd_write_string>
					nokia_lcd_set_cursor(0,20);
     ee2:	64 e1       	ldi	r22, 0x14	; 20
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	e0 d5       	rcall	.+3008   	; 0x1aa8 <nokia_lcd_set_cursor>
     ee8:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(weight_output,1);
     eea:	ce 01       	movw	r24, r28
     eec:	cb d5       	rcall	.+2966   	; 0x1a84 <nokia_lcd_write_string>
     eee:	e1 d5       	rcall	.+3010   	; 0x1ab2 <nokia_lcd_render>
					nokia_lcd_render();
     ef0:	43 c0       	rjmp	.+134    	; 0xf78 <AddUser_Tick+0x218>
     ef2:	26 ef       	ldi	r18, 0xF6	; 246
				}
			
				else if(keypad_character != '\0' && keypad_character != '*' && user_weight >= 10 && user_weight <= 99){
     ef4:	29 0f       	add	r18, r25
     ef6:	2a 35       	cpi	r18, 0x5A	; 90
     ef8:	08 f0       	brcs	.+2      	; 0xefc <AddUser_Tick+0x19c>
     efa:	3e c0       	rjmp	.+124    	; 0xf78 <AddUser_Tick+0x218>
					user_weight = (user_weight * 10) + keypad_character - '0';
     efc:	30 ed       	ldi	r19, 0xD0	; 208
     efe:	38 0f       	add	r19, r24
     f00:	99 0f       	add	r25, r25
     f02:	29 2f       	mov	r18, r25
     f04:	22 0f       	add	r18, r18
     f06:	22 0f       	add	r18, r18
     f08:	92 0f       	add	r25, r18
					weight_output[2] = keypad_character;
     f0a:	93 0f       	add	r25, r19
					nokia_lcd_clear();
     f0c:	90 93 b8 08 	sts	0x08B8, r25	; 0x8008b8 <user_weight>
					nokia_lcd_write_string("Enter your",1);
     f10:	8a 83       	std	Y+2, r24	; 0x02
     f12:	d2 d4       	rcall	.+2468   	; 0x18b8 <nokia_lcd_clear>
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	83 e5       	ldi	r24, 0x53	; 83
					nokia_lcd_set_cursor(0,10);
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	b4 d5       	rcall	.+2920   	; 0x1a84 <nokia_lcd_write_string>
     f1c:	6a e0       	ldi	r22, 0x0A	; 10
					nokia_lcd_write_string("weight in lbs",1);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	c3 d5       	rcall	.+2950   	; 0x1aa8 <nokia_lcd_set_cursor>
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	8e e5       	ldi	r24, 0x5E	; 94
					nokia_lcd_set_cursor(0,20);
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	ad d5       	rcall	.+2906   	; 0x1a84 <nokia_lcd_write_string>
     f2a:	64 e1       	ldi	r22, 0x14	; 20
					nokia_lcd_write_string(weight_output,1);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	bc d5       	rcall	.+2936   	; 0x1aa8 <nokia_lcd_set_cursor>
					nokia_lcd_render();
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	ce 01       	movw	r24, r28
     f34:	a7 d5       	rcall	.+2894   	; 0x1a84 <nokia_lcd_write_string>
				}
			
				else if(keypad_character == '*'){
					user_weight = 0;
     f36:	bd d5       	rcall	.+2938   	; 0x1ab2 <nokia_lcd_render>
     f38:	1f c0       	rjmp	.+62     	; 0xf78 <AddUser_Tick+0x218>
					weight_output[0] = '_';
					weight_output[1] = '\0';
     f3a:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <user_weight>
					weight_output[2] = '\0';
					nokia_lcd_clear();
     f3e:	18 83       	st	Y, r17
     f40:	19 82       	std	Y+1, r1	; 0x01
					nokia_lcd_write_string("Enter your",1);
     f42:	1a 82       	std	Y+2, r1	; 0x02
     f44:	b9 d4       	rcall	.+2418   	; 0x18b8 <nokia_lcd_clear>
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	83 e5       	ldi	r24, 0x53	; 83
     f4a:	92 e0       	ldi	r25, 0x02	; 2
					nokia_lcd_set_cursor(0,10);
     f4c:	9b d5       	rcall	.+2870   	; 0x1a84 <nokia_lcd_write_string>
     f4e:	6a e0       	ldi	r22, 0x0A	; 10
     f50:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_write_string("weight in lbs",1);
     f52:	aa d5       	rcall	.+2900   	; 0x1aa8 <nokia_lcd_set_cursor>
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	8e e5       	ldi	r24, 0x5E	; 94
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	94 d5       	rcall	.+2856   	; 0x1a84 <nokia_lcd_write_string>
					nokia_lcd_set_cursor(0,20);
     f5c:	64 e1       	ldi	r22, 0x14	; 20
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	a3 d5       	rcall	.+2886   	; 0x1aa8 <nokia_lcd_set_cursor>
     f62:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(weight_output,1);
     f64:	ce 01       	movw	r24, r28
     f66:	8e d5       	rcall	.+2844   	; 0x1a84 <nokia_lcd_write_string>
     f68:	a4 d5       	rcall	.+2888   	; 0x1ab2 <nokia_lcd_render>
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <AddUser_Tick+0x218>
					nokia_lcd_render();
     f6c:	87 ea       	ldi	r24, 0xA7	; 167
     f6e:	91 e6       	ldi	r25, 0x61	; 97
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <AddUser_Tick+0x210>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <AddUser_Tick+0x216>
     f76:	00 00       	nop
     f78:	4b db       	rcall	.-2410   	; 0x610 <GetKeypadKey>
     f7a:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
				}
			
				while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(100); }
     f7e:	88 23       	and	r24, r24
     f80:	a9 f3       	breq	.-22     	; 0xf6c <AddUser_Tick+0x20c>
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <AddUser_Tick+0x230>
     f84:	e7 ea       	ldi	r30, 0xA7	; 167
     f86:	f1 e6       	ldi	r31, 0x61	; 97
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <AddUser_Tick+0x228>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <AddUser_Tick+0x22e>
     f8e:	00 00       	nop
     f90:	3f db       	rcall	.-2434   	; 0x610 <GetKeypadKey>
     f92:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
			
				while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(100); }
     f96:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
     f9a:	89 17       	cp	r24, r25
     f9c:	99 f3       	breq	.-26     	; 0xf84 <AddUser_Tick+0x224>
     f9e:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
     fa2:	83 32       	cpi	r24, 0x23	; 35
		
		case userweight:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }

			while(keypad_character != '#'){
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <AddUser_Tick+0x248>
     fa6:	5f cf       	rjmp	.-322    	; 0xe66 <AddUser_Tick+0x106>
     fa8:	e5 c3       	rjmp	.+1994   	; 0x1774 <AddUser_Tick+0xa14>
     faa:	8f e4       	ldi	r24, 0x4F	; 79
     fac:	93 ec       	ldi	r25, 0xC3	; 195
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <AddUser_Tick+0x24e>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <AddUser_Tick+0x254>
     fb4:	00 00       	nop
			
			}
			break;
		
		case usergender:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     fb6:	2c db       	rcall	.-2472   	; 0x610 <GetKeypadKey>
     fb8:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
     fbc:	88 23       	and	r24, r24
     fbe:	a9 f3       	breq	.-22     	; 0xfaa <AddUser_Tick+0x24a>
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <AddUser_Tick+0x26e>
     fc2:	ef e4       	ldi	r30, 0x4F	; 79
     fc4:	f3 ec       	ldi	r31, 0xC3	; 195
     fc6:	31 97       	sbiw	r30, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <AddUser_Tick+0x266>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <AddUser_Tick+0x26c>
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
     fcc:	00 00       	nop
     fce:	20 db       	rcall	.-2496   	; 0x610 <GetKeypadKey>
     fd0:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
     fd4:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
					nokia_lcd_write_string("Male",1);
					nokia_lcd_render();
				}
			
				if(keypad_character == '2'){
					user_gender = 2;
     fd8:	89 17       	cp	r24, r25
     fda:	99 f3       	breq	.-26     	; 0xfc2 <AddUser_Tick+0x262>
		case usergender:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
		
			while(keypad_character != '#'){
				if(keypad_character == '1'){
     fdc:	c1 e0       	ldi	r28, 0x01	; 1
					user_gender = 1;
     fde:	d2 e0       	ldi	r29, 0x02	; 2
     fe0:	5a c0       	rjmp	.+180    	; 0x1096 <AddUser_Tick+0x336>
					nokia_lcd_clear();
     fe2:	81 33       	cpi	r24, 0x31	; 49
					nokia_lcd_write_string("Select Gender",1);
     fe4:	e9 f4       	brne	.+58     	; 0x1020 <AddUser_Tick+0x2c0>
     fe6:	c0 93 b7 08 	sts	0x08B7, r28	; 0x8008b7 <user_gender>
     fea:	66 d4       	rcall	.+2252   	; 0x18b8 <nokia_lcd_clear>
					nokia_lcd_set_cursor(0,10);
     fec:	6c 2f       	mov	r22, r28
     fee:	8c e6       	ldi	r24, 0x6C	; 108
     ff0:	92 e0       	ldi	r25, 0x02	; 2
					nokia_lcd_write_string("1: Male",1);
     ff2:	48 d5       	rcall	.+2704   	; 0x1a84 <nokia_lcd_write_string>
     ff4:	6a e0       	ldi	r22, 0x0A	; 10
     ff6:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_set_cursor(0,20);
     ff8:	57 d5       	rcall	.+2734   	; 0x1aa8 <nokia_lcd_set_cursor>
     ffa:	6c 2f       	mov	r22, r28
     ffc:	8a e7       	ldi	r24, 0x7A	; 122
					nokia_lcd_write_string("2: Female",1);
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	41 d5       	rcall	.+2690   	; 0x1a84 <nokia_lcd_write_string>
    1002:	64 e1       	ldi	r22, 0x14	; 20
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	50 d5       	rcall	.+2720   	; 0x1aa8 <nokia_lcd_set_cursor>
					nokia_lcd_set_cursor(0,30);
    1008:	6c 2f       	mov	r22, r28
    100a:	82 e8       	ldi	r24, 0x82	; 130
    100c:	92 e0       	ldi	r25, 0x02	; 2
					nokia_lcd_write_string("Male",1);
    100e:	3a d5       	rcall	.+2676   	; 0x1a84 <nokia_lcd_write_string>
    1010:	6e e1       	ldi	r22, 0x1E	; 30
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	49 d5       	rcall	.+2706   	; 0x1aa8 <nokia_lcd_set_cursor>
    1016:	6c 2f       	mov	r22, r28
					nokia_lcd_render();
    1018:	8d e7       	ldi	r24, 0x7D	; 125
    101a:	92 e0       	ldi	r25, 0x02	; 2
				}
			
				if(keypad_character == '2'){
    101c:	33 d5       	rcall	.+2662   	; 0x1a84 <nokia_lcd_write_string>
    101e:	49 d5       	rcall	.+2706   	; 0x1ab2 <nokia_lcd_render>
    1020:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
					user_gender = 2;
    1024:	82 33       	cpi	r24, 0x32	; 50
					nokia_lcd_clear();
    1026:	21 f5       	brne	.+72     	; 0x1070 <AddUser_Tick+0x310>
    1028:	d0 93 b7 08 	sts	0x08B7, r29	; 0x8008b7 <user_gender>
					nokia_lcd_write_string("Select Gender",1);
    102c:	45 d4       	rcall	.+2186   	; 0x18b8 <nokia_lcd_clear>
    102e:	6c 2f       	mov	r22, r28
    1030:	8c e6       	ldi	r24, 0x6C	; 108
    1032:	92 e0       	ldi	r25, 0x02	; 2
					nokia_lcd_set_cursor(0,10);
    1034:	27 d5       	rcall	.+2638   	; 0x1a84 <nokia_lcd_write_string>
    1036:	6a e0       	ldi	r22, 0x0A	; 10
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	36 d5       	rcall	.+2668   	; 0x1aa8 <nokia_lcd_set_cursor>
					nokia_lcd_write_string("1: Male",1);
    103c:	6c 2f       	mov	r22, r28
    103e:	8a e7       	ldi	r24, 0x7A	; 122
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	20 d5       	rcall	.+2624   	; 0x1a84 <nokia_lcd_write_string>
    1044:	64 e1       	ldi	r22, 0x14	; 20
					nokia_lcd_set_cursor(0,20);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	2f d5       	rcall	.+2654   	; 0x1aa8 <nokia_lcd_set_cursor>
    104a:	6c 2f       	mov	r22, r28
					nokia_lcd_write_string("2: Female",1);
    104c:	82 e8       	ldi	r24, 0x82	; 130
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	19 d5       	rcall	.+2610   	; 0x1a84 <nokia_lcd_write_string>
    1052:	6e e1       	ldi	r22, 0x1E	; 30
    1054:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_set_cursor(0,30);
    1056:	28 d5       	rcall	.+2640   	; 0x1aa8 <nokia_lcd_set_cursor>
    1058:	6c 2f       	mov	r22, r28
    105a:	85 e8       	ldi	r24, 0x85	; 133
					nokia_lcd_write_string("Female",1);
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	12 d5       	rcall	.+2596   	; 0x1a84 <nokia_lcd_write_string>
    1060:	28 d5       	rcall	.+2640   	; 0x1ab2 <nokia_lcd_render>
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <AddUser_Tick+0x310>
    1064:	8f e4       	ldi	r24, 0x4F	; 79
					nokia_lcd_render();
    1066:	93 ec       	ldi	r25, 0xC3	; 195
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <AddUser_Tick+0x308>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <AddUser_Tick+0x30e>
    106e:	00 00       	nop
    1070:	cf da       	rcall	.-2658   	; 0x610 <GetKeypadKey>
    1072:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
    1076:	88 23       	and	r24, r24
				}
			
				while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
    1078:	a9 f3       	breq	.-22     	; 0x1064 <AddUser_Tick+0x304>
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <AddUser_Tick+0x328>
    107c:	ef e4       	ldi	r30, 0x4F	; 79
    107e:	f3 ec       	ldi	r31, 0xC3	; 195
    1080:	31 97       	sbiw	r30, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <AddUser_Tick+0x320>
    1084:	00 c0       	rjmp	.+0      	; 0x1086 <AddUser_Tick+0x326>
    1086:	00 00       	nop
    1088:	c3 da       	rcall	.-2682   	; 0x610 <GetKeypadKey>
    108a:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
    108e:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
			
				while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
    1092:	89 17       	cp	r24, r25
    1094:	99 f3       	breq	.-26     	; 0x107c <AddUser_Tick+0x31c>
    1096:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
    109a:	83 32       	cpi	r24, 0x23	; 35
    109c:	09 f0       	breq	.+2      	; 0x10a0 <AddUser_Tick+0x340>
    109e:	a1 cf       	rjmp	.-190    	; 0xfe2 <AddUser_Tick+0x282>
    10a0:	69 c3       	rjmp	.+1746   	; 0x1774 <AddUser_Tick+0xa14>
		
		case usergender:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
		
			while(keypad_character != '#'){
    10a2:	8f e4       	ldi	r24, 0x4F	; 79
    10a4:	93 ec       	ldi	r25, 0xC3	; 195
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <AddUser_Tick+0x346>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <AddUser_Tick+0x34c>
    10ac:	00 00       	nop
    10ae:	b0 da       	rcall	.-2720   	; 0x610 <GetKeypadKey>
    10b0:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
    10b4:	88 23       	and	r24, r24
			}
		
			break;
		
		case userpassword:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
    10b6:	a9 f3       	breq	.-22     	; 0x10a2 <AddUser_Tick+0x342>
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <AddUser_Tick+0x366>
    10ba:	ef e4       	ldi	r30, 0x4F	; 79
    10bc:	f3 ec       	ldi	r31, 0xC3	; 195
    10be:	31 97       	sbiw	r30, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <AddUser_Tick+0x35e>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <AddUser_Tick+0x364>
    10c4:	00 00       	nop
    10c6:	a4 da       	rcall	.-2744   	; 0x610 <GetKeypadKey>
    10c8:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
    10cc:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
    10d0:	89 17       	cp	r24, r25
    10d2:	99 f3       	breq	.-26     	; 0x10ba <AddUser_Tick+0x35a>
    10d4:	c6 eb       	ldi	r28, 0xB6	; 182
    10d6:	d8 e0       	ldi	r29, 0x08	; 8
    10d8:	0e ea       	ldi	r16, 0xAE	; 174
    10da:	18 e0       	ldi	r17, 0x08	; 8
    10dc:	0f 2e       	mov	r0, r31
				if(keypad_character == '*'){
					password_size = 0;
					for(unsigned char i = 0; i < 8; ++i){
						user_password[i] = '\0';
					}
					user_password[0] = '*';
    10de:	fa e2       	ldi	r31, 0x2A	; 42
    10e0:	ff 2e       	mov	r15, r31
    10e2:	f0 2d       	mov	r31, r0
    10e4:	6b c0       	rjmp	.+214    	; 0x11bc <AddUser_Tick+0x45c>
    10e6:	88 23       	and	r24, r24
    10e8:	09 f4       	brne	.+2      	; 0x10ec <AddUser_Tick+0x38c>
    10ea:	55 c0       	rjmp	.+170    	; 0x1196 <AddUser_Tick+0x436>
		case userpassword:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
		
			while(keypad_character != '#'){
				if(keypad_character != '\0' && keypad_character != '*'){
    10ec:	8a 32       	cpi	r24, 0x2A	; 42
    10ee:	79 f1       	breq	.+94     	; 0x114e <AddUser_Tick+0x3ee>
    10f0:	20 91 a4 08 	lds	r18, 0x08A4	; 0x8008a4 <password_size>
					if(password_size < 8){
    10f4:	28 30       	cpi	r18, 0x08	; 8
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <AddUser_Tick+0x39a>
    10f8:	4e c0       	rjmp	.+156    	; 0x1196 <AddUser_Tick+0x436>
						user_password[password_size] = keypad_character;
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	f9 01       	movw	r30, r18
    10fe:	e2 55       	subi	r30, 0x52	; 82
    1100:	f7 4f       	sbci	r31, 0xF7	; 247
						if(password_size + 1 < 8){
    1102:	80 83       	st	Z, r24
    1104:	2f 5f       	subi	r18, 0xFF	; 255
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
							user_password[password_size + 1] = '*';
    1108:	28 30       	cpi	r18, 0x08	; 8
    110a:	31 05       	cpc	r19, r1
    110c:	24 f4       	brge	.+8      	; 0x1116 <AddUser_Tick+0x3b6>
    110e:	f9 01       	movw	r30, r18
						}
						nokia_lcd_clear();
    1110:	e2 55       	subi	r30, 0x52	; 82
    1112:	f7 4f       	sbci	r31, 0xF7	; 247
						nokia_lcd_write_string("Create",1);
    1114:	f0 82       	st	Z, r15
    1116:	d0 d3       	rcall	.+1952   	; 0x18b8 <nokia_lcd_clear>
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	8c e8       	ldi	r24, 0x8C	; 140
						nokia_lcd_set_cursor(0,10);
    111c:	92 e0       	ldi	r25, 0x02	; 2
    111e:	b2 d4       	rcall	.+2404   	; 0x1a84 <nokia_lcd_write_string>
    1120:	6a e0       	ldi	r22, 0x0A	; 10
    1122:	80 e0       	ldi	r24, 0x00	; 0
						nokia_lcd_write_string("Password",1);
    1124:	c1 d4       	rcall	.+2434   	; 0x1aa8 <nokia_lcd_set_cursor>
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	89 ec       	ldi	r24, 0xC9	; 201
    112a:	91 e0       	ldi	r25, 0x01	; 1
						nokia_lcd_set_cursor(0,20);
    112c:	ab d4       	rcall	.+2390   	; 0x1a84 <nokia_lcd_write_string>
    112e:	64 e1       	ldi	r22, 0x14	; 20
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	ba d4       	rcall	.+2420   	; 0x1aa8 <nokia_lcd_set_cursor>
						nokia_lcd_write_string(user_password,1);
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	c8 01       	movw	r24, r16
    1138:	a5 d4       	rcall	.+2378   	; 0x1a84 <nokia_lcd_write_string>
    113a:	bb d4       	rcall	.+2422   	; 0x1ab2 <nokia_lcd_render>
						nokia_lcd_render();
    113c:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <password_size>
					
						++password_size;
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <password_size>
    1146:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
					}
				}
			
				if(keypad_character == '*'){
    114a:	8a 32       	cpi	r24, 0x2A	; 42
    114c:	21 f5       	brne	.+72     	; 0x1196 <AddUser_Tick+0x436>
    114e:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <password_size>
					password_size = 0;
    1152:	ee ea       	ldi	r30, 0xAE	; 174
    1154:	f8 e0       	ldi	r31, 0x08	; 8
    1156:	11 92       	st	Z+, r1
					for(unsigned char i = 0; i < 8; ++i){
						user_password[i] = '\0';
    1158:	ec 17       	cp	r30, r28
					}
				}
			
				if(keypad_character == '*'){
					password_size = 0;
					for(unsigned char i = 0; i < 8; ++i){
    115a:	fd 07       	cpc	r31, r29
    115c:	e1 f7       	brne	.-8      	; 0x1156 <AddUser_Tick+0x3f6>
    115e:	f8 01       	movw	r30, r16
						user_password[i] = '\0';
					}
					user_password[0] = '*';
    1160:	f0 82       	st	Z, r15
    1162:	aa d3       	rcall	.+1876   	; 0x18b8 <nokia_lcd_clear>
					nokia_lcd_clear();
    1164:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string("Create",1);
    1166:	8c e8       	ldi	r24, 0x8C	; 140
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	8c d4       	rcall	.+2328   	; 0x1a84 <nokia_lcd_write_string>
    116c:	6a e0       	ldi	r22, 0x0A	; 10
    116e:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_set_cursor(0,10);
    1170:	9b d4       	rcall	.+2358   	; 0x1aa8 <nokia_lcd_set_cursor>
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	89 ec       	ldi	r24, 0xC9	; 201
    1176:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_write_string("Password",1);
    1178:	85 d4       	rcall	.+2314   	; 0x1a84 <nokia_lcd_write_string>
    117a:	64 e1       	ldi	r22, 0x14	; 20
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	94 d4       	rcall	.+2344   	; 0x1aa8 <nokia_lcd_set_cursor>
    1180:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_set_cursor(0,20);
    1182:	c8 01       	movw	r24, r16
    1184:	7f d4       	rcall	.+2302   	; 0x1a84 <nokia_lcd_write_string>
    1186:	95 d4       	rcall	.+2346   	; 0x1ab2 <nokia_lcd_render>
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <AddUser_Tick+0x436>
					nokia_lcd_write_string(user_password,1);
    118a:	8f e4       	ldi	r24, 0x4F	; 79
    118c:	93 ec       	ldi	r25, 0xC3	; 195
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <AddUser_Tick+0x42e>
					nokia_lcd_render();
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <AddUser_Tick+0x434>
    1194:	00 00       	nop
    1196:	3c da       	rcall	.-2952   	; 0x610 <GetKeypadKey>
    1198:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
    119c:	88 23       	and	r24, r24
    119e:	a9 f3       	breq	.-22     	; 0x118a <AddUser_Tick+0x42a>
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <AddUser_Tick+0x44e>
    11a2:	ef e4       	ldi	r30, 0x4F	; 79
				}
			
				while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
    11a4:	f3 ec       	ldi	r31, 0xC3	; 195
    11a6:	31 97       	sbiw	r30, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <AddUser_Tick+0x446>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <AddUser_Tick+0x44c>
    11ac:	00 00       	nop
    11ae:	30 da       	rcall	.-2976   	; 0x610 <GetKeypadKey>
    11b0:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
    11b4:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
    11b8:	89 17       	cp	r24, r25
    11ba:	99 f3       	breq	.-26     	; 0x11a2 <AddUser_Tick+0x442>
			
				while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
    11bc:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
    11c0:	83 32       	cpi	r24, 0x23	; 35
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <AddUser_Tick+0x466>
    11c4:	90 cf       	rjmp	.-224    	; 0x10e6 <AddUser_Tick+0x386>
    11c6:	d6 c2       	rjmp	.+1452   	; 0x1774 <AddUser_Tick+0xa14>
		
		case userpassword:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
		
			while(keypad_character != '#'){
    11c8:	8f e4       	ldi	r24, 0x4F	; 79
    11ca:	93 ec       	ldi	r25, 0xC3	; 195
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <AddUser_Tick+0x46c>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <AddUser_Tick+0x472>
    11d2:	00 00       	nop
    11d4:	1d da       	rcall	.-3014   	; 0x610 <GetKeypadKey>
    11d6:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
			}
		
			break;
		
		case confirmpassword:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
    11da:	88 23       	and	r24, r24
    11dc:	a9 f3       	breq	.-22     	; 0x11c8 <AddUser_Tick+0x468>
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <AddUser_Tick+0x48c>
    11e0:	ef e4       	ldi	r30, 0x4F	; 79
    11e2:	f3 ec       	ldi	r31, 0xC3	; 195
    11e4:	31 97       	sbiw	r30, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <AddUser_Tick+0x484>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <AddUser_Tick+0x48a>
    11ea:	00 00       	nop
    11ec:	11 da       	rcall	.-3038   	; 0x610 <GetKeypadKey>
    11ee:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
    11f2:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
    11f6:	89 17       	cp	r24, r25
    11f8:	99 f3       	breq	.-26     	; 0x11e0 <AddUser_Tick+0x480>
    11fa:	cd ea       	ldi	r28, 0xAD	; 173
    11fc:	d8 e0       	ldi	r29, 0x08	; 8
    11fe:	05 ea       	ldi	r16, 0xA5	; 165
    1200:	18 e0       	ldi	r17, 0x08	; 8
				if(keypad_character == '*'){
					password_size = 0;
					for(unsigned char i = 0; i < 8; ++i){
						user_compare_password[i] = '\0';
					}
					user_compare_password[0] = '*';
    1202:	0f 2e       	mov	r0, r31
    1204:	fa e2       	ldi	r31, 0x2A	; 42
    1206:	ff 2e       	mov	r15, r31
    1208:	f0 2d       	mov	r31, r0
    120a:	7c c0       	rjmp	.+248    	; 0x1304 <AddUser_Tick+0x5a4>
		case confirmpassword:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
		
			while(keypad_character != '#'){
				if(keypad_character != '\0' && keypad_character != '*'){
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <AddUser_Tick+0x4b2>
    1210:	66 c0       	rjmp	.+204    	; 0x12de <AddUser_Tick+0x57e>
    1212:	8a 32       	cpi	r24, 0x2A	; 42
					if(password_size < 8){
    1214:	09 f4       	brne	.+2      	; 0x1218 <AddUser_Tick+0x4b8>
    1216:	37 c0       	rjmp	.+110    	; 0x1286 <AddUser_Tick+0x526>
    1218:	20 91 a4 08 	lds	r18, 0x08A4	; 0x8008a4 <password_size>
						user_compare_password[password_size] = keypad_character;
    121c:	28 30       	cpi	r18, 0x08	; 8
    121e:	08 f0       	brcs	.+2      	; 0x1222 <AddUser_Tick+0x4c2>
    1220:	5e c0       	rjmp	.+188    	; 0x12de <AddUser_Tick+0x57e>
    1222:	30 e0       	ldi	r19, 0x00	; 0
						if(password_size + 1 < 8){
    1224:	f9 01       	movw	r30, r18
    1226:	eb 55       	subi	r30, 0x5B	; 91
    1228:	f7 4f       	sbci	r31, 0xF7	; 247
							user_compare_password[password_size + 1] = '*';
    122a:	80 83       	st	Z, r24
    122c:	2f 5f       	subi	r18, 0xFF	; 255
    122e:	3f 4f       	sbci	r19, 0xFF	; 255
    1230:	28 30       	cpi	r18, 0x08	; 8
						}
						nokia_lcd_clear();
    1232:	31 05       	cpc	r19, r1
						nokia_lcd_write_string("Confirm",1);
    1234:	24 f4       	brge	.+8      	; 0x123e <AddUser_Tick+0x4de>
    1236:	f9 01       	movw	r30, r18
    1238:	eb 55       	subi	r30, 0x5B	; 91
    123a:	f7 4f       	sbci	r31, 0xF7	; 247
    123c:	f0 82       	st	Z, r15
						nokia_lcd_set_cursor(0,10);
    123e:	3c d3       	rcall	.+1656   	; 0x18b8 <nokia_lcd_clear>
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	83 e9       	ldi	r24, 0x93	; 147
    1244:	92 e0       	ldi	r25, 0x02	; 2
						nokia_lcd_write_string("Password",1);
    1246:	1e d4       	rcall	.+2108   	; 0x1a84 <nokia_lcd_write_string>
    1248:	6a e0       	ldi	r22, 0x0A	; 10
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	2d d4       	rcall	.+2138   	; 0x1aa8 <nokia_lcd_set_cursor>
						nokia_lcd_set_cursor(60,10);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	89 ec       	ldi	r24, 0xC9	; 201
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	17 d4       	rcall	.+2094   	; 0x1a84 <nokia_lcd_write_string>
						nokia_lcd_write_char(password_attempt_fails + '0',1);
    1256:	6a e0       	ldi	r22, 0x0A	; 10
    1258:	8c e3       	ldi	r24, 0x3C	; 60
    125a:	26 d4       	rcall	.+2124   	; 0x1aa8 <nokia_lcd_set_cursor>
    125c:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <password_attempt_fails>
						nokia_lcd_set_cursor(0,20);
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	80 5d       	subi	r24, 0xD0	; 208
    1264:	65 d3       	rcall	.+1738   	; 0x1930 <nokia_lcd_write_char>
    1266:	64 e1       	ldi	r22, 0x14	; 20
						nokia_lcd_write_string(user_compare_password,1);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	1e d4       	rcall	.+2108   	; 0x1aa8 <nokia_lcd_set_cursor>
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	c8 01       	movw	r24, r16
						nokia_lcd_render();
    1270:	09 d4       	rcall	.+2066   	; 0x1a84 <nokia_lcd_write_string>
    1272:	1f d4       	rcall	.+2110   	; 0x1ab2 <nokia_lcd_render>
					
						++password_size;
    1274:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <password_size>
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <password_size>
					}
				
				
				}
			
				if(keypad_character == '*'){
    127e:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
    1282:	8a 32       	cpi	r24, 0x2A	; 42
    1284:	61 f5       	brne	.+88     	; 0x12de <AddUser_Tick+0x57e>
					password_size = 0;
    1286:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <password_size>
    128a:	e5 ea       	ldi	r30, 0xA5	; 165
    128c:	f8 e0       	ldi	r31, 0x08	; 8
					for(unsigned char i = 0; i < 8; ++i){
						user_compare_password[i] = '\0';
    128e:	11 92       	st	Z+, r1
				
				}
			
				if(keypad_character == '*'){
					password_size = 0;
					for(unsigned char i = 0; i < 8; ++i){
    1290:	ec 17       	cp	r30, r28
    1292:	fd 07       	cpc	r31, r29
    1294:	e1 f7       	brne	.-8      	; 0x128e <AddUser_Tick+0x52e>
						user_compare_password[i] = '\0';
					}
					user_compare_password[0] = '*';
    1296:	f8 01       	movw	r30, r16
					nokia_lcd_clear();
    1298:	f0 82       	st	Z, r15
    129a:	0e d3       	rcall	.+1564   	; 0x18b8 <nokia_lcd_clear>
					nokia_lcd_write_string("Confirm",1);
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	83 e9       	ldi	r24, 0x93	; 147
    12a0:	92 e0       	ldi	r25, 0x02	; 2
    12a2:	f0 d3       	rcall	.+2016   	; 0x1a84 <nokia_lcd_write_string>
    12a4:	6a e0       	ldi	r22, 0x0A	; 10
					nokia_lcd_set_cursor(0,10);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	ff d3       	rcall	.+2046   	; 0x1aa8 <nokia_lcd_set_cursor>
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	8b e9       	ldi	r24, 0x9B	; 155
					nokia_lcd_write_string("Password:",1);
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	e9 d3       	rcall	.+2002   	; 0x1a84 <nokia_lcd_write_string>
    12b2:	6a e0       	ldi	r22, 0x0A	; 10
    12b4:	8c e3       	ldi	r24, 0x3C	; 60
					nokia_lcd_set_cursor(60,10);
    12b6:	f8 d3       	rcall	.+2032   	; 0x1aa8 <nokia_lcd_set_cursor>
    12b8:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <password_attempt_fails>
    12bc:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_char(password_attempt_fails + '0',1);
    12be:	80 5d       	subi	r24, 0xD0	; 208
    12c0:	37 d3       	rcall	.+1646   	; 0x1930 <nokia_lcd_write_char>
    12c2:	64 e1       	ldi	r22, 0x14	; 20
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	f0 d3       	rcall	.+2016   	; 0x1aa8 <nokia_lcd_set_cursor>
    12c8:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_set_cursor(0,20);
    12ca:	c8 01       	movw	r24, r16
    12cc:	db d3       	rcall	.+1974   	; 0x1a84 <nokia_lcd_write_string>
    12ce:	f1 d3       	rcall	.+2018   	; 0x1ab2 <nokia_lcd_render>
    12d0:	06 c0       	rjmp	.+12     	; 0x12de <AddUser_Tick+0x57e>
					nokia_lcd_write_string(user_compare_password,1);
    12d2:	8f e4       	ldi	r24, 0x4F	; 79
    12d4:	93 ec       	ldi	r25, 0xC3	; 195
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <AddUser_Tick+0x576>
					nokia_lcd_render();
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <AddUser_Tick+0x57c>
    12dc:	00 00       	nop
    12de:	98 d9       	rcall	.-3280   	; 0x610 <GetKeypadKey>
    12e0:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
    12e4:	88 23       	and	r24, r24
    12e6:	a9 f3       	breq	.-22     	; 0x12d2 <AddUser_Tick+0x572>
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <AddUser_Tick+0x596>
    12ea:	ef e4       	ldi	r30, 0x4F	; 79
				}
			
				while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
    12ec:	f3 ec       	ldi	r31, 0xC3	; 195
    12ee:	31 97       	sbiw	r30, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <AddUser_Tick+0x58e>
    12f2:	00 c0       	rjmp	.+0      	; 0x12f4 <AddUser_Tick+0x594>
    12f4:	00 00       	nop
    12f6:	8c d9       	rcall	.-3304   	; 0x610 <GetKeypadKey>
    12f8:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
    12fc:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
    1300:	89 17       	cp	r24, r25
    1302:	99 f3       	breq	.-26     	; 0x12ea <AddUser_Tick+0x58a>
    1304:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
			
				while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
    1308:	83 32       	cpi	r24, 0x23	; 35
    130a:	09 f0       	breq	.+2      	; 0x130e <AddUser_Tick+0x5ae>
    130c:	7f cf       	rjmp	.-258    	; 0x120c <AddUser_Tick+0x4ac>
    130e:	0f dd       	rcall	.-1506   	; 0xd2e <password_verification>
    1310:	81 11       	cpse	r24, r1
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <AddUser_Tick+0x5c0>
    1314:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <password_attempt_fails>
		
		case confirmpassword:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
		
			while(keypad_character != '#'){
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <password_attempt_fails>
    131e:	2a c2       	rjmp	.+1108   	; 0x1774 <AddUser_Tick+0xa14>
				while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
			
			}
		
		
			if(!password_verification()){
    1320:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <password_attempt_fails>
    1324:	e0 91 1c 0b 	lds	r30, 0x0B1C	; 0x800b1c <adduser_state>
				++password_attempt_fails;
    1328:	8e 2f       	mov	r24, r30
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	87 30       	cpi	r24, 0x07	; 7
    132e:	91 05       	cpc	r25, r1
    1330:	08 f0       	brcs	.+2      	; 0x1334 <AddUser_Tick+0x5d4>
    1332:	1c c2       	rjmp	.+1080   	; 0x176c <AddUser_Tick+0xa0c>
			}
		
			else{
				password_attempt_fails = 0;
    1334:	fc 01       	movw	r30, r24
    1336:	e2 5a       	subi	r30, 0xA2	; 162
		default:
			break;
	}
	
	//Transitions
	switch(adduser_state){
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	0c 94 45 12 	jmp	0x248a	; 0x248a <__tablejump2__>
    133e:	8f e4       	ldi	r24, 0x4F	; 79
    1340:	93 ec       	ldi	r25, 0xC3	; 195
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <AddUser_Tick+0x5e2>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <AddUser_Tick+0x5e8>
    1348:	00 00       	nop
    134a:	62 d9       	rcall	.-3388   	; 0x610 <GetKeypadKey>
    134c:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <keypad_character>
    1350:	88 23       	and	r24, r24
    1352:	a9 f3       	breq	.-22     	; 0x133e <AddUser_Tick+0x5de>
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <AddUser_Tick+0x602>
    1356:	ef e4       	ldi	r30, 0x4F	; 79
    1358:	f3 ec       	ldi	r31, 0xC3	; 195
    135a:	31 97       	sbiw	r30, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <AddUser_Tick+0x5fa>
			}
		
			break;
		
		case adduser_finished:
			while((keypad_character = GetKeypadKey()) == '\0'){ _delay_ms(200); }
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <AddUser_Tick+0x600>
    1360:	00 00       	nop
    1362:	56 d9       	rcall	.-3412   	; 0x610 <GetKeypadKey>
    1364:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <previous_character>
    1368:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <keypad_character>
    136c:	89 17       	cp	r24, r25
    136e:	99 f3       	breq	.-26     	; 0x1356 <AddUser_Tick+0x5f6>
    1370:	93 32       	cpi	r25, 0x23	; 35
    1372:	09 f0       	breq	.+2      	; 0x1376 <AddUser_Tick+0x616>
			while((previous_character = GetKeypadKey()) == keypad_character){ _delay_ms(200); }
    1374:	ff cf       	rjmp	.-2      	; 0x1374 <AddUser_Tick+0x614>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <adding_user_finished>
    137c:	e0 91 1c 0b 	lds	r30, 0x0B1C	; 0x800b1c <adduser_state>
			
			while(keypad_character != '#'){}
    1380:	8e 2f       	mov	r24, r30
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	87 30       	cpi	r24, 0x07	; 7
			
			adding_user_finished = 1;
    1386:	91 05       	cpc	r25, r1
    1388:	08 f0       	brcs	.+2      	; 0x138c <AddUser_Tick+0x62c>
    138a:	f0 c1       	rjmp	.+992    	; 0x176c <AddUser_Tick+0xa0c>
		default:
			break;
	}
	
	//Transitions
	switch(adduser_state){
    138c:	fc 01       	movw	r30, r24
    138e:	eb 59       	subi	r30, 0x9B	; 155
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	0c 94 45 12 	jmp	0x248a	; 0x248a <__tablejump2__>
    1396:	e0 91 1c 0b 	lds	r30, 0x0B1C	; 0x800b1c <adduser_state>
    139a:	8e 2f       	mov	r24, r30
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	87 30       	cpi	r24, 0x07	; 7
    13a0:	91 05       	cpc	r25, r1
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <AddUser_Tick+0x646>
    13a4:	e3 c1       	rjmp	.+966    	; 0x176c <AddUser_Tick+0xa0c>
    13a6:	fc 01       	movw	r30, r24
    13a8:	e4 59       	subi	r30, 0x94	; 148
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	0c 94 45 12 	jmp	0x248a	; 0x248a <__tablejump2__>
    13b0:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    13b4:	88 23       	and	r24, r24
    13b6:	09 f4       	brne	.+2      	; 0x13ba <AddUser_Tick+0x65a>
    13b8:	ec c1       	rjmp	.+984    	; 0x1792 <AddUser_Tick+0xa32>
    13ba:	a5 e0       	ldi	r26, 0x05	; 5
		case adduser_init:
			if(adding_user_flag){
    13bc:	b1 e0       	ldi	r27, 0x01	; 1
    13be:	e0 e0       	ldi	r30, 0x00	; 0
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	1d 92       	st	X+, r1
    13c6:	85 30       	cpi	r24, 0x05	; 5
    13c8:	08 f4       	brcc	.+2      	; 0x13cc <AddUser_Tick+0x66c>
    13ca:	10 82       	st	Z, r1
				
				for(unsigned char i = 0; i < 14; ++i){
					user_name[i] = '\0';
					if(i < 5){
    13cc:	8f 5f       	subi	r24, 0xFF	; 255
    13ce:	31 96       	adiw	r30, 0x01	; 1
						weight_output[i] = '\0';
    13d0:	8e 30       	cpi	r24, 0x0E	; 14
	//Transitions
	switch(adduser_state){
		case adduser_init:
			if(adding_user_flag){
				
				for(unsigned char i = 0; i < 14; ++i){
    13d2:	c1 f7       	brne	.-16     	; 0x13c4 <AddUser_Tick+0x664>
    13d4:	8f e5       	ldi	r24, 0x5F	; 95
    13d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <user_name>
					user_name[i] = '\0';
					if(i < 5){
						weight_output[i] = '\0';
					}
				}
				user_name[0] = '_';
    13da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    13de:	10 92 b9 08 	sts	0x08B9, r1	; 0x8008b9 <user_name_size>
				weight_output[0] = '_';
    13e2:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <user_weight>
				user_name_size = 0;
    13e6:	10 92 b7 08 	sts	0x08B7, r1	; 0x8008b7 <user_gender>
				user_weight = 0;
				user_gender = 0;
    13ea:	ee ea       	ldi	r30, 0xAE	; 174
    13ec:	f8 e0       	ldi	r31, 0x08	; 8
    13ee:	a5 ea       	ldi	r26, 0xA5	; 165
    13f0:	b8 e0       	ldi	r27, 0x08	; 8
    13f2:	86 eb       	ldi	r24, 0xB6	; 182
    13f4:	98 e0       	ldi	r25, 0x08	; 8
    13f6:	11 92       	st	Z+, r1
    13f8:	1d 92       	st	X+, r1
				
				for(unsigned char i = 0; i < 8; ++i){
					user_password[i] = '\0';
    13fa:	e8 17       	cp	r30, r24
					user_compare_password[i] = '\0';
    13fc:	f9 07       	cpc	r31, r25
				weight_output[0] = '_';
				user_name_size = 0;
				user_weight = 0;
				user_gender = 0;
				
				for(unsigned char i = 0; i < 8; ++i){
    13fe:	d9 f7       	brne	.-10     	; 0x13f6 <AddUser_Tick+0x696>
    1400:	8a e2       	ldi	r24, 0x2A	; 42
    1402:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <user_password>
					user_password[i] = '\0';
					user_compare_password[i] = '\0';
				}
				user_password[0] = '*';
    1406:	10 92 a5 08 	sts	0x08A5, r1	; 0x8008a5 <user_compare_password>
				user_compare_password[0] = '\0';
    140a:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <password_size>
				password_size = 0;
    140e:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <keypad_character>
				keypad_character = '\0';
    1412:	10 92 a2 08 	sts	0x08A2, r1	; 0x8008a2 <previous_character>
				previous_character = '\0';
    1416:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <password_attempt_fails>
				password_attempt_fails = 0;
				adding_user_finished = 0;
    141a:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <adding_user_finished>
				
				nokia_lcd_clear();
    141e:	4c d2       	rcall	.+1176   	; 0x18b8 <nokia_lcd_clear>
				nokia_lcd_write_string("Enter Name",1);
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	82 ed       	ldi	r24, 0xD2	; 210
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	2e d3       	rcall	.+1628   	; 0x1a84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0,10);
    1428:	6a e0       	ldi	r22, 0x0A	; 10
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	3d d3       	rcall	.+1658   	; 0x1aa8 <nokia_lcd_set_cursor>
				nokia_lcd_write_string(user_name,1);
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	85 e0       	ldi	r24, 0x05	; 5
    1432:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_render();
    1434:	27 d3       	rcall	.+1614   	; 0x1a84 <nokia_lcd_write_string>
    1436:	3d d3       	rcall	.+1658   	; 0x1ab2 <nokia_lcd_render>
				adduser_state = username;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
				adduser_state = adduser_init;
			}
			break;
		
		case username:
			if(keypad_character == '#' && user_name_size > 0 && adding_user_flag){
    143e:	a9 c1       	rjmp	.+850    	; 0x1792 <AddUser_Tick+0xa32>
    1440:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <keypad_character>
    1444:	83 32       	cpi	r24, 0x23	; 35
    1446:	51 f5       	brne	.+84     	; 0x149c <AddUser_Tick+0x73c>
    1448:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <user_name_size>
    144c:	88 23       	and	r24, r24
    144e:	51 f1       	breq	.+84     	; 0x14a4 <AddUser_Tick+0x744>
    1450:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <adding_user_flag>
				user_name[user_name_size] = '\0';
    1454:	99 23       	and	r25, r25
    1456:	a9 f1       	breq	.+106    	; 0x14c2 <AddUser_Tick+0x762>
    1458:	e8 2f       	mov	r30, r24
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	eb 5f       	subi	r30, 0xFB	; 251
				user_name_size = user_name_size - 1;
    145e:	fe 4f       	sbci	r31, 0xFE	; 254
    1460:	10 82       	st	Z, r1
    1462:	81 50       	subi	r24, 0x01	; 1
				user_weight = 0;
    1464:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <user_name_size>
				nokia_lcd_clear();
    1468:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <user_weight>
				nokia_lcd_write_string("Enter your",1);
    146c:	25 d2       	rcall	.+1098   	; 0x18b8 <nokia_lcd_clear>
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	83 e5       	ldi	r24, 0x53	; 83
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	07 d3       	rcall	.+1550   	; 0x1a84 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(0,10);
    1476:	6a e0       	ldi	r22, 0x0A	; 10
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	16 d3       	rcall	.+1580   	; 0x1aa8 <nokia_lcd_set_cursor>
    147c:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_write_string("weight in lbs",1);
    147e:	8e e5       	ldi	r24, 0x5E	; 94
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	00 d3       	rcall	.+1536   	; 0x1a84 <nokia_lcd_write_string>
    1484:	64 e1       	ldi	r22, 0x14	; 20
    1486:	80 e0       	ldi	r24, 0x00	; 0
				nokia_lcd_set_cursor(0,20);
    1488:	0f d3       	rcall	.+1566   	; 0x1aa8 <nokia_lcd_set_cursor>
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	8c e2       	ldi	r24, 0x2C	; 44
    148e:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_write_string("_",1);
    1490:	f9 d2       	rcall	.+1522   	; 0x1a84 <nokia_lcd_write_string>
    1492:	0f d3       	rcall	.+1566   	; 0x1ab2 <nokia_lcd_render>
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
				nokia_lcd_render();
    149a:	7b c1       	rjmp	.+758    	; 0x1792 <AddUser_Tick+0xa32>
				adduser_state = userweight;
    149c:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <user_name_size>
    14a0:	81 11       	cpse	r24, r1
			}
		
			else if(user_name_size == 0 && adding_user_flag){
    14a2:	0b c0       	rjmp	.+22     	; 0x14ba <AddUser_Tick+0x75a>
    14a4:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    14a8:	88 23       	and	r24, r24
    14aa:	59 f0       	breq	.+22     	; 0x14c2 <AddUser_Tick+0x762>
    14ac:	8c e2       	ldi	r24, 0x2C	; 44
				adduser_name_display("_");
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	98 d8       	rcall	.-3792   	; 0x5e2 <adduser_name_display>
    14b2:	81 e0       	ldi	r24, 0x01	; 1
				adduser_state = username;
    14b4:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
    14b8:	6c c1       	rjmp	.+728    	; 0x1792 <AddUser_Tick+0xa32>
    14ba:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
			}
			
			else if(!adding_user_flag){
    14be:	81 11       	cpse	r24, r1
    14c0:	68 c1       	rjmp	.+720    	; 0x1792 <AddUser_Tick+0xa32>
    14c2:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <adduser_state>
				adduser_state = adduser_init;
    14c6:	65 c1       	rjmp	.+714    	; 0x1792 <AddUser_Tick+0xa32>
    14c8:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <user_weight>
			}
		
			break;
		
		case userweight:
			if(user_weight > 90 && adding_user_flag){
    14cc:	8b 35       	cpi	r24, 0x5B	; 91
    14ce:	30 f1       	brcs	.+76     	; 0x151c <AddUser_Tick+0x7bc>
    14d0:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <adding_user_flag>
    14d4:	99 23       	and	r25, r25
    14d6:	09 f4       	brne	.+2      	; 0x14da <AddUser_Tick+0x77a>
    14d8:	58 c1       	rjmp	.+688    	; 0x178a <AddUser_Tick+0xa2a>
				user_gender = 0;
    14da:	10 92 b7 08 	sts	0x08B7, r1	; 0x8008b7 <user_gender>
				nokia_lcd_clear();
				nokia_lcd_write_string("Select Gender",1);
    14de:	ec d1       	rcall	.+984    	; 0x18b8 <nokia_lcd_clear>
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	8c e6       	ldi	r24, 0x6C	; 108
    14e4:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_set_cursor(0,10);
    14e6:	ce d2       	rcall	.+1436   	; 0x1a84 <nokia_lcd_write_string>
    14e8:	6a e0       	ldi	r22, 0x0A	; 10
    14ea:	80 e0       	ldi	r24, 0x00	; 0
				nokia_lcd_write_string("1: Male",1);
    14ec:	dd d2       	rcall	.+1466   	; 0x1aa8 <nokia_lcd_set_cursor>
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	8a e7       	ldi	r24, 0x7A	; 122
    14f2:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_set_cursor(0,20);
    14f4:	c7 d2       	rcall	.+1422   	; 0x1a84 <nokia_lcd_write_string>
    14f6:	64 e1       	ldi	r22, 0x14	; 20
    14f8:	80 e0       	ldi	r24, 0x00	; 0
				nokia_lcd_write_string("2: Female",1);
    14fa:	d6 d2       	rcall	.+1452   	; 0x1aa8 <nokia_lcd_set_cursor>
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	82 e8       	ldi	r24, 0x82	; 130
				nokia_lcd_set_cursor(0,30);
    1500:	92 e0       	ldi	r25, 0x02	; 2
    1502:	c0 d2       	rcall	.+1408   	; 0x1a84 <nokia_lcd_write_string>
    1504:	6e e1       	ldi	r22, 0x1E	; 30
    1506:	80 e0       	ldi	r24, 0x00	; 0
				nokia_lcd_write_string("_",1);
    1508:	cf d2       	rcall	.+1438   	; 0x1aa8 <nokia_lcd_set_cursor>
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	8c e2       	ldi	r24, 0x2C	; 44
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	b9 d2       	rcall	.+1394   	; 0x1a84 <nokia_lcd_write_string>
				nokia_lcd_render();
    1512:	cf d2       	rcall	.+1438   	; 0x1ab2 <nokia_lcd_render>
    1514:	83 e0       	ldi	r24, 0x03	; 3
			
				adduser_state = usergender;
    1516:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
    151a:	3b c1       	rjmp	.+630    	; 0x1792 <AddUser_Tick+0xa32>
    151c:	8a 35       	cpi	r24, 0x5A	; 90
			}
		
			else if(user_weight < 90 && adding_user_flag){
    151e:	50 f4       	brcc	.+20     	; 0x1534 <AddUser_Tick+0x7d4>
    1520:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    1524:	88 23       	and	r24, r24
    1526:	51 f0       	breq	.+20     	; 0x153c <AddUser_Tick+0x7dc>
    1528:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <user_weight>
				user_weight = 0;
    152c:	82 e0       	ldi	r24, 0x02	; 2
				adduser_state = userweight;
    152e:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
    1532:	2f c1       	rjmp	.+606    	; 0x1792 <AddUser_Tick+0xa32>
    1534:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
			}
			
			else if(!adding_user_flag){
    1538:	81 11       	cpse	r24, r1
    153a:	2b c1       	rjmp	.+598    	; 0x1792 <AddUser_Tick+0xa32>
    153c:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <adduser_state>
				adduser_state = adduser_init;
    1540:	28 c1       	rjmp	.+592    	; 0x1792 <AddUser_Tick+0xa32>
			}
		
			break;
		
		case usergender:
			if(user_gender != 0 && adding_user_flag){
    1542:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <user_gender>
    1546:	88 23       	and	r24, r24
    1548:	49 f1       	breq	.+82     	; 0x159c <AddUser_Tick+0x83c>
    154a:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
				password_size = 0;
    154e:	88 23       	and	r24, r24
    1550:	49 f1       	breq	.+82     	; 0x15a4 <AddUser_Tick+0x844>
    1552:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <password_size>
				for(unsigned char i = 0; i < 8; ++i){
					user_password[i] = '\0';
    1556:	ee ea       	ldi	r30, 0xAE	; 174
			break;
		
		case usergender:
			if(user_gender != 0 && adding_user_flag){
				password_size = 0;
				for(unsigned char i = 0; i < 8; ++i){
    1558:	f8 e0       	ldi	r31, 0x08	; 8
    155a:	86 eb       	ldi	r24, 0xB6	; 182
					user_password[i] = '\0';
				}
				user_password[0] = '*';
    155c:	98 e0       	ldi	r25, 0x08	; 8
    155e:	11 92       	st	Z+, r1
				nokia_lcd_clear();
    1560:	e8 17       	cp	r30, r24
    1562:	f9 07       	cpc	r31, r25
				nokia_lcd_write_string("Create",1);
    1564:	e1 f7       	brne	.-8      	; 0x155e <AddUser_Tick+0x7fe>
    1566:	8a e2       	ldi	r24, 0x2A	; 42
    1568:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <user_password>
				nokia_lcd_set_cursor(0,10);
    156c:	a5 d1       	rcall	.+842    	; 0x18b8 <nokia_lcd_clear>
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	8c e8       	ldi	r24, 0x8C	; 140
    1572:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_write_string("Password",1);
    1574:	87 d2       	rcall	.+1294   	; 0x1a84 <nokia_lcd_write_string>
    1576:	6a e0       	ldi	r22, 0x0A	; 10
    1578:	80 e0       	ldi	r24, 0x00	; 0
				nokia_lcd_set_cursor(0,20);
    157a:	96 d2       	rcall	.+1324   	; 0x1aa8 <nokia_lcd_set_cursor>
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	89 ec       	ldi	r24, 0xC9	; 201
    1580:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_write_string("*",1);
    1582:	80 d2       	rcall	.+1280   	; 0x1a84 <nokia_lcd_write_string>
    1584:	64 e1       	ldi	r22, 0x14	; 20
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	8f d2       	rcall	.+1310   	; 0x1aa8 <nokia_lcd_set_cursor>
    158a:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_render();
    158c:	81 e0       	ldi	r24, 0x01	; 1
			
				adduser_state = userpassword;
    158e:	92 e0       	ldi	r25, 0x02	; 2
    1590:	79 d2       	rcall	.+1266   	; 0x1a84 <nokia_lcd_write_string>
    1592:	8f d2       	rcall	.+1310   	; 0x1ab2 <nokia_lcd_render>
			}
		
			else if(user_gender == 0 && adding_user_flag){
    1594:	84 e0       	ldi	r24, 0x04	; 4
    1596:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
				adduser_state = usergender;
			}
			
			else if(!adding_user_flag){
				adduser_state = adduser_init;
    159a:	fb c0       	rjmp	.+502    	; 0x1792 <AddUser_Tick+0xa32>
    159c:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
			}
		
			break;
		
		case userpassword:
			if(password_size == 8 && adding_user_flag){
    15a0:	81 11       	cpse	r24, r1
    15a2:	f7 c0       	rjmp	.+494    	; 0x1792 <AddUser_Tick+0xa32>
    15a4:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <adduser_state>
    15a8:	f4 c0       	rjmp	.+488    	; 0x1792 <AddUser_Tick+0xa32>
				nokia_lcd_clear();
    15aa:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <password_size>
				nokia_lcd_write_string("Confirm",1);
    15ae:	88 30       	cpi	r24, 0x08	; 8
    15b0:	99 f5       	brne	.+102    	; 0x1618 <AddUser_Tick+0x8b8>
    15b2:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    15b6:	88 23       	and	r24, r24
				nokia_lcd_set_cursor(0,10);
    15b8:	99 f1       	breq	.+102    	; 0x1620 <AddUser_Tick+0x8c0>
    15ba:	7e d1       	rcall	.+764    	; 0x18b8 <nokia_lcd_clear>
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	83 e9       	ldi	r24, 0x93	; 147
				nokia_lcd_write_string("Password: ",1);
    15c0:	92 e0       	ldi	r25, 0x02	; 2
    15c2:	60 d2       	rcall	.+1216   	; 0x1a84 <nokia_lcd_write_string>
    15c4:	6a e0       	ldi	r22, 0x0A	; 10
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	6f d2       	rcall	.+1246   	; 0x1aa8 <nokia_lcd_set_cursor>
				nokia_lcd_set_cursor(60,10);
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	85 ea       	ldi	r24, 0xA5	; 165
    15ce:	92 e0       	ldi	r25, 0x02	; 2
    15d0:	59 d2       	rcall	.+1202   	; 0x1a84 <nokia_lcd_write_string>
				nokia_lcd_write_char(password_attempt_fails + '0',1);
    15d2:	6a e0       	ldi	r22, 0x0A	; 10
    15d4:	8c e3       	ldi	r24, 0x3C	; 60
    15d6:	68 d2       	rcall	.+1232   	; 0x1aa8 <nokia_lcd_set_cursor>
    15d8:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <password_attempt_fails>
    15dc:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_set_cursor(0,20);
    15de:	80 5d       	subi	r24, 0xD0	; 208
    15e0:	a7 d1       	rcall	.+846    	; 0x1930 <nokia_lcd_write_char>
    15e2:	64 e1       	ldi	r22, 0x14	; 20
				nokia_lcd_write_string("*",1);
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	60 d2       	rcall	.+1216   	; 0x1aa8 <nokia_lcd_set_cursor>
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	81 e0       	ldi	r24, 0x01	; 1
				nokia_lcd_render();
    15ec:	92 e0       	ldi	r25, 0x02	; 2
				password_size = 0;
    15ee:	4a d2       	rcall	.+1172   	; 0x1a84 <nokia_lcd_write_string>
    15f0:	60 d2       	rcall	.+1216   	; 0x1ab2 <nokia_lcd_render>
				password_attempt_fails = 0;
    15f2:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <password_size>
    15f6:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <password_attempt_fails>
				for(unsigned char i = 0; i < 8; ++i){
					user_compare_password[i] = '\0';
    15fa:	e5 ea       	ldi	r30, 0xA5	; 165
				nokia_lcd_set_cursor(0,20);
				nokia_lcd_write_string("*",1);
				nokia_lcd_render();
				password_size = 0;
				password_attempt_fails = 0;
				for(unsigned char i = 0; i < 8; ++i){
    15fc:	f8 e0       	ldi	r31, 0x08	; 8
    15fe:	8d ea       	ldi	r24, 0xAD	; 173
					user_compare_password[i] = '\0';
				}
				user_compare_password[0] = '*';
    1600:	98 e0       	ldi	r25, 0x08	; 8
    1602:	11 92       	st	Z+, r1
				adduser_state = confirmpassword;
    1604:	8e 17       	cp	r24, r30
    1606:	9f 07       	cpc	r25, r31
    1608:	e1 f7       	brne	.-8      	; 0x1602 <AddUser_Tick+0x8a2>
			}
			else if(password_size != 8 && adding_user_flag){
    160a:	8a e2       	ldi	r24, 0x2A	; 42
    160c:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <user_compare_password>
    1610:	85 e0       	ldi	r24, 0x05	; 5
			
				adduser_state = userpassword;
			}
			
			else if(!adding_user_flag){
				adduser_state = adduser_init;
    1612:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
    1616:	bd c0       	rjmp	.+378    	; 0x1792 <AddUser_Tick+0xa32>
			}
		
			break;
		
		case confirmpassword:
			if(password_attempt_fails == 0 && adding_user_flag){
    1618:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    161c:	81 11       	cpse	r24, r1
    161e:	b9 c0       	rjmp	.+370    	; 0x1792 <AddUser_Tick+0xa32>
    1620:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <adduser_state>
    1624:	b6 c0       	rjmp	.+364    	; 0x1792 <AddUser_Tick+0xa32>
    1626:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <password_attempt_fails>
				nokia_lcd_clear();
    162a:	81 11       	cpse	r24, r1
    162c:	2f c0       	rjmp	.+94     	; 0x168c <AddUser_Tick+0x92c>
				nokia_lcd_write_string(user_name,1);
    162e:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    1632:	88 23       	and	r24, r24
    1634:	09 f4       	brne	.+2      	; 0x1638 <AddUser_Tick+0x8d8>
    1636:	8e c0       	rjmp	.+284    	; 0x1754 <AddUser_Tick+0x9f4>
				nokia_lcd_set_cursor(0,10);
    1638:	3f d1       	rcall	.+638    	; 0x18b8 <nokia_lcd_clear>
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	85 e0       	ldi	r24, 0x05	; 5
    163e:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_write_string(weight_output,1);
    1640:	21 d2       	rcall	.+1090   	; 0x1a84 <nokia_lcd_write_string>
    1642:	6a e0       	ldi	r22, 0x0A	; 10
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	30 d2       	rcall	.+1120   	; 0x1aa8 <nokia_lcd_set_cursor>
    1648:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_set_cursor(20,10);
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	1a d2       	rcall	.+1076   	; 0x1a84 <nokia_lcd_write_string>
    1650:	6a e0       	ldi	r22, 0x0A	; 10
				nokia_lcd_write_string("lbs",1);
    1652:	84 e1       	ldi	r24, 0x14	; 20
    1654:	29 d2       	rcall	.+1106   	; 0x1aa8 <nokia_lcd_set_cursor>
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	88 e6       	ldi	r24, 0x68	; 104
    165a:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_set_cursor(0,20);
    165c:	13 d2       	rcall	.+1062   	; 0x1a84 <nokia_lcd_write_string>
    165e:	64 e1       	ldi	r22, 0x14	; 20
    1660:	80 e0       	ldi	r24, 0x00	; 0
				if(user_gender == 1){
    1662:	22 d2       	rcall	.+1092   	; 0x1aa8 <nokia_lcd_set_cursor>
    1664:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <user_gender>
    1668:	81 30       	cpi	r24, 0x01	; 1
					nokia_lcd_write_string("Male",1);
    166a:	29 f4       	brne	.+10     	; 0x1676 <AddUser_Tick+0x916>
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	8d e7       	ldi	r24, 0x7D	; 125
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	08 d2       	rcall	.+1040   	; 0x1a84 <nokia_lcd_write_string>
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <AddUser_Tick+0x922>
				}
			
				else if(user_gender == 2){
    1676:	82 30       	cpi	r24, 0x02	; 2
    1678:	21 f4       	brne	.+8      	; 0x1682 <AddUser_Tick+0x922>
					nokia_lcd_write_string("Female",1);
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	85 e8       	ldi	r24, 0x85	; 133
    167e:	92 e0       	ldi	r25, 0x02	; 2
    1680:	01 d2       	rcall	.+1026   	; 0x1a84 <nokia_lcd_write_string>
    1682:	17 d2       	rcall	.+1070   	; 0x1ab2 <nokia_lcd_render>
				}
			
				nokia_lcd_render();
    1684:	86 e0       	ldi	r24, 0x06	; 6
    1686:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
				adduser_state = adduser_finished;
    168a:	83 c0       	rjmp	.+262    	; 0x1792 <AddUser_Tick+0xa32>
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	89 f5       	brne	.+98     	; 0x16f2 <AddUser_Tick+0x992>
			}
		
			else if(password_attempt_fails == 3 && adding_user_flag){
    1690:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    1694:	88 23       	and	r24, r24
    1696:	09 f4       	brne	.+2      	; 0x169a <AddUser_Tick+0x93a>
    1698:	5d c0       	rjmp	.+186    	; 0x1754 <AddUser_Tick+0x9f4>
    169a:	0e d1       	rcall	.+540    	; 0x18b8 <nokia_lcd_clear>
    169c:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_clear();
    169e:	8c e8       	ldi	r24, 0x8C	; 140
    16a0:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_write_string("Create",1);
    16a2:	f0 d1       	rcall	.+992    	; 0x1a84 <nokia_lcd_write_string>
    16a4:	6a e0       	ldi	r22, 0x0A	; 10
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	ff d1       	rcall	.+1022   	; 0x1aa8 <nokia_lcd_set_cursor>
    16aa:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_set_cursor(0,10);
    16ac:	89 ec       	ldi	r24, 0xC9	; 201
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	e9 d1       	rcall	.+978    	; 0x1a84 <nokia_lcd_write_string>
    16b2:	64 e1       	ldi	r22, 0x14	; 20
				nokia_lcd_write_string("Password",1);
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	f8 d1       	rcall	.+1008   	; 0x1aa8 <nokia_lcd_set_cursor>
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_set_cursor(0,20);
    16be:	e2 d1       	rcall	.+964    	; 0x1a84 <nokia_lcd_write_string>
    16c0:	f8 d1       	rcall	.+1008   	; 0x1ab2 <nokia_lcd_render>
    16c2:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <password_attempt_fails>
				nokia_lcd_write_string("*",1);
    16c6:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <password_size>
    16ca:	ee ea       	ldi	r30, 0xAE	; 174
    16cc:	f8 e0       	ldi	r31, 0x08	; 8
    16ce:	a5 ea       	ldi	r26, 0xA5	; 165
				nokia_lcd_render();
    16d0:	b8 e0       	ldi	r27, 0x08	; 8
    16d2:	86 eb       	ldi	r24, 0xB6	; 182
				password_attempt_fails = 0;
    16d4:	98 e0       	ldi	r25, 0x08	; 8
    16d6:	11 92       	st	Z+, r1
				password_size = 0;
    16d8:	1d 92       	st	X+, r1
    16da:	e8 17       	cp	r30, r24
    16dc:	f9 07       	cpc	r31, r25
    16de:	d9 f7       	brne	.-10     	; 0x16d6 <AddUser_Tick+0x976>
    16e0:	8a e2       	ldi	r24, 0x2A	; 42
    16e2:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <user_password>
    16e6:	10 92 a5 08 	sts	0x08A5, r1	; 0x8008a5 <user_compare_password>
				for(unsigned char i = 0; i < 8; ++i){
					user_password[i] = '\0';
					user_compare_password[i] = '\0';
    16ea:	84 e0       	ldi	r24, 0x04	; 4
				nokia_lcd_set_cursor(0,20);
				nokia_lcd_write_string("*",1);
				nokia_lcd_render();
				password_attempt_fails = 0;
				password_size = 0;
				for(unsigned char i = 0; i < 8; ++i){
    16ec:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
    16f0:	50 c0       	rjmp	.+160    	; 0x1792 <AddUser_Tick+0xa32>
					user_password[i] = '\0';
					user_compare_password[i] = '\0';
				}
				user_password[0] = '*';
    16f2:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <adding_user_flag>
    16f6:	88 23       	and	r24, r24
				user_compare_password[0] = '\0';
    16f8:	69 f1       	breq	.+90     	; 0x1754 <AddUser_Tick+0x9f4>
    16fa:	de d0       	rcall	.+444    	; 0x18b8 <nokia_lcd_clear>
			
				adduser_state = userpassword;
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	83 e9       	ldi	r24, 0x93	; 147
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	c0 d1       	rcall	.+896    	; 0x1a84 <nokia_lcd_write_string>
			}
		
			else if(password_attempt_fails != 0 && password_attempt_fails != 3 && adding_user_flag){
    1704:	6a e0       	ldi	r22, 0x0A	; 10
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	cf d1       	rcall	.+926    	; 0x1aa8 <nokia_lcd_set_cursor>
    170a:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_clear();
    170c:	85 ea       	ldi	r24, 0xA5	; 165
    170e:	92 e0       	ldi	r25, 0x02	; 2
				nokia_lcd_write_string("Confirm",1);
    1710:	b9 d1       	rcall	.+882    	; 0x1a84 <nokia_lcd_write_string>
    1712:	6a e0       	ldi	r22, 0x0A	; 10
    1714:	8c e3       	ldi	r24, 0x3C	; 60
    1716:	c8 d1       	rcall	.+912    	; 0x1aa8 <nokia_lcd_set_cursor>
    1718:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <password_attempt_fails>
				nokia_lcd_set_cursor(0,10);
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	80 5d       	subi	r24, 0xD0	; 208
    1720:	07 d1       	rcall	.+526    	; 0x1930 <nokia_lcd_write_char>
				nokia_lcd_write_string("Password: ",1);
    1722:	64 e1       	ldi	r22, 0x14	; 20
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	c0 d1       	rcall	.+896    	; 0x1aa8 <nokia_lcd_set_cursor>
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	81 e0       	ldi	r24, 0x01	; 1
				nokia_lcd_set_cursor(60,10);
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	aa d1       	rcall	.+852    	; 0x1a84 <nokia_lcd_write_string>
    1730:	c0 d1       	rcall	.+896    	; 0x1ab2 <nokia_lcd_render>
    1732:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <password_size>
				nokia_lcd_write_char(password_attempt_fails + '0',1);
    1736:	e5 ea       	ldi	r30, 0xA5	; 165
    1738:	f8 e0       	ldi	r31, 0x08	; 8
    173a:	8d ea       	ldi	r24, 0xAD	; 173
    173c:	98 e0       	ldi	r25, 0x08	; 8
    173e:	11 92       	st	Z+, r1
				nokia_lcd_set_cursor(0,20);
    1740:	e8 17       	cp	r30, r24
    1742:	f9 07       	cpc	r31, r25
    1744:	e1 f7       	brne	.-8      	; 0x173e <AddUser_Tick+0x9de>
    1746:	8a e2       	ldi	r24, 0x2A	; 42
				nokia_lcd_write_string("*",1);
    1748:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <user_compare_password>
    174c:	85 e0       	ldi	r24, 0x05	; 5
    174e:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
				nokia_lcd_render();
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <AddUser_Tick+0xa32>
    1754:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <adduser_state>
				password_size = 0;
    1758:	1c c0       	rjmp	.+56     	; 0x1792 <AddUser_Tick+0xa32>
    175a:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <adding_user_finished>
    175e:	88 23       	and	r24, r24
    1760:	c1 f0       	breq	.+48     	; 0x1792 <AddUser_Tick+0xa32>
				for(unsigned char i = 0; i < 8; ++i){
					user_compare_password[i] = '\0';
    1762:	10 92 c1 08 	sts	0x08C1, r1	; 0x8008c1 <adding_user_flag>
				nokia_lcd_write_char(password_attempt_fails + '0',1);
				nokia_lcd_set_cursor(0,20);
				nokia_lcd_write_string("*",1);
				nokia_lcd_render();
				password_size = 0;
				for(unsigned char i = 0; i < 8; ++i){
    1766:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <adduser_state>
					user_compare_password[i] = '\0';
				}
				user_compare_password[0] = '*';
    176a:	13 c0       	rjmp	.+38     	; 0x1792 <AddUser_Tick+0xa32>
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <adduser_state>
				adduser_state = confirmpassword;
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <AddUser_Tick+0xa32>
    1774:	e0 91 1c 0b 	lds	r30, 0x0B1C	; 0x800b1c <adduser_state>
			}
			
			else if(!adding_user_flag){
				adduser_state = adduser_init;
    1778:	8e 2f       	mov	r24, r30
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	87 30       	cpi	r24, 0x07	; 7
		
		
			break;
		
		case adduser_finished:
			if(adding_user_finished){
    177e:	91 05       	cpc	r25, r1
    1780:	a8 f7       	brcc	.-22     	; 0x176c <AddUser_Tick+0xa0c>
    1782:	fc 01       	movw	r30, r24
    1784:	ed 58       	subi	r30, 0x8D	; 141
				adding_user_flag = 0;
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 c6       	rjmp	.+3328   	; 0x248a <__tablejump2__>
				adduser_state = adduser_init;
    178a:	8a 35       	cpi	r24, 0x5A	; 90
    178c:	08 f4       	brcc	.+2      	; 0x1790 <AddUser_Tick+0xa30>
    178e:	d6 ce       	rjmp	.-596    	; 0x153c <AddUser_Tick+0x7dc>
				adduser_state = adduser_finished;
			}
			break;
		
		default:
			adduser_state = username;
    1790:	d1 ce       	rjmp	.-606    	; 0x1534 <AddUser_Tick+0x7d4>
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
			break;
	}
}
    1796:	1f 91       	pop	r17
		default:
			break;
	}
	
	//Transitions
	switch(adduser_state){
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	08 95       	ret

0000179e <AddUserTask>:
    179e:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <adduser_state>
    17a2:	de da       	rcall	.-2628   	; 0xd60 <AddUser_Tick>
    17a4:	84 e6       	ldi	r24, 0x64	; 100
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a3 d5       	rcall	.+2886   	; 0x22f0 <vTaskDelay>
    17aa:	fb cf       	rjmp	.-10     	; 0x17a2 <AddUserTask+0x4>

000017ac <AddUserPulse>:
    17ac:	af 92       	push	r10
    17ae:	bf 92       	push	r11
				nokia_lcd_render();
			
				adduser_state = usergender;
			}
		
			else if(user_weight < 90 && adding_user_flag){
    17b0:	cf 92       	push	r12
    17b2:	df 92       	push	r13
    17b4:	ef 92       	push	r14
    17b6:	ff 92       	push	r15
		
		default:
			adduser_state = username;
			break;
	}
}
    17b8:	0f 93       	push	r16
    17ba:	a1 2c       	mov	r10, r1
    17bc:	b1 2c       	mov	r11, r1
    17be:	c1 2c       	mov	r12, r1
    17c0:	d1 2c       	mov	r13, r1
    17c2:	e1 2c       	mov	r14, r1
	}
}

void AddUserPulse(unsigned portBASE_TYPE Priority)
{
	xTaskCreate(AddUserTask, (signed portCHAR *)"AddUserTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
    17c4:	f1 2c       	mov	r15, r1
    17c6:	08 2f       	mov	r16, r24
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	45 e5       	ldi	r20, 0x55	; 85
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	60 eb       	ldi	r22, 0xB0	; 176
    17d2:	72 e0       	ldi	r23, 0x02	; 2
    17d4:	8f ec       	ldi	r24, 0xCF	; 207
    17d6:	9b e0       	ldi	r25, 0x0B	; 11
    17d8:	13 d3       	rcall	.+1574   	; 0x1e00 <xTaskGenericCreate>
}
    17da:	0f 91       	pop	r16
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	df 90       	pop	r13
    17e2:	cf 90       	pop	r12
    17e4:	bf 90       	pop	r11
    17e6:	af 90       	pop	r10
    17e8:	08 95       	ret

000017ea <main>:
	/*
	when scaling by 1: 14 chars per line, 8 pixels in height
	when scaling by 2: 8 chars per line, 14 pixels in height
	when scaling by 3: 5 chars per line, 21 pixels in height
	*/
	DDRC = 0x0F;	//Set PC7...PC3 to input, PC2...PC0 to output [0000 1111]
    17ea:	8f e0       	ldi	r24, 0x0F	; 15
    17ec:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xF0;	//Init port C to 1s							[1111 0000]
    17ee:	80 ef       	ldi	r24, 0xF0	; 240
    17f0:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;	//Set Port D to output
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//Init Port D to 0s
    17f6:	1b b8       	out	0x0b, r1	; 11
	nokia_lcd_init();
    17f8:	29 d0       	rcall	.+82     	; 0x184c <nokia_lcd_init>

    //Start Tasks  
    MainMenuPulse(1);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	78 da       	rcall	.-2832   	; 0xcee <MainMenuPulse>
	AddUserPulse(1);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	d5 df       	rcall	.-86     	; 0x17ac <AddUserPulse>
    //RunSchedular 
    vTaskStartScheduler(); 
    1802:	ff d3       	rcall	.+2046   	; 0x2002 <vTaskStartScheduler>
    1804:	80 e0       	ldi	r24, 0x00	; 0
	return 0; 
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	08 95       	ret

0000180a <write>:
    180a:	59 98       	cbi	0x0b, 1	; 11
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
    180c:	66 23       	and	r22, r22
    180e:	11 f0       	breq	.+4      	; 0x1814 <write+0xa>
    1810:	5b 9a       	sbi	0x0b, 3	; 11
    1812:	15 c0       	rjmp	.+42     	; 0x183e <write+0x34>
    1814:	5b 98       	cbi	0x0b, 3	; 11
    1816:	13 c0       	rjmp	.+38     	; 0x183e <write+0x34>
    1818:	ac 01       	movw	r20, r24
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <write+0x18>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <write+0x14>
    1826:	40 ff       	sbrs	r20, 0
    1828:	02 c0       	rjmp	.+4      	; 0x182e <write+0x24>
    182a:	5c 9a       	sbi	0x0b, 4	; 11
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <write+0x26>
    182e:	5c 98       	cbi	0x0b, 4	; 11
    1830:	5d 9a       	sbi	0x0b, 5	; 11
    1832:	5d 98       	cbi	0x0b, 5	; 11
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	31 09       	sbc	r19, r1
    1838:	78 f7       	brcc	.-34     	; 0x1818 <write+0xe>
    183a:	59 9a       	sbi	0x0b, 1	; 11
    183c:	08 95       	ret
    183e:	27 e0       	ldi	r18, 0x07	; 7
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	e9 cf       	rjmp	.-46     	; 0x1818 <write+0xe>

00001846 <write_cmd>:
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	e0 cf       	rjmp	.-64     	; 0x180a <write>
    184a:	08 95       	ret

0000184c <nokia_lcd_init>:
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	51 9a       	sbi	0x0a, 1	; 10
    1852:	52 9a       	sbi	0x0a, 2	; 10
    1854:	53 9a       	sbi	0x0a, 3	; 10
    1856:	54 9a       	sbi	0x0a, 4	; 10
    1858:	55 9a       	sbi	0x0a, 5	; 10
    185a:	5a 9a       	sbi	0x0b, 2	; 11
    185c:	59 9a       	sbi	0x0b, 1	; 11
    185e:	83 ec       	ldi	r24, 0xC3	; 195
    1860:	99 e0       	ldi	r25, 0x09	; 9
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <nokia_lcd_init+0x16>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <nokia_lcd_init+0x1c>
    1868:	00 00       	nop
    186a:	5a 98       	cbi	0x0b, 2	; 11
    186c:	8b e5       	ldi	r24, 0x5B	; 91
    186e:	94 e4       	ldi	r25, 0x44	; 68
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <nokia_lcd_init+0x24>
    1874:	00 c0       	rjmp	.+0      	; 0x1876 <nokia_lcd_init+0x2a>
    1876:	00 00       	nop
    1878:	5a 9a       	sbi	0x0b, 2	; 11
    187a:	59 98       	cbi	0x0b, 1	; 11
    187c:	81 e2       	ldi	r24, 0x21	; 33
    187e:	e3 df       	rcall	.-58     	; 0x1846 <write_cmd>
    1880:	83 e1       	ldi	r24, 0x13	; 19
    1882:	e1 df       	rcall	.-62     	; 0x1846 <write_cmd>
    1884:	86 e0       	ldi	r24, 0x06	; 6
    1886:	df df       	rcall	.-66     	; 0x1846 <write_cmd>
    1888:	82 ec       	ldi	r24, 0xC2	; 194
    188a:	dd df       	rcall	.-70     	; 0x1846 <write_cmd>
    188c:	80 e2       	ldi	r24, 0x20	; 32
    188e:	db df       	rcall	.-74     	; 0x1846 <write_cmd>
    1890:	89 e0       	ldi	r24, 0x09	; 9
    1892:	d9 df       	rcall	.-78     	; 0x1846 <write_cmd>
    1894:	80 e8       	ldi	r24, 0x80	; 128
    1896:	d7 df       	rcall	.-82     	; 0x1846 <write_cmd>
    1898:	80 e4       	ldi	r24, 0x40	; 64
    189a:	d5 df       	rcall	.-86     	; 0x1846 <write_cmd>
    189c:	c8 ef       	ldi	r28, 0xF8	; 248
    189e:	d1 e0       	ldi	r29, 0x01	; 1
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	b2 df       	rcall	.-156    	; 0x180a <write>
    18a6:	21 97       	sbiw	r28, 0x01	; 1
    18a8:	d9 f7       	brne	.-10     	; 0x18a0 <nokia_lcd_init+0x54>
    18aa:	88 e0       	ldi	r24, 0x08	; 8
    18ac:	cc df       	rcall	.-104    	; 0x1846 <write_cmd>
    18ae:	8c e0       	ldi	r24, 0x0C	; 12
    18b0:	ca df       	rcall	.-108    	; 0x1846 <write_cmd>
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <nokia_lcd_clear>:
    18b8:	80 e8       	ldi	r24, 0x80	; 128
    18ba:	c5 df       	rcall	.-118    	; 0x1846 <write_cmd>
    18bc:	80 e4       	ldi	r24, 0x40	; 64
    18be:	c3 df       	rcall	.-122    	; 0x1846 <write_cmd>
    18c0:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <nokia_lcd+0x1f8>
    18c4:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <nokia_lcd+0x1f9>
    18c8:	e7 ec       	ldi	r30, 0xC7	; 199
    18ca:	f8 e0       	ldi	r31, 0x08	; 8
    18cc:	8f eb       	ldi	r24, 0xBF	; 191
    18ce:	9a e0       	ldi	r25, 0x0A	; 10
    18d0:	11 92       	st	Z+, r1
    18d2:	e8 17       	cp	r30, r24
    18d4:	f9 07       	cpc	r31, r25
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <nokia_lcd_clear+0x18>
    18d8:	08 95       	ret

000018da <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    18da:	26 2f       	mov	r18, r22
    18dc:	26 95       	lsr	r18
    18de:	26 95       	lsr	r18
    18e0:	26 95       	lsr	r18
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	34 e5       	ldi	r19, 0x54	; 84
    18e6:	23 9f       	mul	r18, r19
    18e8:	80 0d       	add	r24, r0
    18ea:	91 1d       	adc	r25, r1
    18ec:	11 24       	eor	r1, r1
	if (value)
    18ee:	44 23       	and	r20, r20
    18f0:	79 f0       	breq	.+30     	; 0x1910 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
    18f2:	fc 01       	movw	r30, r24
    18f4:	e9 53       	subi	r30, 0x39	; 57
    18f6:	f7 4f       	sbci	r31, 0xF7	; 247
    18f8:	67 70       	andi	r22, 0x07	; 7
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <nokia_lcd_set_pixel+0x2a>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	6a 95       	dec	r22
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <nokia_lcd_set_pixel+0x26>
    1908:	90 81       	ld	r25, Z
    190a:	89 2b       	or	r24, r25
    190c:	80 83       	st	Z, r24
    190e:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
    1910:	fc 01       	movw	r30, r24
    1912:	e9 53       	subi	r30, 0x39	; 57
    1914:	f7 4f       	sbci	r31, 0xF7	; 247
    1916:	67 70       	andi	r22, 0x07	; 7
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <nokia_lcd_set_pixel+0x48>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	6a 95       	dec	r22
    1924:	e2 f7       	brpl	.-8      	; 0x191e <nokia_lcd_set_pixel+0x44>
    1926:	80 95       	com	r24
    1928:	90 81       	ld	r25, Z
    192a:	89 23       	and	r24, r25
    192c:	80 83       	st	Z, r24
    192e:	08 95       	ret

00001930 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1930:	5f 92       	push	r5
    1932:	6f 92       	push	r6
    1934:	7f 92       	push	r7
    1936:	8f 92       	push	r8
    1938:	9f 92       	push	r9
    193a:	af 92       	push	r10
    193c:	bf 92       	push	r11
    193e:	cf 92       	push	r12
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1950:	26 2f       	mov	r18, r22
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	49 01       	movw	r8, r18
    1956:	88 0c       	add	r8, r8
    1958:	99 1c       	adc	r9, r9
    195a:	88 0c       	add	r8, r8
    195c:	99 1c       	adc	r9, r9
    195e:	82 0e       	add	r8, r18
    1960:	93 1e       	adc	r9, r19
    1962:	18 14       	cp	r1, r8
    1964:	19 04       	cpc	r1, r9
    1966:	0c f0       	brlt	.+2      	; 0x196a <nokia_lcd_write_char+0x3a>
    1968:	59 c0       	rjmp	.+178    	; 0x1a1c <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    196a:	89 01       	movw	r16, r18
    196c:	00 0f       	add	r16, r16
    196e:	11 1f       	adc	r17, r17
    1970:	00 0f       	add	r16, r16
    1972:	11 1f       	adc	r17, r17
    1974:	00 0f       	add	r16, r16
    1976:	11 1f       	adc	r17, r17
    1978:	02 1b       	sub	r16, r18
    197a:	13 0b       	sbc	r17, r19
    197c:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    197e:	a8 2e       	mov	r10, r24
    1980:	b1 2c       	mov	r11, r1
    1982:	c5 01       	movw	r24, r10
    1984:	80 97       	sbiw	r24, 0x20	; 32
    1986:	5c 01       	movw	r10, r24
    1988:	aa 0c       	add	r10, r10
    198a:	bb 1c       	adc	r11, r11
    198c:	aa 0c       	add	r10, r10
    198e:	bb 1c       	adc	r11, r11
    1990:	a8 0e       	add	r10, r24
    1992:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1994:	0f 2e       	mov	r0, r31
    1996:	f0 ec       	ldi	r31, 0xC0	; 192
    1998:	cf 2e       	mov	r12, r31
    199a:	fa e0       	ldi	r31, 0x0A	; 10
    199c:	df 2e       	mov	r13, r31
    199e:	f0 2d       	mov	r31, r0
    19a0:	0f 2e       	mov	r0, r31
    19a2:	ff eb       	ldi	r31, 0xBF	; 191
    19a4:	ef 2e       	mov	r14, r31
    19a6:	fa e0       	ldi	r31, 0x0A	; 10
    19a8:	ff 2e       	mov	r15, r31
    19aa:	f0 2d       	mov	r31, r0
    19ac:	2a c0       	rjmp	.+84     	; 0x1a02 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    19ae:	fe 01       	movw	r30, r28
    19b0:	24 91       	lpm	r18, Z
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	87 2d       	mov	r24, r7
    19b6:	65 2d       	mov	r22, r5
    19b8:	5c d5       	rcall	.+2744   	; 0x2472 <__udivmodqi4>
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <nokia_lcd_write_char+0x90>
    19bc:	35 95       	asr	r19
    19be:	27 95       	ror	r18
    19c0:	8a 95       	dec	r24
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <nokia_lcd_write_char+0x8c>
    19c4:	20 ff       	sbrs	r18, 0
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    19c8:	f6 01       	movw	r30, r12
    19ca:	60 81       	ld	r22, Z
    19cc:	67 0d       	add	r22, r7
    19ce:	f7 01       	movw	r30, r14
    19d0:	80 81       	ld	r24, Z
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	86 0d       	add	r24, r6
    19d6:	81 df       	rcall	.-254    	; 0x18da <nokia_lcd_set_pixel>
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    19da:	f6 01       	movw	r30, r12
    19dc:	60 81       	ld	r22, Z
    19de:	67 0d       	add	r22, r7
    19e0:	f7 01       	movw	r30, r14
    19e2:	80 81       	ld	r24, Z
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	86 0d       	add	r24, r6
    19e8:	78 df       	rcall	.-272    	; 0x18da <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    19ea:	73 94       	inc	r7
    19ec:	87 2d       	mov	r24, r7
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	80 17       	cp	r24, r16
    19f2:	91 07       	cpc	r25, r17
    19f4:	e4 f2       	brlt	.-72     	; 0x19ae <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    19f6:	63 94       	inc	r6
    19f8:	86 2d       	mov	r24, r6
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	88 15       	cp	r24, r8
    19fe:	99 05       	cpc	r25, r9
    1a00:	6c f4       	brge	.+26     	; 0x1a1c <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    1a02:	10 16       	cp	r1, r16
    1a04:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1a06:	bc f7       	brge	.-18     	; 0x19f6 <nokia_lcd_write_char+0xc6>
    1a08:	86 2d       	mov	r24, r6
    1a0a:	65 2d       	mov	r22, r5
    1a0c:	32 d5       	rcall	.+2660   	; 0x2472 <__udivmodqi4>
    1a0e:	e5 01       	movw	r28, r10
    1a10:	c8 0f       	add	r28, r24
    1a12:	d1 1d       	adc	r29, r1
    1a14:	cc 50       	subi	r28, 0x0C	; 12
    1a16:	df 4f       	sbci	r29, 0xFF	; 255
    1a18:	71 2c       	mov	r7, r1
    1a1a:	c9 cf       	rjmp	.-110    	; 0x19ae <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1a1c:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <nokia_lcd+0x1f8>
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	98 0f       	add	r25, r24
    1a24:	85 2d       	mov	r24, r5
    1a26:	88 0f       	add	r24, r24
    1a28:	88 0f       	add	r24, r24
    1a2a:	85 0d       	add	r24, r5
    1a2c:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
    1a2e:	84 35       	cpi	r24, 0x54	; 84
    1a30:	18 f4       	brcc	.+6      	; 0x1a38 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1a32:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <nokia_lcd+0x1f8>
    1a36:	0e c0       	rjmp	.+28     	; 0x1a54 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
    1a38:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1a3c:	e0 ec       	ldi	r30, 0xC0	; 192
    1a3e:	fa e0       	ldi	r31, 0x0A	; 10
    1a40:	80 81       	ld	r24, Z
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	98 0f       	add	r25, r24
    1a46:	85 2d       	mov	r24, r5
    1a48:	88 0f       	add	r24, r24
    1a4a:	88 0f       	add	r24, r24
    1a4c:	88 0f       	add	r24, r24
    1a4e:	85 19       	sub	r24, r5
    1a50:	89 0f       	add	r24, r25
    1a52:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    1a54:	80 91 c0 0a 	lds	r24, 0x0AC0	; 0x800ac0 <nokia_lcd+0x1f9>
    1a58:	80 33       	cpi	r24, 0x30	; 48
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
    1a5c:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1a60:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <nokia_lcd+0x1f9>
	}
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	cf 90       	pop	r12
    1a74:	bf 90       	pop	r11
    1a76:	af 90       	pop	r10
    1a78:	9f 90       	pop	r9
    1a7a:	8f 90       	pop	r8
    1a7c:	7f 90       	pop	r7
    1a7e:	6f 90       	pop	r6
    1a80:	5f 90       	pop	r5
    1a82:	08 95       	ret

00001a84 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	ec 01       	movw	r28, r24
	while(*str)
    1a8c:	88 81       	ld	r24, Y
    1a8e:	88 23       	and	r24, r24
    1a90:	39 f0       	breq	.+14     	; 0x1aa0 <nokia_lcd_write_string+0x1c>
    1a92:	16 2f       	mov	r17, r22
    1a94:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
    1a96:	61 2f       	mov	r22, r17
    1a98:	4b df       	rcall	.-362    	; 0x1930 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1a9a:	89 91       	ld	r24, Y+
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	fb cf       	rjmp	.-10     	; 0x1a96 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	08 95       	ret

00001aa8 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    1aa8:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1aac:	60 93 c0 0a 	sts	0x0AC0, r22	; 0x800ac0 <nokia_lcd+0x1f9>
    1ab0:	08 95       	ret

00001ab2 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1aba:	80 e8       	ldi	r24, 0x80	; 128
    1abc:	c4 de       	rcall	.-632    	; 0x1846 <write_cmd>
	write_cmd(0x40);
    1abe:	80 e4       	ldi	r24, 0x40	; 64
    1ac0:	c2 de       	rcall	.-636    	; 0x1846 <write_cmd>
    1ac2:	c7 ec       	ldi	r28, 0xC7	; 199
    1ac4:	d8 e0       	ldi	r29, 0x08	; 8
    1ac6:	0f eb       	ldi	r16, 0xBF	; 191
    1ac8:	1a e0       	ldi	r17, 0x0A	; 10
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	89 91       	ld	r24, Y+
    1ace:	9d de       	rcall	.-710    	; 0x180a <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1ad0:	c0 17       	cp	r28, r16
    1ad2:	d1 07       	cpc	r29, r17
    1ad4:	d1 f7       	brne	.-12     	; 0x1aca <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1ae0:	31 e1       	ldi	r19, 0x11	; 17
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	30 83       	st	Z, r19
    1ae6:	31 97       	sbiw	r30, 0x01	; 1
    1ae8:	22 e2       	ldi	r18, 0x22	; 34
    1aea:	20 83       	st	Z, r18
    1aec:	31 97       	sbiw	r30, 0x01	; 1
    1aee:	a3 e3       	ldi	r26, 0x33	; 51
    1af0:	a0 83       	st	Z, r26
    1af2:	31 97       	sbiw	r30, 0x01	; 1
    1af4:	60 83       	st	Z, r22
    1af6:	31 97       	sbiw	r30, 0x01	; 1
    1af8:	70 83       	st	Z, r23
    1afa:	31 97       	sbiw	r30, 0x01	; 1
    1afc:	10 82       	st	Z, r1
    1afe:	31 97       	sbiw	r30, 0x01	; 1
    1b00:	60 e8       	ldi	r22, 0x80	; 128
    1b02:	60 83       	st	Z, r22
    1b04:	31 97       	sbiw	r30, 0x01	; 1
    1b06:	10 82       	st	Z, r1
    1b08:	31 97       	sbiw	r30, 0x01	; 1
    1b0a:	62 e0       	ldi	r22, 0x02	; 2
    1b0c:	60 83       	st	Z, r22
    1b0e:	31 97       	sbiw	r30, 0x01	; 1
    1b10:	63 e0       	ldi	r22, 0x03	; 3
    1b12:	60 83       	st	Z, r22
    1b14:	31 97       	sbiw	r30, 0x01	; 1
    1b16:	64 e0       	ldi	r22, 0x04	; 4
    1b18:	60 83       	st	Z, r22
    1b1a:	31 97       	sbiw	r30, 0x01	; 1
    1b1c:	65 e0       	ldi	r22, 0x05	; 5
    1b1e:	60 83       	st	Z, r22
    1b20:	31 97       	sbiw	r30, 0x01	; 1
    1b22:	66 e0       	ldi	r22, 0x06	; 6
    1b24:	60 83       	st	Z, r22
    1b26:	31 97       	sbiw	r30, 0x01	; 1
    1b28:	67 e0       	ldi	r22, 0x07	; 7
    1b2a:	60 83       	st	Z, r22
    1b2c:	31 97       	sbiw	r30, 0x01	; 1
    1b2e:	68 e0       	ldi	r22, 0x08	; 8
    1b30:	60 83       	st	Z, r22
    1b32:	31 97       	sbiw	r30, 0x01	; 1
    1b34:	69 e0       	ldi	r22, 0x09	; 9
    1b36:	60 83       	st	Z, r22
    1b38:	31 97       	sbiw	r30, 0x01	; 1
    1b3a:	60 e1       	ldi	r22, 0x10	; 16
    1b3c:	60 83       	st	Z, r22
    1b3e:	31 97       	sbiw	r30, 0x01	; 1
    1b40:	30 83       	st	Z, r19
    1b42:	31 97       	sbiw	r30, 0x01	; 1
    1b44:	32 e1       	ldi	r19, 0x12	; 18
    1b46:	30 83       	st	Z, r19
    1b48:	31 97       	sbiw	r30, 0x01	; 1
    1b4a:	33 e1       	ldi	r19, 0x13	; 19
    1b4c:	30 83       	st	Z, r19
    1b4e:	31 97       	sbiw	r30, 0x01	; 1
    1b50:	34 e1       	ldi	r19, 0x14	; 20
    1b52:	30 83       	st	Z, r19
    1b54:	31 97       	sbiw	r30, 0x01	; 1
    1b56:	35 e1       	ldi	r19, 0x15	; 21
    1b58:	30 83       	st	Z, r19
    1b5a:	31 97       	sbiw	r30, 0x01	; 1
    1b5c:	36 e1       	ldi	r19, 0x16	; 22
    1b5e:	30 83       	st	Z, r19
    1b60:	31 97       	sbiw	r30, 0x01	; 1
    1b62:	37 e1       	ldi	r19, 0x17	; 23
    1b64:	30 83       	st	Z, r19
    1b66:	31 97       	sbiw	r30, 0x01	; 1
    1b68:	38 e1       	ldi	r19, 0x18	; 24
    1b6a:	30 83       	st	Z, r19
    1b6c:	31 97       	sbiw	r30, 0x01	; 1
    1b6e:	39 e1       	ldi	r19, 0x19	; 25
    1b70:	30 83       	st	Z, r19
    1b72:	31 97       	sbiw	r30, 0x01	; 1
    1b74:	30 e2       	ldi	r19, 0x20	; 32
    1b76:	30 83       	st	Z, r19
    1b78:	31 97       	sbiw	r30, 0x01	; 1
    1b7a:	31 e2       	ldi	r19, 0x21	; 33
    1b7c:	30 83       	st	Z, r19
    1b7e:	31 97       	sbiw	r30, 0x01	; 1
    1b80:	20 83       	st	Z, r18
    1b82:	31 97       	sbiw	r30, 0x01	; 1
    1b84:	23 e2       	ldi	r18, 0x23	; 35
    1b86:	20 83       	st	Z, r18
    1b88:	31 97       	sbiw	r30, 0x01	; 1
    1b8a:	40 83       	st	Z, r20
    1b8c:	31 97       	sbiw	r30, 0x01	; 1
    1b8e:	50 83       	st	Z, r21
    1b90:	31 97       	sbiw	r30, 0x01	; 1
    1b92:	26 e2       	ldi	r18, 0x26	; 38
    1b94:	20 83       	st	Z, r18
    1b96:	31 97       	sbiw	r30, 0x01	; 1
    1b98:	27 e2       	ldi	r18, 0x27	; 39
    1b9a:	20 83       	st	Z, r18
    1b9c:	31 97       	sbiw	r30, 0x01	; 1
    1b9e:	28 e2       	ldi	r18, 0x28	; 40
    1ba0:	20 83       	st	Z, r18
    1ba2:	31 97       	sbiw	r30, 0x01	; 1
    1ba4:	29 e2       	ldi	r18, 0x29	; 41
    1ba6:	20 83       	st	Z, r18
    1ba8:	31 97       	sbiw	r30, 0x01	; 1
    1baa:	20 e3       	ldi	r18, 0x30	; 48
    1bac:	20 83       	st	Z, r18
    1bae:	31 97       	sbiw	r30, 0x01	; 1
    1bb0:	21 e3       	ldi	r18, 0x31	; 49
    1bb2:	20 83       	st	Z, r18
    1bb4:	86 97       	sbiw	r24, 0x26	; 38
    1bb6:	08 95       	ret

00001bb8 <xPortStartScheduler>:
    1bb8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1bbc:	8c e7       	ldi	r24, 0x7C	; 124
    1bbe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1bc2:	8b e0       	ldi	r24, 0x0B	; 11
    1bc4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1bc8:	ef e6       	ldi	r30, 0x6F	; 111
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	82 60       	ori	r24, 0x02	; 2
    1bd0:	80 83       	st	Z, r24
    1bd2:	a0 91 19 0b 	lds	r26, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1bd6:	b0 91 1a 0b 	lds	r27, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1bda:	cd 91       	ld	r28, X+
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	dd 91       	ld	r29, X+
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	bf 91       	pop	r27
    1bec:	af 91       	pop	r26
    1bee:	9f 91       	pop	r25
    1bf0:	8f 91       	pop	r24
    1bf2:	7f 91       	pop	r23
    1bf4:	6f 91       	pop	r22
    1bf6:	5f 91       	pop	r21
    1bf8:	4f 91       	pop	r20
    1bfa:	3f 91       	pop	r19
    1bfc:	2f 91       	pop	r18
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	df 90       	pop	r13
    1c08:	cf 90       	pop	r12
    1c0a:	bf 90       	pop	r11
    1c0c:	af 90       	pop	r10
    1c0e:	9f 90       	pop	r9
    1c10:	8f 90       	pop	r8
    1c12:	7f 90       	pop	r7
    1c14:	6f 90       	pop	r6
    1c16:	5f 90       	pop	r5
    1c18:	4f 90       	pop	r4
    1c1a:	3f 90       	pop	r3
    1c1c:	2f 90       	pop	r2
    1c1e:	1f 90       	pop	r1
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	08 95       	ret
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	08 95       	ret

00001c2c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	0f 92       	push	r0
    1c34:	1f 92       	push	r1
    1c36:	11 24       	eor	r1, r1
    1c38:	2f 92       	push	r2
    1c3a:	3f 92       	push	r3
    1c3c:	4f 92       	push	r4
    1c3e:	5f 92       	push	r5
    1c40:	6f 92       	push	r6
    1c42:	7f 92       	push	r7
    1c44:	8f 92       	push	r8
    1c46:	9f 92       	push	r9
    1c48:	af 92       	push	r10
    1c4a:	bf 92       	push	r11
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	2f 93       	push	r18
    1c5a:	3f 93       	push	r19
    1c5c:	4f 93       	push	r20
    1c5e:	5f 93       	push	r21
    1c60:	6f 93       	push	r22
    1c62:	7f 93       	push	r23
    1c64:	8f 93       	push	r24
    1c66:	9f 93       	push	r25
    1c68:	af 93       	push	r26
    1c6a:	bf 93       	push	r27
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
    1c74:	a0 91 19 0b 	lds	r26, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1c78:	b0 91 1a 0b 	lds	r27, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1c7c:	0d b6       	in	r0, 0x3d	; 61
    1c7e:	0d 92       	st	X+, r0
    1c80:	0e b6       	in	r0, 0x3e	; 62
    1c82:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1c84:	8a d3       	rcall	.+1812   	; 0x239a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1c86:	a0 91 19 0b 	lds	r26, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1c8a:	b0 91 1a 0b 	lds	r27, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1c8e:	cd 91       	ld	r28, X+
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	dd 91       	ld	r29, X+
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	ff 91       	pop	r31
    1c98:	ef 91       	pop	r30
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	bf 91       	pop	r27
    1ca0:	af 91       	pop	r26
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	7f 91       	pop	r23
    1ca8:	6f 91       	pop	r22
    1caa:	5f 91       	pop	r21
    1cac:	4f 91       	pop	r20
    1cae:	3f 91       	pop	r19
    1cb0:	2f 91       	pop	r18
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	bf 90       	pop	r11
    1cc0:	af 90       	pop	r10
    1cc2:	9f 90       	pop	r9
    1cc4:	8f 90       	pop	r8
    1cc6:	7f 90       	pop	r7
    1cc8:	6f 90       	pop	r6
    1cca:	5f 90       	pop	r5
    1ccc:	4f 90       	pop	r4
    1cce:	3f 90       	pop	r3
    1cd0:	2f 90       	pop	r2
    1cd2:	1f 90       	pop	r1
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1cda:	08 95       	ret

00001cdc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	0f 92       	push	r0
    1ce4:	1f 92       	push	r1
    1ce6:	11 24       	eor	r1, r1
    1ce8:	2f 92       	push	r2
    1cea:	3f 92       	push	r3
    1cec:	4f 92       	push	r4
    1cee:	5f 92       	push	r5
    1cf0:	6f 92       	push	r6
    1cf2:	7f 92       	push	r7
    1cf4:	8f 92       	push	r8
    1cf6:	9f 92       	push	r9
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	2f 93       	push	r18
    1d0a:	3f 93       	push	r19
    1d0c:	4f 93       	push	r20
    1d0e:	5f 93       	push	r21
    1d10:	6f 93       	push	r22
    1d12:	7f 93       	push	r23
    1d14:	8f 93       	push	r24
    1d16:	9f 93       	push	r25
    1d18:	af 93       	push	r26
    1d1a:	bf 93       	push	r27
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	ef 93       	push	r30
    1d22:	ff 93       	push	r31
    1d24:	a0 91 19 0b 	lds	r26, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1d28:	b0 91 1a 0b 	lds	r27, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1d2c:	0d b6       	in	r0, 0x3d	; 61
    1d2e:	0d 92       	st	X+, r0
    1d30:	0e b6       	in	r0, 0x3e	; 62
    1d32:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1d34:	95 d1       	rcall	.+810    	; 0x2060 <vTaskIncrementTick>
	vTaskSwitchContext();
    1d36:	31 d3       	rcall	.+1634   	; 0x239a <vTaskSwitchContext>
    1d38:	a0 91 19 0b 	lds	r26, 0x0B19	; 0x800b19 <pxCurrentTCB>
	portRESTORE_CONTEXT();
    1d3c:	b0 91 1a 0b 	lds	r27, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1d40:	cd 91       	ld	r28, X+
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	dd 91       	ld	r29, X+
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	ff 91       	pop	r31
    1d4a:	ef 91       	pop	r30
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	7f 90       	pop	r7
    1d7a:	6f 90       	pop	r6
    1d7c:	5f 90       	pop	r5
    1d7e:	4f 90       	pop	r4
    1d80:	3f 90       	pop	r3
    1d82:	2f 90       	pop	r2
    1d84:	1f 90       	pop	r1
    1d86:	0f 90       	pop	r0
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	0f 90       	pop	r0
    1d8c:	08 95       	ret

00001d8e <__vector_13>:

	asm volatile ( "ret" );
    1d8e:	a6 df       	rcall	.-180    	; 0x1cdc <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1d90:	18 95       	reti

00001d92 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	ec 01       	movw	r28, r24
    1d98:	e0 91 19 0b 	lds	r30, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1d9c:	f0 91 1a 0b 	lds	r31, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1da0:	93 83       	std	Z+3, r25	; 0x03
    1da2:	82 83       	std	Z+2, r24	; 0x02
    1da4:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <xTickCount>
    1da8:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <xTickCount+0x1>
    1dac:	c8 17       	cp	r28, r24
    1dae:	d9 07       	cpc	r29, r25
    1db0:	68 f4       	brcc	.+26     	; 0x1dcc <prvAddCurrentTaskToDelayedList+0x3a>
    1db2:	60 91 19 0b 	lds	r22, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1db6:	70 91 1a 0b 	lds	r23, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1dba:	80 91 df 0a 	lds	r24, 0x0ADF	; 0x800adf <pxOverflowDelayedTaskList>
    1dbe:	90 91 e0 0a 	lds	r25, 0x0AE0	; 0x800ae0 <pxOverflowDelayedTaskList+0x1>
    1dc2:	6e 5f       	subi	r22, 0xFE	; 254
    1dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <vListInsert>
    1dca:	17 c0       	rjmp	.+46     	; 0x1dfa <prvAddCurrentTaskToDelayedList+0x68>
    1dcc:	60 91 19 0b 	lds	r22, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1dd0:	70 91 1a 0b 	lds	r23, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1dd4:	80 91 e1 0a 	lds	r24, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    1dd8:	90 91 e2 0a 	lds	r25, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    1ddc:	6e 5f       	subi	r22, 0xFE	; 254
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <vListInsert>
    1de4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <xNextTaskUnblockTime>
    1de8:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <xNextTaskUnblockTime+0x1>
    1dec:	c8 17       	cp	r28, r24
    1dee:	d9 07       	cpc	r29, r25
    1df0:	20 f4       	brcc	.+8      	; 0x1dfa <prvAddCurrentTaskToDelayedList+0x68>
    1df2:	d0 93 44 01 	sts	0x0144, r29	; 0x800144 <xNextTaskUnblockTime+0x1>
    1df6:	c0 93 43 01 	sts	0x0143, r28	; 0x800143 <xNextTaskUnblockTime>
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <xTaskGenericCreate>:
    1e00:	4f 92       	push	r4
    1e02:	5f 92       	push	r5
    1e04:	6f 92       	push	r6
    1e06:	7f 92       	push	r7
    1e08:	8f 92       	push	r8
    1e0a:	9f 92       	push	r9
    1e0c:	af 92       	push	r10
    1e0e:	bf 92       	push	r11
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	5c 01       	movw	r10, r24
    1e22:	4b 01       	movw	r8, r22
    1e24:	3a 01       	movw	r6, r20
    1e26:	29 01       	movw	r4, r18
    1e28:	81 e2       	ldi	r24, 0x21	; 33
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 8a 01 	call	0x314	; 0x314 <pvPortMalloc>
    1e30:	ec 01       	movw	r28, r24
    1e32:	89 2b       	or	r24, r25
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <xTaskGenericCreate+0x38>
    1e36:	d3 c0       	rjmp	.+422    	; 0x1fde <xTaskGenericCreate+0x1de>
    1e38:	c1 14       	cp	r12, r1
    1e3a:	d1 04       	cpc	r13, r1
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <xTaskGenericCreate+0x40>
    1e3e:	cb c0       	rjmp	.+406    	; 0x1fd6 <xTaskGenericCreate+0x1d6>
    1e40:	c3 01       	movw	r24, r6
    1e42:	0e 94 8a 01 	call	0x314	; 0x314 <pvPortMalloc>
    1e46:	98 8f       	std	Y+24, r25	; 0x18
    1e48:	8f 8b       	std	Y+23, r24	; 0x17
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	21 f4       	brne	.+8      	; 0x1e56 <xTaskGenericCreate+0x56>
    1e4e:	ce 01       	movw	r24, r28
    1e50:	0e 94 b0 01 	call	0x360	; 0x360 <vPortFree>
    1e54:	c4 c0       	rjmp	.+392    	; 0x1fde <xTaskGenericCreate+0x1de>
    1e56:	a3 01       	movw	r20, r6
    1e58:	65 ea       	ldi	r22, 0xA5	; 165
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	1f d3       	rcall	.+1598   	; 0x249c <memset>
    1e5e:	93 01       	movw	r18, r6
    1e60:	21 50       	subi	r18, 0x01	; 1
    1e62:	31 09       	sbc	r19, r1
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	98 8d       	ldd	r25, Y+24	; 0x18
    1e68:	3c 01       	movw	r6, r24
    1e6a:	62 0e       	add	r6, r18
    1e6c:	73 1e       	adc	r7, r19
    1e6e:	48 e0       	ldi	r20, 0x08	; 8
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	b4 01       	movw	r22, r8
    1e74:	ce 01       	movw	r24, r28
    1e76:	49 96       	adiw	r24, 0x19	; 25
    1e78:	18 d3       	rcall	.+1584   	; 0x24aa <strncpy>
    1e7a:	18 a2       	std	Y+32, r1	; 0x20
    1e7c:	10 2f       	mov	r17, r16
    1e7e:	04 30       	cpi	r16, 0x04	; 4
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <xTaskGenericCreate+0x84>
    1e82:	13 e0       	ldi	r17, 0x03	; 3
    1e84:	1e 8b       	std	Y+22, r17	; 0x16
    1e86:	6e 01       	movw	r12, r28
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	c8 0e       	add	r12, r24
    1e8c:	d1 1c       	adc	r13, r1
    1e8e:	c6 01       	movw	r24, r12
    1e90:	0e 94 bf 01 	call	0x37e	; 0x37e <vListInitialiseItem>
    1e94:	ce 01       	movw	r24, r28
    1e96:	0c 96       	adiw	r24, 0x0c	; 12
    1e98:	0e 94 bf 01 	call	0x37e	; 0x37e <vListInitialiseItem>
    1e9c:	d9 87       	std	Y+9, r29	; 0x09
    1e9e:	c8 87       	std	Y+8, r28	; 0x08
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	81 1b       	sub	r24, r17
    1ea6:	91 09       	sbc	r25, r1
    1ea8:	9d 87       	std	Y+13, r25	; 0x0d
    1eaa:	8c 87       	std	Y+12, r24	; 0x0c
    1eac:	db 8b       	std	Y+19, r29	; 0x13
    1eae:	ca 8b       	std	Y+18, r28	; 0x12
    1eb0:	a2 01       	movw	r20, r4
    1eb2:	b5 01       	movw	r22, r10
    1eb4:	c3 01       	movw	r24, r6
    1eb6:	14 de       	rcall	.-984    	; 0x1ae0 <pxPortInitialiseStack>
    1eb8:	99 83       	std	Y+1, r25	; 0x01
    1eba:	88 83       	st	Y, r24
    1ebc:	e1 14       	cp	r14, r1
    1ebe:	f1 04       	cpc	r15, r1
    1ec0:	19 f0       	breq	.+6      	; 0x1ec8 <xTaskGenericCreate+0xc8>
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	d1 83       	std	Z+1, r29	; 0x01
    1ec6:	c0 83       	st	Z, r28
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	0f 92       	push	r0
    1ece:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <uxCurrentNumberOfTasks>
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <uxCurrentNumberOfTasks>
    1ed8:	80 91 19 0b 	lds	r24, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1edc:	90 91 1a 0b 	lds	r25, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1ee0:	89 2b       	or	r24, r25
    1ee2:	a9 f5       	brne	.+106    	; 0x1f4e <xTaskGenericCreate+0x14e>
    1ee4:	d0 93 1a 0b 	sts	0x0B1A, r29	; 0x800b1a <pxCurrentTCB+0x1>
    1ee8:	c0 93 19 0b 	sts	0x0B19, r28	; 0x800b19 <pxCurrentTCB>
    1eec:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <uxCurrentNumberOfTasks>
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	e1 f5       	brne	.+120    	; 0x1f6c <xTaskGenericCreate+0x16c>
    1ef4:	85 ef       	ldi	r24, 0xF5	; 245
    1ef6:	9a e0       	ldi	r25, 0x0A	; 10
    1ef8:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1efc:	8e ef       	ldi	r24, 0xFE	; 254
    1efe:	9a e0       	ldi	r25, 0x0A	; 10
    1f00:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1f04:	87 e0       	ldi	r24, 0x07	; 7
    1f06:	9b e0       	ldi	r25, 0x0B	; 11
    1f08:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1f0c:	80 e1       	ldi	r24, 0x10	; 16
    1f0e:	9b e0       	ldi	r25, 0x0B	; 11
    1f10:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1f14:	8c ee       	ldi	r24, 0xEC	; 236
    1f16:	9a e0       	ldi	r25, 0x0A	; 10
    1f18:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1f1c:	83 ee       	ldi	r24, 0xE3	; 227
    1f1e:	9a e0       	ldi	r25, 0x0A	; 10
    1f20:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1f24:	86 ed       	ldi	r24, 0xD6	; 214
    1f26:	9a e0       	ldi	r25, 0x0A	; 10
    1f28:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1f2c:	8d ec       	ldi	r24, 0xCD	; 205
    1f2e:	9a e0       	ldi	r25, 0x0A	; 10
    1f30:	0e 94 b1 01 	call	0x362	; 0x362 <vListInitialise>
    1f34:	8c ee       	ldi	r24, 0xEC	; 236
    1f36:	9a e0       	ldi	r25, 0x0A	; 10
    1f38:	90 93 e2 0a 	sts	0x0AE2, r25	; 0x800ae2 <pxDelayedTaskList+0x1>
    1f3c:	80 93 e1 0a 	sts	0x0AE1, r24	; 0x800ae1 <pxDelayedTaskList>
    1f40:	83 ee       	ldi	r24, 0xE3	; 227
    1f42:	9a e0       	ldi	r25, 0x0A	; 10
    1f44:	90 93 e0 0a 	sts	0x0AE0, r25	; 0x800ae0 <pxOverflowDelayedTaskList+0x1>
    1f48:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <pxOverflowDelayedTaskList>
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <xTaskGenericCreate+0x16c>
    1f4e:	80 91 c6 0a 	lds	r24, 0x0AC6	; 0x800ac6 <xSchedulerRunning>
    1f52:	81 11       	cpse	r24, r1
    1f54:	0b c0       	rjmp	.+22     	; 0x1f6c <xTaskGenericCreate+0x16c>
    1f56:	e0 91 19 0b 	lds	r30, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1f5a:	f0 91 1a 0b 	lds	r31, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1f5e:	86 89       	ldd	r24, Z+22	; 0x16
    1f60:	08 17       	cp	r16, r24
    1f62:	20 f0       	brcs	.+8      	; 0x1f6c <xTaskGenericCreate+0x16c>
    1f64:	d0 93 1a 0b 	sts	0x0B1A, r29	; 0x800b1a <pxCurrentTCB+0x1>
    1f68:	c0 93 19 0b 	sts	0x0B19, r28	; 0x800b19 <pxCurrentTCB>
    1f6c:	8e 89       	ldd	r24, Y+22	; 0x16
    1f6e:	90 91 c8 0a 	lds	r25, 0x0AC8	; 0x800ac8 <uxTopUsedPriority>
    1f72:	98 17       	cp	r25, r24
    1f74:	10 f4       	brcc	.+4      	; 0x1f7a <xTaskGenericCreate+0x17a>
    1f76:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <uxTopUsedPriority>
    1f7a:	90 91 c1 0a 	lds	r25, 0x0AC1	; 0x800ac1 <uxTaskNumber>
    1f7e:	9f 5f       	subi	r25, 0xFF	; 255
    1f80:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <uxTaskNumber>
    1f84:	90 91 c7 0a 	lds	r25, 0x0AC7	; 0x800ac7 <uxTopReadyPriority>
    1f88:	98 17       	cp	r25, r24
    1f8a:	10 f4       	brcc	.+4      	; 0x1f90 <xTaskGenericCreate+0x190>
    1f8c:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <uxTopReadyPriority>
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9c 01       	movw	r18, r24
    1f94:	22 0f       	add	r18, r18
    1f96:	33 1f       	adc	r19, r19
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	22 0f       	add	r18, r18
    1f9e:	33 1f       	adc	r19, r19
    1fa0:	82 0f       	add	r24, r18
    1fa2:	93 1f       	adc	r25, r19
    1fa4:	b6 01       	movw	r22, r12
    1fa6:	8b 50       	subi	r24, 0x0B	; 11
    1fa8:	95 4f       	sbci	r25, 0xF5	; 245
    1faa:	0e 94 c3 01 	call	0x386	; 0x386 <vListInsertEnd>
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	80 91 c6 0a 	lds	r24, 0x0AC6	; 0x800ac6 <xSchedulerRunning>
    1fb6:	88 23       	and	r24, r24
    1fb8:	51 f0       	breq	.+20     	; 0x1fce <xTaskGenericCreate+0x1ce>
    1fba:	e0 91 19 0b 	lds	r30, 0x0B19	; 0x800b19 <pxCurrentTCB>
    1fbe:	f0 91 1a 0b 	lds	r31, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    1fc2:	86 89       	ldd	r24, Z+22	; 0x16
    1fc4:	80 17       	cp	r24, r16
    1fc6:	28 f4       	brcc	.+10     	; 0x1fd2 <xTaskGenericCreate+0x1d2>
    1fc8:	31 de       	rcall	.-926    	; 0x1c2c <vPortYield>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	09 c0       	rjmp	.+18     	; 0x1fe0 <xTaskGenericCreate+0x1e0>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	07 c0       	rjmp	.+14     	; 0x1fe0 <xTaskGenericCreate+0x1e0>
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <xTaskGenericCreate+0x1e0>
    1fd6:	d8 8e       	std	Y+24, r13	; 0x18
    1fd8:	cf 8a       	std	Y+23, r12	; 0x17
    1fda:	c6 01       	movw	r24, r12
    1fdc:	3c cf       	rjmp	.-392    	; 0x1e56 <xTaskGenericCreate+0x56>
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	bf 90       	pop	r11
    1ff2:	af 90       	pop	r10
    1ff4:	9f 90       	pop	r9
    1ff6:	8f 90       	pop	r8
    1ff8:	7f 90       	pop	r7
    1ffa:	6f 90       	pop	r6
    1ffc:	5f 90       	pop	r5
    1ffe:	4f 90       	pop	r4
    2000:	08 95       	ret

00002002 <vTaskStartScheduler>:
    2002:	af 92       	push	r10
    2004:	bf 92       	push	r11
    2006:	cf 92       	push	r12
    2008:	df 92       	push	r13
    200a:	ef 92       	push	r14
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	a1 2c       	mov	r10, r1
    2012:	b1 2c       	mov	r11, r1
    2014:	c1 2c       	mov	r12, r1
    2016:	d1 2c       	mov	r13, r1
    2018:	e1 2c       	mov	r14, r1
    201a:	f1 2c       	mov	r15, r1
    201c:	00 e0       	ldi	r16, 0x00	; 0
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	45 e5       	ldi	r20, 0x55	; 85
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	6c eb       	ldi	r22, 0xBC	; 188
    2028:	72 e0       	ldi	r23, 0x02	; 2
    202a:	84 e9       	ldi	r24, 0x94	; 148
    202c:	91 e1       	ldi	r25, 0x11	; 17
    202e:	e8 de       	rcall	.-560    	; 0x1e00 <xTaskGenericCreate>
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	41 f4       	brne	.+16     	; 0x2044 <vTaskStartScheduler+0x42>
    2034:	f8 94       	cli
    2036:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <xSchedulerRunning>
    203a:	10 92 ca 0a 	sts	0x0ACA, r1	; 0x800aca <xTickCount+0x1>
    203e:	10 92 c9 0a 	sts	0x0AC9, r1	; 0x800ac9 <xTickCount>
    2042:	ba dd       	rcall	.-1164   	; 0x1bb8 <xPortStartScheduler>
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	08 95       	ret

00002054 <vTaskSuspendAll>:
    2054:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <uxSchedulerSuspended>
    2058:	8f 5f       	subi	r24, 0xFF	; 255
    205a:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <uxSchedulerSuspended>
    205e:	08 95       	ret

00002060 <vTaskIncrementTick>:
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <uxSchedulerSuspended>
    206c:	81 11       	cpse	r24, r1
    206e:	b2 c0       	rjmp	.+356    	; 0x21d4 <vTaskIncrementTick+0x174>
    2070:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <xTickCount>
    2074:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <xTickCount+0x1>
    2078:	01 96       	adiw	r24, 0x01	; 1
    207a:	90 93 ca 0a 	sts	0x0ACA, r25	; 0x800aca <xTickCount+0x1>
    207e:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <xTickCount>
    2082:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <xTickCount>
    2086:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <xTickCount+0x1>
    208a:	89 2b       	or	r24, r25
    208c:	99 f5       	brne	.+102    	; 0x20f4 <vTaskIncrementTick+0x94>
    208e:	80 91 e1 0a 	lds	r24, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    2092:	90 91 e2 0a 	lds	r25, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    2096:	20 91 df 0a 	lds	r18, 0x0ADF	; 0x800adf <pxOverflowDelayedTaskList>
    209a:	30 91 e0 0a 	lds	r19, 0x0AE0	; 0x800ae0 <pxOverflowDelayedTaskList+0x1>
    209e:	30 93 e2 0a 	sts	0x0AE2, r19	; 0x800ae2 <pxDelayedTaskList+0x1>
    20a2:	20 93 e1 0a 	sts	0x0AE1, r18	; 0x800ae1 <pxDelayedTaskList>
    20a6:	90 93 e0 0a 	sts	0x0AE0, r25	; 0x800ae0 <pxOverflowDelayedTaskList+0x1>
    20aa:	80 93 df 0a 	sts	0x0ADF, r24	; 0x800adf <pxOverflowDelayedTaskList>
    20ae:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <xNumOfOverflows>
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <xNumOfOverflows>
    20b8:	e0 91 e1 0a 	lds	r30, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    20bc:	f0 91 e2 0a 	lds	r31, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    20c0:	80 81       	ld	r24, Z
    20c2:	81 11       	cpse	r24, r1
    20c4:	07 c0       	rjmp	.+14     	; 0x20d4 <vTaskIncrementTick+0x74>
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	9f ef       	ldi	r25, 0xFF	; 255
    20ca:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    20ce:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    20d2:	10 c0       	rjmp	.+32     	; 0x20f4 <vTaskIncrementTick+0x94>
    20d4:	e0 91 e1 0a 	lds	r30, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    20d8:	f0 91 e2 0a 	lds	r31, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    20dc:	05 80       	ldd	r0, Z+5	; 0x05
    20de:	f6 81       	ldd	r31, Z+6	; 0x06
    20e0:	e0 2d       	mov	r30, r0
    20e2:	06 80       	ldd	r0, Z+6	; 0x06
    20e4:	f7 81       	ldd	r31, Z+7	; 0x07
    20e6:	e0 2d       	mov	r30, r0
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    20f0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    20f4:	20 91 c9 0a 	lds	r18, 0x0AC9	; 0x800ac9 <xTickCount>
    20f8:	30 91 ca 0a 	lds	r19, 0x0ACA	; 0x800aca <xTickCount+0x1>
    20fc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <xNextTaskUnblockTime>
    2100:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <xNextTaskUnblockTime+0x1>
    2104:	28 17       	cp	r18, r24
    2106:	39 07       	cpc	r19, r25
    2108:	08 f4       	brcc	.+2      	; 0x210c <vTaskIncrementTick+0xac>
    210a:	69 c0       	rjmp	.+210    	; 0x21de <vTaskIncrementTick+0x17e>
    210c:	e0 91 e1 0a 	lds	r30, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    2110:	f0 91 e2 0a 	lds	r31, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    2114:	80 81       	ld	r24, Z
    2116:	88 23       	and	r24, r24
    2118:	99 f0       	breq	.+38     	; 0x2140 <vTaskIncrementTick+0xe0>
    211a:	e0 91 e1 0a 	lds	r30, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    211e:	f0 91 e2 0a 	lds	r31, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    2122:	05 80       	ldd	r0, Z+5	; 0x05
    2124:	f6 81       	ldd	r31, Z+6	; 0x06
    2126:	e0 2d       	mov	r30, r0
    2128:	c6 81       	ldd	r28, Z+6	; 0x06
    212a:	d7 81       	ldd	r29, Z+7	; 0x07
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	20 91 c9 0a 	lds	r18, 0x0AC9	; 0x800ac9 <xTickCount>
    2134:	30 91 ca 0a 	lds	r19, 0x0ACA	; 0x800aca <xTickCount+0x1>
    2138:	28 17       	cp	r18, r24
    213a:	39 07       	cpc	r19, r25
    213c:	f8 f4       	brcc	.+62     	; 0x217c <vTaskIncrementTick+0x11c>
    213e:	19 c0       	rjmp	.+50     	; 0x2172 <vTaskIncrementTick+0x112>
    2140:	8f ef       	ldi	r24, 0xFF	; 255
    2142:	9f ef       	ldi	r25, 0xFF	; 255
    2144:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    2148:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    214c:	48 c0       	rjmp	.+144    	; 0x21de <vTaskIncrementTick+0x17e>
    214e:	e0 91 e1 0a 	lds	r30, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    2152:	f0 91 e2 0a 	lds	r31, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    2156:	05 80       	ldd	r0, Z+5	; 0x05
    2158:	f6 81       	ldd	r31, Z+6	; 0x06
    215a:	e0 2d       	mov	r30, r0
    215c:	c6 81       	ldd	r28, Z+6	; 0x06
    215e:	d7 81       	ldd	r29, Z+7	; 0x07
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	20 91 c9 0a 	lds	r18, 0x0AC9	; 0x800ac9 <xTickCount>
    2168:	30 91 ca 0a 	lds	r19, 0x0ACA	; 0x800aca <xTickCount+0x1>
    216c:	28 17       	cp	r18, r24
    216e:	39 07       	cpc	r19, r25
    2170:	28 f4       	brcc	.+10     	; 0x217c <vTaskIncrementTick+0x11c>
    2172:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <xNextTaskUnblockTime+0x1>
    2176:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <xNextTaskUnblockTime>
    217a:	31 c0       	rjmp	.+98     	; 0x21de <vTaskIncrementTick+0x17e>
    217c:	8e 01       	movw	r16, r28
    217e:	0e 5f       	subi	r16, 0xFE	; 254
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	c8 01       	movw	r24, r16
    2184:	0e 94 25 02 	call	0x44a	; 0x44a <vListRemove>
    2188:	8c 89       	ldd	r24, Y+20	; 0x14
    218a:	9d 89       	ldd	r25, Y+21	; 0x15
    218c:	89 2b       	or	r24, r25
    218e:	21 f0       	breq	.+8      	; 0x2198 <vTaskIncrementTick+0x138>
    2190:	ce 01       	movw	r24, r28
    2192:	0c 96       	adiw	r24, 0x0c	; 12
    2194:	0e 94 25 02 	call	0x44a	; 0x44a <vListRemove>
    2198:	8e 89       	ldd	r24, Y+22	; 0x16
    219a:	90 91 c7 0a 	lds	r25, 0x0AC7	; 0x800ac7 <uxTopReadyPriority>
    219e:	98 17       	cp	r25, r24
    21a0:	10 f4       	brcc	.+4      	; 0x21a6 <vTaskIncrementTick+0x146>
    21a2:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <uxTopReadyPriority>
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 01       	movw	r18, r24
    21aa:	22 0f       	add	r18, r18
    21ac:	33 1f       	adc	r19, r19
    21ae:	22 0f       	add	r18, r18
    21b0:	33 1f       	adc	r19, r19
    21b2:	22 0f       	add	r18, r18
    21b4:	33 1f       	adc	r19, r19
    21b6:	82 0f       	add	r24, r18
    21b8:	93 1f       	adc	r25, r19
    21ba:	b8 01       	movw	r22, r16
    21bc:	8b 50       	subi	r24, 0x0B	; 11
    21be:	95 4f       	sbci	r25, 0xF5	; 245
    21c0:	0e 94 c3 01 	call	0x386	; 0x386 <vListInsertEnd>
    21c4:	e0 91 e1 0a 	lds	r30, 0x0AE1	; 0x800ae1 <pxDelayedTaskList>
    21c8:	f0 91 e2 0a 	lds	r31, 0x0AE2	; 0x800ae2 <pxDelayedTaskList+0x1>
    21cc:	80 81       	ld	r24, Z
    21ce:	81 11       	cpse	r24, r1
    21d0:	be cf       	rjmp	.-132    	; 0x214e <vTaskIncrementTick+0xee>
    21d2:	b6 cf       	rjmp	.-148    	; 0x2140 <vTaskIncrementTick+0xe0>
    21d4:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <uxMissedTicks>
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <uxMissedTicks>
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	08 95       	ret

000021e8 <xTaskResumeAll>:
    21e8:	cf 92       	push	r12
    21ea:	df 92       	push	r13
    21ec:	ef 92       	push	r14
    21ee:	ff 92       	push	r15
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	0f 92       	push	r0
    21fe:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <uxSchedulerSuspended>
    2202:	81 50       	subi	r24, 0x01	; 1
    2204:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <uxSchedulerSuspended>
    2208:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <uxSchedulerSuspended>
    220c:	81 11       	cpse	r24, r1
    220e:	62 c0       	rjmp	.+196    	; 0x22d4 <xTaskResumeAll+0xec>
    2210:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <uxCurrentNumberOfTasks>
    2214:	81 11       	cpse	r24, r1
    2216:	32 c0       	rjmp	.+100    	; 0x227c <xTaskResumeAll+0x94>
    2218:	60 c0       	rjmp	.+192    	; 0x22da <xTaskResumeAll+0xf2>
    221a:	d7 01       	movw	r26, r14
    221c:	15 96       	adiw	r26, 0x05	; 5
    221e:	ed 91       	ld	r30, X+
    2220:	fc 91       	ld	r31, X
    2222:	16 97       	sbiw	r26, 0x06	; 6
    2224:	c6 81       	ldd	r28, Z+6	; 0x06
    2226:	d7 81       	ldd	r29, Z+7	; 0x07
    2228:	ce 01       	movw	r24, r28
    222a:	0c 96       	adiw	r24, 0x0c	; 12
    222c:	0e 94 25 02 	call	0x44a	; 0x44a <vListRemove>
    2230:	8e 01       	movw	r16, r28
    2232:	0e 5f       	subi	r16, 0xFE	; 254
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	c8 01       	movw	r24, r16
    2238:	0e 94 25 02 	call	0x44a	; 0x44a <vListRemove>
    223c:	8e 89       	ldd	r24, Y+22	; 0x16
    223e:	90 91 c7 0a 	lds	r25, 0x0AC7	; 0x800ac7 <uxTopReadyPriority>
    2242:	98 17       	cp	r25, r24
    2244:	10 f4       	brcc	.+4      	; 0x224a <xTaskResumeAll+0x62>
    2246:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <uxTopReadyPriority>
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 01       	movw	r18, r24
    224e:	22 0f       	add	r18, r18
    2250:	33 1f       	adc	r19, r19
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	22 0f       	add	r18, r18
    2258:	33 1f       	adc	r19, r19
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	b8 01       	movw	r22, r16
    2260:	8b 50       	subi	r24, 0x0B	; 11
    2262:	95 4f       	sbci	r25, 0xF5	; 245
    2264:	0e 94 c3 01 	call	0x386	; 0x386 <vListInsertEnd>
    2268:	e0 91 19 0b 	lds	r30, 0x0B19	; 0x800b19 <pxCurrentTCB>
    226c:	f0 91 1a 0b 	lds	r31, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    2270:	9e 89       	ldd	r25, Y+22	; 0x16
    2272:	86 89       	ldd	r24, Z+22	; 0x16
    2274:	98 17       	cp	r25, r24
    2276:	58 f0       	brcs	.+22     	; 0x228e <xTaskResumeAll+0xa6>
    2278:	dc 2c       	mov	r13, r12
    227a:	09 c0       	rjmp	.+18     	; 0x228e <xTaskResumeAll+0xa6>
    227c:	d1 2c       	mov	r13, r1
    227e:	0f 2e       	mov	r0, r31
    2280:	f6 ed       	ldi	r31, 0xD6	; 214
    2282:	ef 2e       	mov	r14, r31
    2284:	fa e0       	ldi	r31, 0x0A	; 10
    2286:	ff 2e       	mov	r15, r31
    2288:	f0 2d       	mov	r31, r0
    228a:	cc 24       	eor	r12, r12
    228c:	c3 94       	inc	r12
    228e:	f7 01       	movw	r30, r14
    2290:	80 81       	ld	r24, Z
    2292:	81 11       	cpse	r24, r1
    2294:	c2 cf       	rjmp	.-124    	; 0x221a <xTaskResumeAll+0x32>
    2296:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <uxMissedTicks>
    229a:	88 23       	and	r24, r24
    229c:	79 f0       	breq	.+30     	; 0x22bc <xTaskResumeAll+0xd4>
    229e:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <uxMissedTicks>
    22a2:	88 23       	and	r24, r24
    22a4:	91 f0       	breq	.+36     	; 0x22ca <xTaskResumeAll+0xe2>
    22a6:	dc de       	rcall	.-584    	; 0x2060 <vTaskIncrementTick>
    22a8:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <uxMissedTicks>
    22ac:	81 50       	subi	r24, 0x01	; 1
    22ae:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <uxMissedTicks>
    22b2:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <uxMissedTicks>
    22b6:	81 11       	cpse	r24, r1
    22b8:	f6 cf       	rjmp	.-20     	; 0x22a6 <xTaskResumeAll+0xbe>
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <xTaskResumeAll+0xe2>
    22bc:	f1 e0       	ldi	r31, 0x01	; 1
    22be:	df 16       	cp	r13, r31
    22c0:	21 f0       	breq	.+8      	; 0x22ca <xTaskResumeAll+0xe2>
    22c2:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <xMissedYield>
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	39 f4       	brne	.+14     	; 0x22d8 <xTaskResumeAll+0xf0>
    22ca:	10 92 c3 0a 	sts	0x0AC3, r1	; 0x800ac3 <xMissedYield>
    22ce:	ae dc       	rcall	.-1700   	; 0x1c2c <vPortYield>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <xTaskResumeAll+0xf2>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <xTaskResumeAll+0xf2>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	08 95       	ret

000022f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    22f6:	89 2b       	or	r24, r25
    22f8:	99 f0       	breq	.+38     	; 0x2320 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    22fa:	ac de       	rcall	.-680    	; 0x2054 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    22fc:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <xTickCount>
    2300:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <xTickCount+0x1>
    2304:	c8 0f       	add	r28, r24
    2306:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2308:	80 91 19 0b 	lds	r24, 0x0B19	; 0x800b19 <pxCurrentTCB>
    230c:	90 91 1a 0b 	lds	r25, 0x0B1A	; 0x800b1a <pxCurrentTCB+0x1>
    2310:	02 96       	adiw	r24, 0x02	; 2
    2312:	0e 94 25 02 	call	0x44a	; 0x44a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2316:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    2318:	3c dd       	rcall	.-1416   	; 0x1d92 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    231a:	66 df       	rcall	.-308    	; 0x21e8 <xTaskResumeAll>
    231c:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <vTaskDelay+0x32>
    2320:	85 dc       	rcall	.-1782   	; 0x1c2c <vPortYield>
		}
	}
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2328:	0f 2e       	mov	r0, r31
    232a:	fd ec       	ldi	r31, 0xCD	; 205
    232c:	ef 2e       	mov	r14, r31
    232e:	fa e0       	ldi	r31, 0x0A	; 10
    2330:	ff 2e       	mov	r15, r31
    2332:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    2334:	c5 ef       	ldi	r28, 0xF5	; 245
    2336:	da e0       	ldi	r29, 0x0A	; 10
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    2338:	80 91 cc 0a 	lds	r24, 0x0ACC	; 0x800acc <uxTasksDeleted>
    233c:	88 23       	and	r24, r24
    233e:	41 f1       	breq	.+80     	; 0x2390 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    2340:	89 de       	rcall	.-750    	; 0x2054 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2342:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    2344:	1c 91       	ld	r17, X
    2346:	50 df       	rcall	.-352    	; 0x21e8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    2348:	11 23       	and	r17, r17
    234a:	11 f1       	breq	.+68     	; 0x2390 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2352:	d7 01       	movw	r26, r14
    2354:	15 96       	adiw	r26, 0x05	; 5
    2356:	ed 91       	ld	r30, X+
    2358:	fc 91       	ld	r31, X
    235a:	16 97       	sbiw	r26, 0x06	; 6
    235c:	06 81       	ldd	r16, Z+6	; 0x06
    235e:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    2360:	c8 01       	movw	r24, r16
    2362:	02 96       	adiw	r24, 0x02	; 2
    2364:	0e 94 25 02 	call	0x44a	; 0x44a <vListRemove>
					--uxCurrentNumberOfTasks;
    2368:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <uxCurrentNumberOfTasks>
    236c:	81 50       	subi	r24, 0x01	; 1
    236e:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    2372:	80 91 cc 0a 	lds	r24, 0x0ACC	; 0x800acc <uxTasksDeleted>
    2376:	81 50       	subi	r24, 0x01	; 1
    2378:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2380:	f8 01       	movw	r30, r16
    2382:	87 89       	ldd	r24, Z+23	; 0x17
    2384:	90 8d       	ldd	r25, Z+24	; 0x18
    2386:	0e 94 b0 01 	call	0x360	; 0x360 <vPortFree>
		vPortFree( pxTCB );
    238a:	c8 01       	movw	r24, r16
    238c:	0e 94 b0 01 	call	0x360	; 0x360 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    2390:	88 81       	ld	r24, Y
    2392:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    2394:	88 f2       	brcs	.-94     	; 0x2338 <prvIdleTask+0x10>
    2396:	4a dc       	rcall	.-1900   	; 0x1c2c <vPortYield>
    2398:	cf cf       	rjmp	.-98     	; 0x2338 <prvIdleTask+0x10>

0000239a <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    239a:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <uxSchedulerSuspended>
    239e:	81 11       	cpse	r24, r1
    23a0:	13 c0       	rjmp	.+38     	; 0x23c8 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    23a2:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <uxTopReadyPriority>
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	fc 01       	movw	r30, r24
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	8e 0f       	add	r24, r30
    23b8:	9f 1f       	adc	r25, r31
    23ba:	fc 01       	movw	r30, r24
    23bc:	eb 50       	subi	r30, 0x0B	; 11
    23be:	f5 4f       	sbci	r31, 0xF5	; 245
    23c0:	80 81       	ld	r24, Z
    23c2:	88 23       	and	r24, r24
    23c4:	29 f0       	breq	.+10     	; 0x23d0 <vTaskSwitchContext+0x36>
    23c6:	1b c0       	rjmp	.+54     	; 0x23fe <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	80 93 c3 0a 	sts	0x0AC3, r24	; 0x800ac3 <xMissedYield>
    23ce:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    23d0:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <uxTopReadyPriority>
    23d4:	81 50       	subi	r24, 0x01	; 1
    23d6:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    23da:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <uxTopReadyPriority>
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	fc 01       	movw	r30, r24
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	8e 0f       	add	r24, r30
    23f0:	9f 1f       	adc	r25, r31
    23f2:	fc 01       	movw	r30, r24
    23f4:	eb 50       	subi	r30, 0x0B	; 11
    23f6:	f5 4f       	sbci	r31, 0xF5	; 245
    23f8:	80 81       	ld	r24, Z
    23fa:	88 23       	and	r24, r24
    23fc:	49 f3       	breq	.-46     	; 0x23d0 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    23fe:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <uxTopReadyPriority>
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9c 01       	movw	r18, r24
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	22 0f       	add	r18, r18
    2410:	33 1f       	adc	r19, r19
    2412:	28 0f       	add	r18, r24
    2414:	39 1f       	adc	r19, r25
    2416:	d9 01       	movw	r26, r18
    2418:	ab 50       	subi	r26, 0x0B	; 11
    241a:	b5 4f       	sbci	r27, 0xF5	; 245
    241c:	11 96       	adiw	r26, 0x01	; 1
    241e:	ed 91       	ld	r30, X+
    2420:	fc 91       	ld	r31, X
    2422:	12 97       	sbiw	r26, 0x02	; 2
    2424:	02 80       	ldd	r0, Z+2	; 0x02
    2426:	f3 81       	ldd	r31, Z+3	; 0x03
    2428:	e0 2d       	mov	r30, r0
    242a:	12 96       	adiw	r26, 0x02	; 2
    242c:	fc 93       	st	X, r31
    242e:	ee 93       	st	-X, r30
    2430:	11 97       	sbiw	r26, 0x01	; 1
    2432:	28 50       	subi	r18, 0x08	; 8
    2434:	35 4f       	sbci	r19, 0xF5	; 245
    2436:	e2 17       	cp	r30, r18
    2438:	f3 07       	cpc	r31, r19
    243a:	29 f4       	brne	.+10     	; 0x2446 <vTaskSwitchContext+0xac>
    243c:	22 81       	ldd	r18, Z+2	; 0x02
    243e:	33 81       	ldd	r19, Z+3	; 0x03
    2440:	fd 01       	movw	r30, r26
    2442:	32 83       	std	Z+2, r19	; 0x02
    2444:	21 83       	std	Z+1, r18	; 0x01
    2446:	fc 01       	movw	r30, r24
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	8e 0f       	add	r24, r30
    2456:	9f 1f       	adc	r25, r31
    2458:	fc 01       	movw	r30, r24
    245a:	eb 50       	subi	r30, 0x0B	; 11
    245c:	f5 4f       	sbci	r31, 0xF5	; 245
    245e:	01 80       	ldd	r0, Z+1	; 0x01
    2460:	f2 81       	ldd	r31, Z+2	; 0x02
    2462:	e0 2d       	mov	r30, r0
    2464:	86 81       	ldd	r24, Z+6	; 0x06
    2466:	97 81       	ldd	r25, Z+7	; 0x07
    2468:	90 93 1a 0b 	sts	0x0B1A, r25	; 0x800b1a <pxCurrentTCB+0x1>
    246c:	80 93 19 0b 	sts	0x0B19, r24	; 0x800b19 <pxCurrentTCB>
    2470:	08 95       	ret

00002472 <__udivmodqi4>:
    2472:	99 1b       	sub	r25, r25
    2474:	79 e0       	ldi	r23, 0x09	; 9
    2476:	04 c0       	rjmp	.+8      	; 0x2480 <__udivmodqi4_ep>

00002478 <__udivmodqi4_loop>:
    2478:	99 1f       	adc	r25, r25
    247a:	96 17       	cp	r25, r22
    247c:	08 f0       	brcs	.+2      	; 0x2480 <__udivmodqi4_ep>
    247e:	96 1b       	sub	r25, r22

00002480 <__udivmodqi4_ep>:
    2480:	88 1f       	adc	r24, r24
    2482:	7a 95       	dec	r23
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__udivmodqi4_loop>
    2486:	80 95       	com	r24
    2488:	08 95       	ret

0000248a <__tablejump2__>:
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	00 24       	eor	r0, r0
    2490:	00 1c       	adc	r0, r0
    2492:	0b be       	out	0x3b, r0	; 59
    2494:	07 90       	elpm	r0, Z+
    2496:	f6 91       	elpm	r31, Z
    2498:	e0 2d       	mov	r30, r0
    249a:	09 94       	ijmp

0000249c <memset>:
    249c:	dc 01       	movw	r26, r24
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <memset+0x6>
    24a0:	6d 93       	st	X+, r22
    24a2:	41 50       	subi	r20, 0x01	; 1
    24a4:	50 40       	sbci	r21, 0x00	; 0
    24a6:	e0 f7       	brcc	.-8      	; 0x24a0 <memset+0x4>
    24a8:	08 95       	ret

000024aa <strncpy>:
    24aa:	fb 01       	movw	r30, r22
    24ac:	dc 01       	movw	r26, r24
    24ae:	41 50       	subi	r20, 0x01	; 1
    24b0:	50 40       	sbci	r21, 0x00	; 0
    24b2:	48 f0       	brcs	.+18     	; 0x24c6 <strncpy+0x1c>
    24b4:	01 90       	ld	r0, Z+
    24b6:	0d 92       	st	X+, r0
    24b8:	00 20       	and	r0, r0
    24ba:	c9 f7       	brne	.-14     	; 0x24ae <strncpy+0x4>
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <strncpy+0x16>
    24be:	1d 92       	st	X+, r1
    24c0:	41 50       	subi	r20, 0x01	; 1
    24c2:	50 40       	sbci	r21, 0x00	; 0
    24c4:	e0 f7       	brcc	.-8      	; 0x24be <strncpy+0x14>
    24c6:	08 95       	ret

000024c8 <_exit>:
    24c8:	f8 94       	cli

000024ca <__stop_program>:
    24ca:	ff cf       	rjmp	.-2      	; 0x24ca <__stop_program>
