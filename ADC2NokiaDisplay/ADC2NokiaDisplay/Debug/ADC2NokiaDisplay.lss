
ADC2NokiaDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000009e4  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000203  00800120  00800120  00000a98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000174b  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc7  00000000  00000000  00002373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be5  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00003c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d5  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c9d  00000000  00000000  00004591  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000522e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
   2:	00 00       	nop
   4:	50 c1       	rjmp	.+672    	; 0x2a6 <__bad_interrupt>
   6:	00 00       	nop
   8:	4e c1       	rjmp	.+668    	; 0x2a6 <__bad_interrupt>
   a:	00 00       	nop
   c:	4c c1       	rjmp	.+664    	; 0x2a6 <__bad_interrupt>
   e:	00 00       	nop
  10:	4a c1       	rjmp	.+660    	; 0x2a6 <__bad_interrupt>
  12:	00 00       	nop
  14:	48 c1       	rjmp	.+656    	; 0x2a6 <__bad_interrupt>
  16:	00 00       	nop
  18:	46 c1       	rjmp	.+652    	; 0x2a6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	44 c1       	rjmp	.+648    	; 0x2a6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	42 c1       	rjmp	.+644    	; 0x2a6 <__bad_interrupt>
  22:	00 00       	nop
  24:	40 c1       	rjmp	.+640    	; 0x2a6 <__bad_interrupt>
  26:	00 00       	nop
  28:	3e c1       	rjmp	.+636    	; 0x2a6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3c c1       	rjmp	.+632    	; 0x2a6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3a c1       	rjmp	.+628    	; 0x2a6 <__bad_interrupt>
  32:	00 00       	nop
  34:	38 c1       	rjmp	.+624    	; 0x2a6 <__bad_interrupt>
  36:	00 00       	nop
  38:	36 c1       	rjmp	.+620    	; 0x2a6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	34 c1       	rjmp	.+616    	; 0x2a6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	32 c1       	rjmp	.+612    	; 0x2a6 <__bad_interrupt>
  42:	00 00       	nop
  44:	30 c1       	rjmp	.+608    	; 0x2a6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c1       	rjmp	.+604    	; 0x2a6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2c c1       	rjmp	.+600    	; 0x2a6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2a c1       	rjmp	.+596    	; 0x2a6 <__bad_interrupt>
  52:	00 00       	nop
  54:	28 c1       	rjmp	.+592    	; 0x2a6 <__bad_interrupt>
  56:	00 00       	nop
  58:	26 c1       	rjmp	.+588    	; 0x2a6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	22 c1       	rjmp	.+580    	; 0x2a6 <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c1       	rjmp	.+576    	; 0x2a6 <__bad_interrupt>
  66:	00 00       	nop
  68:	1e c1       	rjmp	.+572    	; 0x2a6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1c c1       	rjmp	.+568    	; 0x2a6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1a c1       	rjmp	.+564    	; 0x2a6 <__bad_interrupt>
  72:	00 00       	nop
  74:	18 c1       	rjmp	.+560    	; 0x2a6 <__bad_interrupt>
  76:	00 00       	nop
  78:	16 c1       	rjmp	.+556    	; 0x2a6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	14 c1       	rjmp	.+552    	; 0x2a6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	12 c1       	rjmp	.+548    	; 0x2a6 <__bad_interrupt>
  82:	00 00       	nop
  84:	10 c1       	rjmp	.+544    	; 0x2a6 <__bad_interrupt>
  86:	00 00       	nop
  88:	0e c1       	rjmp	.+540    	; 0x2a6 <__bad_interrupt>
	...

0000008c <CHARSET>:
  8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  9c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ac:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  bc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  cc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  dc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  ec:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  fc:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 10c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 11c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 12c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 13c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 14c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 15c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 16c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 17c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 18c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 19c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ac:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1bc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1cc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1dc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1ec:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1fc:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 20c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 21c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 22c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 24c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 25c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000026c <__ctors_end>:
 26c:	11 24       	eor	r1, r1
 26e:	1f be       	out	0x3f, r1	; 63
 270:	cf ef       	ldi	r28, 0xFF	; 255
 272:	d0 e4       	ldi	r29, 0x40	; 64
 274:	de bf       	out	0x3e, r29	; 62
 276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
 278:	11 e0       	ldi	r17, 0x01	; 1
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	e4 ee       	ldi	r30, 0xE4	; 228
 280:	f9 e0       	ldi	r31, 0x09	; 9
 282:	00 e0       	ldi	r16, 0x00	; 0
 284:	0b bf       	out	0x3b, r16	; 59
 286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
 288:	07 90       	elpm	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	a0 32       	cpi	r26, 0x20	; 32
 28e:	b1 07       	cpc	r27, r17
 290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
 292:	23 e0       	ldi	r18, 0x03	; 3
 294:	a0 e2       	ldi	r26, 0x20	; 32
 296:	b1 e0       	ldi	r27, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
 29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
 29c:	a3 32       	cpi	r26, 0x23	; 35
 29e:	b2 07       	cpc	r27, r18
 2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
 2a2:	6e d0       	rcall	.+220    	; 0x380 <main>
 2a4:	9d c3       	rjmp	.+1850   	; 0x9e0 <_exit>

000002a6 <__bad_interrupt>:
 2a6:	ac ce       	rjmp	.-680    	; 0x0 <__vectors>

000002a8 <HX711_init>:
	SCALE = scale;
}

void HX711_setOffset(uint32_t offset)
{
    OFFSET = offset;
 2a8:	21 9a       	sbi	0x04, 1	; 4
 2aa:	09 98       	cbi	0x01, 1	; 1
 2ac:	11 9a       	sbi	0x02, 1	; 2
 2ae:	08 95       	ret

000002b0 <HX711_isReady>:
 2b0:	80 b1       	in	r24, 0x00	; 0
 2b2:	86 95       	lsr	r24
 2b4:	81 70       	andi	r24, 0x01	; 1
 2b6:	08 95       	ret

000002b8 <HX711_setGain>:
 2b8:	80 34       	cpi	r24, 0x40	; 64
 2ba:	49 f0       	breq	.+18     	; 0x2ce <HX711_setGain+0x16>
 2bc:	80 38       	cpi	r24, 0x80	; 128
 2be:	19 f0       	breq	.+6      	; 0x2c6 <HX711_setGain+0xe>
 2c0:	80 32       	cpi	r24, 0x20	; 32
 2c2:	61 f4       	brne	.+24     	; 0x2dc <HX711_setGain+0x24>
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <HX711_setGain+0x1e>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <GAIN>
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <HX711_setGain+0x24>
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <GAIN>
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <HX711_setGain+0x24>
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <GAIN>
 2dc:	29 98       	cbi	0x05, 1	; 5
	...
 2e6:	08 95       	ret

000002e8 <HX711_read>:
 2e8:	e3 df       	rcall	.-58     	; 0x2b0 <HX711_isReady>
 2ea:	88 23       	and	r24, r24
 2ec:	e9 f3       	breq	.-6      	; 0x2e8 <HX711_read>
 2ee:	28 e1       	ldi	r18, 0x18	; 24
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	dc 01       	movw	r26, r24
 2f6:	29 9a       	sbi	0x05, 1	; 5
	...
 300:	00 00       	nop
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	29 98       	cbi	0x05, 1	; 5
	...
 314:	01 9b       	sbis	0x00, 1	; 0
 316:	03 c0       	rjmp	.+6      	; 0x31e <HX711_read+0x36>
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	a1 1d       	adc	r26, r1
 31c:	b1 1d       	adc	r27, r1
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	51 f7       	brne	.-44     	; 0x2f6 <HX711_read+0xe>
 322:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <GAIN>
 326:	22 23       	and	r18, r18
 328:	89 f0       	breq	.+34     	; 0x34c <HX711_read+0x64>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	29 9a       	sbi	0x05, 1	; 5
	...
 336:	00 00       	nop
 338:	29 98       	cbi	0x05, 1	; 5
	...
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <GAIN>
 348:	23 17       	cp	r18, r19
 34a:	80 f3       	brcs	.-32     	; 0x32c <HX711_read+0x44>
 34c:	bc 01       	movw	r22, r24
 34e:	cd 01       	movw	r24, r26
 350:	80 58       	subi	r24, 0x80	; 128
 352:	08 95       	ret

00000354 <HX711_powerDown>:
}

void HX711_powerDown()
{
	PD_SCK_SET_LOW;
 354:	29 98       	cbi	0x05, 1	; 5
	...
	PD_SCK_SET_HIGH;
 35e:	29 9a       	sbi	0x05, 1	; 5
	...
 368:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36a:	87 e1       	ldi	r24, 0x17	; 23
 36c:	8a 95       	dec	r24
 36e:	f1 f7       	brne	.-4      	; 0x36c <HX711_powerDown+0x18>
 370:	00 00       	nop
 372:	08 95       	ret

00000374 <HX711_powerUp>:
	_delay_us(70);
}

void HX711_powerUp()
{
	PD_SCK_SET_LOW;
 374:	29 98       	cbi	0x05, 1	; 5
	...
 37e:	08 95       	ret

00000380 <main>:



int main(void)
{
    DDRA = 0x00; PORTA = 0xFF;
 380:	11 b8       	out	0x01, r1	; 1
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0x00;
 386:	84 b9       	out	0x04, r24	; 4
 388:	15 b8       	out	0x05, r1	; 5
    DDRD = 0xFF; PORTD = 0x00;
 38a:	8a b9       	out	0x0a, r24	; 10
 38c:	1b b8       	out	0x0b, r1	; 11
    
    //adc_init();
    nokia_lcd_init();
 38e:	94 d1       	rcall	.+808    	; 0x6b8 <nokia_lcd_init>
	HX711_init();
 390:	8b df       	rcall	.-234    	; 0x2a8 <HX711_init>
    HX711_powerUp();
 392:	f0 df       	rcall	.-32     	; 0x374 <HX711_powerUp>
	HX711_setGain(32);
 394:	80 e2       	ldi	r24, 0x20	; 32
 396:	90 df       	rcall	.-224    	; 0x2b8 <HX711_setGain>
    int32_t joystick_value = HX711_read();
 398:	a7 df       	rcall	.-178    	; 0x2e8 <HX711_read>
 39a:	4b 01       	movw	r8, r22
 39c:	5c 01       	movw	r10, r24
	HX711_powerDown();
 39e:	da df       	rcall	.-76     	; 0x354 <HX711_powerDown>
 3a0:	c1 d1       	rcall	.+898    	; 0x724 <nokia_lcd_clear>
    unsigned char thousands = 0;
    unsigned char hundreds = 0;
    unsigned char tens = 0;
    unsigned char ones = 0;
    
    nokia_lcd_clear();
 3a2:	81 e8       	ldi	r24, 0x81	; 129
 3a4:	88 16       	cp	r8, r24
    
	if(joystick_value > 10000000){
 3a6:	86 e9       	ldi	r24, 0x96	; 150
 3a8:	98 06       	cpc	r9, r24
 3aa:	88 e9       	ldi	r24, 0x98	; 152
 3ac:	a8 06       	cpc	r10, r24
 3ae:	b1 04       	cpc	r11, r1
 3b0:	6c f0       	brlt	.+26     	; 0x3cc <main+0x4c>
 3b2:	c5 01       	movw	r24, r10
		ten_millions = joystick_value / 10000000;
 3b4:	b4 01       	movw	r22, r8
 3b6:	20 e8       	ldi	r18, 0x80	; 128
 3b8:	36 e9       	ldi	r19, 0x96	; 150
 3ba:	48 e9       	ldi	r20, 0x98	; 152
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	d2 d2       	rcall	.+1444   	; 0x964 <__divmodsi4>
 3c0:	52 2e       	mov	r5, r18
 3c2:	86 2e       	mov	r8, r22
 3c4:	97 2e       	mov	r9, r23
		joystick_value = joystick_value % 10000000;
 3c6:	a8 2e       	mov	r10, r24
 3c8:	b9 2e       	mov	r11, r25
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <main+0x4e>
 3cc:	51 2c       	mov	r5, r1
 3ce:	91 e4       	ldi	r25, 0x41	; 65
    HX711_powerUp();
	HX711_setGain(32);
    int32_t joystick_value = HX711_read();
	HX711_powerDown();
    int32_t new_joy_value;
	unsigned char ten_millions = 0;
 3d0:	89 16       	cp	r8, r25
	if(joystick_value > 10000000){
		ten_millions = joystick_value / 10000000;
		joystick_value = joystick_value % 10000000;
	}
	
	if(joystick_value > 1000000){
 3d2:	92 e4       	ldi	r25, 0x42	; 66
 3d4:	99 06       	cpc	r9, r25
 3d6:	9f e0       	ldi	r25, 0x0F	; 15
 3d8:	a9 06       	cpc	r10, r25
 3da:	b1 04       	cpc	r11, r1
 3dc:	6c f0       	brlt	.+26     	; 0x3f8 <main+0x78>
 3de:	c5 01       	movw	r24, r10
		millions = joystick_value / 1000000;
 3e0:	b4 01       	movw	r22, r8
 3e2:	20 e4       	ldi	r18, 0x40	; 64
 3e4:	32 e4       	ldi	r19, 0x42	; 66
 3e6:	4f e0       	ldi	r20, 0x0F	; 15
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	bc d2       	rcall	.+1400   	; 0x964 <__divmodsi4>
 3ec:	62 2e       	mov	r6, r18
 3ee:	86 2e       	mov	r8, r22
 3f0:	97 2e       	mov	r9, r23
		joystick_value = joystick_value % 1000000;
 3f2:	a8 2e       	mov	r10, r24
 3f4:	b9 2e       	mov	r11, r25
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <main+0x7a>
 3f8:	61 2c       	mov	r6, r1
 3fa:	81 ea       	ldi	r24, 0xA1	; 161
	HX711_setGain(32);
    int32_t joystick_value = HX711_read();
	HX711_powerDown();
    int32_t new_joy_value;
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
 3fc:	88 16       	cp	r8, r24
	if(joystick_value > 1000000){
		millions = joystick_value / 1000000;
		joystick_value = joystick_value % 1000000;
	}
	
	if(joystick_value > 100000){
 3fe:	86 e8       	ldi	r24, 0x86	; 134
 400:	98 06       	cpc	r9, r24
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	a8 06       	cpc	r10, r24
 406:	b1 04       	cpc	r11, r1
 408:	6c f0       	brlt	.+26     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40a:	c5 01       	movw	r24, r10
		hundred_thousands = joystick_value / 100000;
 40c:	b4 01       	movw	r22, r8
 40e:	20 ea       	ldi	r18, 0xA0	; 160
 410:	36 e8       	ldi	r19, 0x86	; 134
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	a6 d2       	rcall	.+1356   	; 0x964 <__divmodsi4>
 418:	72 2e       	mov	r7, r18
 41a:	86 2e       	mov	r8, r22
 41c:	97 2e       	mov	r9, r23
		joystick_value = joystick_value % 100000;
 41e:	a8 2e       	mov	r10, r24
 420:	b9 2e       	mov	r11, r25
 422:	01 c0       	rjmp	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	71 2c       	mov	r7, r1
 426:	91 e1       	ldi	r25, 0x11	; 17
    int32_t joystick_value = HX711_read();
	HX711_powerDown();
    int32_t new_joy_value;
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
 428:	89 16       	cp	r8, r25
	if(joystick_value > 100000){
		hundred_thousands = joystick_value / 100000;
		joystick_value = joystick_value % 100000;
	}
	
	if(joystick_value > 10000){
 42a:	97 e2       	ldi	r25, 0x27	; 39
 42c:	99 06       	cpc	r9, r25
 42e:	a1 04       	cpc	r10, r1
 430:	b1 04       	cpc	r11, r1
 432:	6c f0       	brlt	.+26     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 434:	c5 01       	movw	r24, r10
		ten_thousands = joystick_value / 10000;
 436:	b4 01       	movw	r22, r8
 438:	20 e1       	ldi	r18, 0x10	; 16
 43a:	37 e2       	ldi	r19, 0x27	; 39
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	91 d2       	rcall	.+1314   	; 0x964 <__divmodsi4>
 442:	02 2f       	mov	r16, r18
 444:	86 2e       	mov	r8, r22
 446:	97 2e       	mov	r9, r23
		joystick_value = joystick_value % 10000;
 448:	a8 2e       	mov	r10, r24
 44a:	b9 2e       	mov	r11, r25
 44c:	01 c0       	rjmp	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	00 e0       	ldi	r16, 0x00	; 0
 450:	89 ee       	ldi	r24, 0xE9	; 233
	HX711_powerDown();
    int32_t new_joy_value;
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
	unsigned char ten_thousands = 0;
 452:	88 16       	cp	r8, r24
	if(joystick_value > 10000){
		ten_thousands = joystick_value / 10000;
		joystick_value = joystick_value % 10000;
	}
	
    if(joystick_value > 1000){
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	98 06       	cpc	r9, r24
 458:	a1 04       	cpc	r10, r1
 45a:	b1 04       	cpc	r11, r1
 45c:	6c f0       	brlt	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45e:	c5 01       	movw	r24, r10
	    thousands = joystick_value / 1000;
 460:	b4 01       	movw	r22, r8
 462:	28 ee       	ldi	r18, 0xE8	; 232
 464:	33 e0       	ldi	r19, 0x03	; 3
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	7c d2       	rcall	.+1272   	; 0x964 <__divmodsi4>
 46c:	12 2f       	mov	r17, r18
 46e:	86 2e       	mov	r8, r22
 470:	97 2e       	mov	r9, r23
	    joystick_value = joystick_value % 1000;
 472:	a8 2e       	mov	r10, r24
 474:	b9 2e       	mov	r11, r25
 476:	01 c0       	rjmp	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 478:	10 e0       	ldi	r17, 0x00	; 0
 47a:	95 e6       	ldi	r25, 0x65	; 101
    int32_t new_joy_value;
	unsigned char ten_millions = 0;
	unsigned char millions = 0;
	unsigned char hundred_thousands = 0;
	unsigned char ten_thousands = 0;
    unsigned char thousands = 0;
 47c:	89 16       	cp	r8, r25
    if(joystick_value > 1000){
	    thousands = joystick_value / 1000;
	    joystick_value = joystick_value % 1000;
    }
    
    if(joystick_value > 100){
 47e:	91 04       	cpc	r9, r1
 480:	a1 04       	cpc	r10, r1
 482:	b1 04       	cpc	r11, r1
 484:	6c f0       	brlt	.+26     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 486:	c5 01       	movw	r24, r10
	    hundreds = joystick_value / 100;
 488:	b4 01       	movw	r22, r8
 48a:	24 e6       	ldi	r18, 0x64	; 100
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	68 d2       	rcall	.+1232   	; 0x964 <__divmodsi4>
 494:	d2 2f       	mov	r29, r18
 496:	86 2e       	mov	r8, r22
 498:	97 2e       	mov	r9, r23
	    joystick_value = joystick_value % 100;
 49a:	a8 2e       	mov	r10, r24
 49c:	b9 2e       	mov	r11, r25
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	d0 e0       	ldi	r29, 0x00	; 0
 4a2:	8b e0       	ldi	r24, 0x0B	; 11
    }
    
    if(joystick_value > 10){
 4a4:	88 16       	cp	r8, r24
 4a6:	91 04       	cpc	r9, r1
 4a8:	a1 04       	cpc	r10, r1
 4aa:	b1 04       	cpc	r11, r1
 4ac:	6c f0       	brlt	.+26     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4ae:	c5 01       	movw	r24, r10
	    tens = joystick_value / 10;
 4b0:	b4 01       	movw	r22, r8
 4b2:	2a e0       	ldi	r18, 0x0A	; 10
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	54 d2       	rcall	.+1192   	; 0x964 <__divmodsi4>
 4bc:	c2 2f       	mov	r28, r18
	    joystick_value = joystick_value % 10;
 4be:	86 2e       	mov	r8, r22
 4c0:	97 2e       	mov	r9, r23
 4c2:	a8 2e       	mov	r10, r24
 4c4:	b9 2e       	mov	r11, r25
    }
    
	nokia_lcd_write_char(ten_millions + '0', 1);
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	80 e3       	ldi	r24, 0x30	; 48
	nokia_lcd_set_cursor(6,0);
 4ce:	85 0d       	add	r24, r5
 4d0:	65 d1       	rcall	.+714    	; 0x79c <nokia_lcd_write_char>
 4d2:	60 e0       	ldi	r22, 0x00	; 0
	nokia_lcd_write_char(millions + '0', 1);
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	1e d2       	rcall	.+1084   	; 0x914 <nokia_lcd_set_cursor>
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	80 e3       	ldi	r24, 0x30	; 48
	
	nokia_lcd_set_cursor(0,10);
 4dc:	86 0d       	add	r24, r6
 4de:	5e d1       	rcall	.+700    	; 0x79c <nokia_lcd_write_char>
 4e0:	6a e0       	ldi	r22, 0x0A	; 10
	nokia_lcd_write_char(hundred_thousands + '0', 1);
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	17 d2       	rcall	.+1070   	; 0x914 <nokia_lcd_set_cursor>
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	80 e3       	ldi	r24, 0x30	; 48
	nokia_lcd_set_cursor(6,10);
 4ea:	87 0d       	add	r24, r7
 4ec:	57 d1       	rcall	.+686    	; 0x79c <nokia_lcd_write_char>
 4ee:	6a e0       	ldi	r22, 0x0A	; 10
	nokia_lcd_write_char(ten_thousands + '0', 1);
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	10 d2       	rcall	.+1056   	; 0x914 <nokia_lcd_set_cursor>
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	80 e3       	ldi	r24, 0x30	; 48
	nokia_lcd_set_cursor(12,10);
 4f8:	80 0f       	add	r24, r16
 4fa:	50 d1       	rcall	.+672    	; 0x79c <nokia_lcd_write_char>
 4fc:	6a e0       	ldi	r22, 0x0A	; 10
	nokia_lcd_write_char(thousands + '0', 1);
 4fe:	8c e0       	ldi	r24, 0x0C	; 12
 500:	09 d2       	rcall	.+1042   	; 0x914 <nokia_lcd_set_cursor>
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	80 e3       	ldi	r24, 0x30	; 48
	
    nokia_lcd_set_cursor(0,20);
 506:	81 0f       	add	r24, r17
 508:	49 d1       	rcall	.+658    	; 0x79c <nokia_lcd_write_char>
 50a:	64 e1       	ldi	r22, 0x14	; 20
    nokia_lcd_write_char(hundreds + '0', 1);
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	02 d2       	rcall	.+1028   	; 0x914 <nokia_lcd_set_cursor>
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	80 e3       	ldi	r24, 0x30	; 48
    nokia_lcd_set_cursor(6,20);
 514:	8d 0f       	add	r24, r29
 516:	42 d1       	rcall	.+644    	; 0x79c <nokia_lcd_write_char>
 518:	64 e1       	ldi	r22, 0x14	; 20
 51a:	86 e0       	ldi	r24, 0x06	; 6
    nokia_lcd_write_char(tens + '0', 1);
 51c:	fb d1       	rcall	.+1014   	; 0x914 <nokia_lcd_set_cursor>
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	80 e3       	ldi	r24, 0x30	; 48
 522:	8c 0f       	add	r24, r28
 524:	3b d1       	rcall	.+630    	; 0x79c <nokia_lcd_write_char>
    nokia_lcd_set_cursor(12,20);
 526:	64 e1       	ldi	r22, 0x14	; 20
 528:	8c e0       	ldi	r24, 0x0C	; 12
 52a:	f4 d1       	rcall	.+1000   	; 0x914 <nokia_lcd_set_cursor>
    nokia_lcd_write_char(ones + '0', 1);
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	80 e3       	ldi	r24, 0x30	; 48
	nokia_lcd_set_cursor(0,30);
 530:	35 d1       	rcall	.+618    	; 0x79c <nokia_lcd_write_char>
 532:	6e e1       	ldi	r22, 0x1E	; 30
 534:	80 e0       	ldi	r24, 0x00	; 0
	nokia_lcd_write_string("Old Val", 1);
 536:	ee d1       	rcall	.+988    	; 0x914 <nokia_lcd_set_cursor>
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	d8 d1       	rcall	.+944    	; 0x8f0 <nokia_lcd_write_string>
    nokia_lcd_render();
 540:	ee d1       	rcall	.+988    	; 0x91e <nokia_lcd_render>
 542:	8f e4       	ldi	r24, 0x4F	; 79
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 544:	93 ec       	ldi	r25, 0xC3	; 195
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54c:	00 00       	nop
 54e:	0f 2e       	mov	r0, r31
		    
		    joystick_value = new_joy_value;
		    
		    if(joystick_value > 10000000){
			    ten_millions = joystick_value / 10000000;
			    joystick_value = joystick_value % 10000000;
 550:	f0 e8       	ldi	r31, 0x80	; 128
 552:	4f 2e       	mov	r4, r31
 554:	f6 e9       	ldi	r31, 0x96	; 150
 556:	5f 2e       	mov	r5, r31
 558:	f8 e9       	ldi	r31, 0x98	; 152
 55a:	6f 2e       	mov	r6, r31
 55c:	71 2c       	mov	r7, r1
 55e:	f0 2d       	mov	r31, r0
	
	_delay_ms(200); 
    
    while (1)
    {
		HX711_powerUp();
 560:	09 df       	rcall	.-494    	; 0x374 <HX711_powerUp>
 562:	80 e2       	ldi	r24, 0x20	; 32
		HX711_setGain(32);
 564:	a9 de       	rcall	.-686    	; 0x2b8 <HX711_setGain>
 566:	c0 de       	rcall	.-640    	; 0x2e8 <HX711_read>
 568:	6b 01       	movw	r12, r22
	    new_joy_value = HX711_read();
 56a:	7c 01       	movw	r14, r24
 56c:	f3 de       	rcall	.-538    	; 0x354 <HX711_powerDown>
 56e:	c8 14       	cp	r12, r8
 570:	d9 04       	cpc	r13, r9
		HX711_powerDown();
 572:	ea 04       	cpc	r14, r10
	    
	    if(new_joy_value != joystick_value){
 574:	fb 04       	cpc	r15, r11
 576:	a1 f3       	breq	.-24     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 578:	91 e8       	ldi	r25, 0x81	; 129
 57a:	c9 16       	cp	r12, r25
 57c:	96 e9       	ldi	r25, 0x96	; 150
		    tens = 0;
		    ones = 0;
		    
		    joystick_value = new_joy_value;
		    
		    if(joystick_value > 10000000){
 57e:	d9 06       	cpc	r13, r25
 580:	98 e9       	ldi	r25, 0x98	; 152
 582:	e9 06       	cpc	r14, r25
 584:	f1 04       	cpc	r15, r1
 586:	3c f0       	brlt	.+14     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 588:	c7 01       	movw	r24, r14
 58a:	b6 01       	movw	r22, r12
 58c:	a3 01       	movw	r20, r6
			    ten_millions = joystick_value / 10000000;
			    joystick_value = joystick_value % 10000000;
 58e:	92 01       	movw	r18, r4
 590:	e9 d1       	rcall	.+978    	; 0x964 <__divmodsi4>
 592:	6b 01       	movw	r12, r22
 594:	7c 01       	movw	r14, r24
 596:	81 e4       	ldi	r24, 0x41	; 65
 598:	c8 16       	cp	r12, r24
 59a:	82 e4       	ldi	r24, 0x42	; 66
		    }
		    
		    if(joystick_value > 1000000){
 59c:	d8 06       	cpc	r13, r24
 59e:	8f e0       	ldi	r24, 0x0F	; 15
 5a0:	e8 06       	cpc	r14, r24
 5a2:	f1 04       	cpc	r15, r1
 5a4:	4c f0       	brlt	.+18     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5a6:	c7 01       	movw	r24, r14
 5a8:	b6 01       	movw	r22, r12
 5aa:	20 e4       	ldi	r18, 0x40	; 64
			    millions = joystick_value / 1000000;
			    joystick_value = joystick_value % 1000000;
 5ac:	32 e4       	ldi	r19, 0x42	; 66
 5ae:	4f e0       	ldi	r20, 0x0F	; 15
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	d8 d1       	rcall	.+944    	; 0x964 <__divmodsi4>
 5b4:	6b 01       	movw	r12, r22
 5b6:	7c 01       	movw	r14, r24
 5b8:	91 ea       	ldi	r25, 0xA1	; 161
 5ba:	c9 16       	cp	r12, r25
 5bc:	96 e8       	ldi	r25, 0x86	; 134
		    }
		    
		    if(joystick_value > 100000){
 5be:	d9 06       	cpc	r13, r25
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	e9 06       	cpc	r14, r25
 5c4:	f1 04       	cpc	r15, r1
 5c6:	4c f0       	brlt	.+18     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5c8:	c7 01       	movw	r24, r14
 5ca:	b6 01       	movw	r22, r12
 5cc:	20 ea       	ldi	r18, 0xA0	; 160
			    hundred_thousands = joystick_value / 100000;
			    joystick_value = joystick_value % 100000;
 5ce:	36 e8       	ldi	r19, 0x86	; 134
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	c7 d1       	rcall	.+910    	; 0x964 <__divmodsi4>
 5d6:	6b 01       	movw	r12, r22
 5d8:	7c 01       	movw	r14, r24
 5da:	81 e1       	ldi	r24, 0x11	; 17
 5dc:	c8 16       	cp	r12, r24
 5de:	87 e2       	ldi	r24, 0x27	; 39
		    }
		    
		    if(joystick_value > 10000){
 5e0:	d8 06       	cpc	r13, r24
 5e2:	e1 04       	cpc	r14, r1
 5e4:	f1 04       	cpc	r15, r1
 5e6:	4c f0       	brlt	.+18     	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5e8:	c7 01       	movw	r24, r14
 5ea:	b6 01       	movw	r22, r12
			    ten_thousands = joystick_value / 10000;
			    joystick_value = joystick_value % 10000;
 5ec:	20 e1       	ldi	r18, 0x10	; 16
 5ee:	37 e2       	ldi	r19, 0x27	; 39
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	b7 d1       	rcall	.+878    	; 0x964 <__divmodsi4>
 5f6:	6b 01       	movw	r12, r22
 5f8:	7c 01       	movw	r14, r24
 5fa:	99 ee       	ldi	r25, 0xE9	; 233
 5fc:	c9 16       	cp	r12, r25
 5fe:	93 e0       	ldi	r25, 0x03	; 3
		    }
		    
		    if(joystick_value > 1000){
 600:	d9 06       	cpc	r13, r25
 602:	e1 04       	cpc	r14, r1
 604:	f1 04       	cpc	r15, r1
 606:	4c f0       	brlt	.+18     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 608:	c7 01       	movw	r24, r14
 60a:	b6 01       	movw	r22, r12
			    thousands = joystick_value / 1000;
			    joystick_value = joystick_value % 1000;
 60c:	28 ee       	ldi	r18, 0xE8	; 232
 60e:	33 e0       	ldi	r19, 0x03	; 3
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	a7 d1       	rcall	.+846    	; 0x964 <__divmodsi4>
 616:	6b 01       	movw	r12, r22
 618:	7c 01       	movw	r14, r24
 61a:	85 e6       	ldi	r24, 0x65	; 101
		    }
		    
		    if(joystick_value > 100){
 61c:	c8 16       	cp	r12, r24
 61e:	d1 04       	cpc	r13, r1
 620:	e1 04       	cpc	r14, r1
 622:	f1 04       	cpc	r15, r1
			    hundreds = joystick_value / 100;
			    joystick_value = joystick_value % 100;
 624:	4c f0       	brlt	.+18     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 626:	c7 01       	movw	r24, r14
 628:	b6 01       	movw	r22, r12
 62a:	24 e6       	ldi	r18, 0x64	; 100
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	40 e0       	ldi	r20, 0x00	; 0
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	98 d1       	rcall	.+816    	; 0x964 <__divmodsi4>
 634:	6b 01       	movw	r12, r22
 636:	7c 01       	movw	r14, r24
		    }
		    
		    if(joystick_value > 10){
 638:	9b e0       	ldi	r25, 0x0B	; 11
 63a:	c9 16       	cp	r12, r25
 63c:	d1 04       	cpc	r13, r1
 63e:	e1 04       	cpc	r14, r1
 640:	f1 04       	cpc	r15, r1
 642:	4c f0       	brlt	.+18     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
			    tens = joystick_value / 10;
			    joystick_value = joystick_value % 10;
 644:	c7 01       	movw	r24, r14
 646:	b6 01       	movw	r22, r12
 648:	2a e0       	ldi	r18, 0x0A	; 10
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	89 d1       	rcall	.+786    	; 0x964 <__divmodsi4>
 652:	6b 01       	movw	r12, r22
 654:	7c 01       	movw	r14, r24
 656:	66 d0       	rcall	.+204    	; 0x724 <nokia_lcd_clear>
		    }
		    
			nokia_lcd_clear();
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	88 e0       	ldi	r24, 0x08	; 8
			nokia_lcd_write_string("failed to",1);
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	48 d1       	rcall	.+656    	; 0x8f0 <nokia_lcd_write_string>
 660:	6a e0       	ldi	r22, 0x0A	; 10
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	57 d1       	rcall	.+686    	; 0x914 <nokia_lcd_set_cursor>
			nokia_lcd_set_cursor(0,10);
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	82 e1       	ldi	r24, 0x12	; 18
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	41 d1       	rcall	.+642    	; 0x8f0 <nokia_lcd_write_string>
			nokia_lcd_write_string("read data :(",1);
 66e:	57 d1       	rcall	.+686    	; 0x91e <nokia_lcd_render>
 670:	46 01       	movw	r8, r12
 672:	57 01       	movw	r10, r14
 674:	75 cf       	rjmp	.-278    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>

00000676 <write>:
 676:	59 98       	cbi	0x0b, 1	; 11
			nokia_lcd_render();
 678:	66 23       	and	r22, r22
 67a:	11 f0       	breq	.+4      	; 0x680 <write+0xa>
 67c:	5b 9a       	sbi	0x0b, 3	; 11
 67e:	15 c0       	rjmp	.+42     	; 0x6aa <write+0x34>
 680:	5b 98       	cbi	0x0b, 3	; 11
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 682:	13 c0       	rjmp	.+38     	; 0x6aa <write+0x34>
 684:	ac 01       	movw	r20, r24
 686:	02 2e       	mov	r0, r18
 688:	02 c0       	rjmp	.+4      	; 0x68e <write+0x18>
 68a:	55 95       	asr	r21
 68c:	47 95       	ror	r20
 68e:	0a 94       	dec	r0
 690:	e2 f7       	brpl	.-8      	; 0x68a <write+0x14>
 692:	40 ff       	sbrs	r20, 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <write+0x24>
 696:	5c 9a       	sbi	0x0b, 4	; 11
 698:	01 c0       	rjmp	.+2      	; 0x69c <write+0x26>
 69a:	5c 98       	cbi	0x0b, 4	; 11
 69c:	5d 9a       	sbi	0x0b, 5	; 11
 69e:	5d 98       	cbi	0x0b, 5	; 11
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	31 09       	sbc	r19, r1
 6a4:	78 f7       	brcc	.-34     	; 0x684 <write+0xe>
 6a6:	59 9a       	sbi	0x0b, 1	; 11
 6a8:	08 95       	ret
 6aa:	27 e0       	ldi	r18, 0x07	; 7
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	e9 cf       	rjmp	.-46     	; 0x684 <write+0xe>

000006b2 <write_cmd>:
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	e0 cf       	rjmp	.-64     	; 0x676 <write>
 6b6:	08 95       	ret

000006b8 <nokia_lcd_init>:
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	51 9a       	sbi	0x0a, 1	; 10
 6be:	52 9a       	sbi	0x0a, 2	; 10
 6c0:	53 9a       	sbi	0x0a, 3	; 10
 6c2:	54 9a       	sbi	0x0a, 4	; 10
 6c4:	55 9a       	sbi	0x0a, 5	; 10
 6c6:	5a 9a       	sbi	0x0b, 2	; 11
 6c8:	59 9a       	sbi	0x0b, 1	; 11
 6ca:	83 ec       	ldi	r24, 0xC3	; 195
 6cc:	99 e0       	ldi	r25, 0x09	; 9
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <nokia_lcd_init+0x16>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <nokia_lcd_init+0x1c>
 6d4:	00 00       	nop
 6d6:	5a 98       	cbi	0x0b, 2	; 11
 6d8:	8b e5       	ldi	r24, 0x5B	; 91
 6da:	94 e4       	ldi	r25, 0x44	; 68
 6dc:	01 97       	sbiw	r24, 0x01	; 1
 6de:	f1 f7       	brne	.-4      	; 0x6dc <nokia_lcd_init+0x24>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <nokia_lcd_init+0x2a>
 6e2:	00 00       	nop
 6e4:	5a 9a       	sbi	0x0b, 2	; 11
 6e6:	59 98       	cbi	0x0b, 1	; 11
 6e8:	81 e2       	ldi	r24, 0x21	; 33
 6ea:	e3 df       	rcall	.-58     	; 0x6b2 <write_cmd>
 6ec:	83 e1       	ldi	r24, 0x13	; 19
 6ee:	e1 df       	rcall	.-62     	; 0x6b2 <write_cmd>
 6f0:	86 e0       	ldi	r24, 0x06	; 6
 6f2:	df df       	rcall	.-66     	; 0x6b2 <write_cmd>
 6f4:	82 ec       	ldi	r24, 0xC2	; 194
 6f6:	dd df       	rcall	.-70     	; 0x6b2 <write_cmd>
 6f8:	80 e2       	ldi	r24, 0x20	; 32
 6fa:	db df       	rcall	.-74     	; 0x6b2 <write_cmd>
 6fc:	89 e0       	ldi	r24, 0x09	; 9
 6fe:	d9 df       	rcall	.-78     	; 0x6b2 <write_cmd>
 700:	80 e8       	ldi	r24, 0x80	; 128
 702:	d7 df       	rcall	.-82     	; 0x6b2 <write_cmd>
 704:	80 e4       	ldi	r24, 0x40	; 64
 706:	d5 df       	rcall	.-86     	; 0x6b2 <write_cmd>
 708:	c8 ef       	ldi	r28, 0xF8	; 248
 70a:	d1 e0       	ldi	r29, 0x01	; 1
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	b2 df       	rcall	.-156    	; 0x676 <write>
 712:	21 97       	sbiw	r28, 0x01	; 1
 714:	d9 f7       	brne	.-10     	; 0x70c <nokia_lcd_init+0x54>
 716:	88 e0       	ldi	r24, 0x08	; 8
 718:	cc df       	rcall	.-104    	; 0x6b2 <write_cmd>
 71a:	8c e0       	ldi	r24, 0x0C	; 12
 71c:	ca df       	rcall	.-108    	; 0x6b2 <write_cmd>
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <nokia_lcd_clear>:
 724:	80 e8       	ldi	r24, 0x80	; 128
 726:	c5 df       	rcall	.-118    	; 0x6b2 <write_cmd>
 728:	80 e4       	ldi	r24, 0x40	; 64
 72a:	c3 df       	rcall	.-122    	; 0x6b2 <write_cmd>
 72c:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <__data_end+0x1f8>
 730:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <__data_end+0x1f9>
 734:	e0 e2       	ldi	r30, 0x20	; 32
 736:	f1 e0       	ldi	r31, 0x01	; 1
 738:	88 e1       	ldi	r24, 0x18	; 24
 73a:	93 e0       	ldi	r25, 0x03	; 3
 73c:	11 92       	st	Z+, r1
 73e:	e8 17       	cp	r30, r24
 740:	f9 07       	cpc	r31, r25
 742:	e1 f7       	brne	.-8      	; 0x73c <nokia_lcd_clear+0x18>
 744:	08 95       	ret

00000746 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 746:	26 2f       	mov	r18, r22
 748:	26 95       	lsr	r18
 74a:	26 95       	lsr	r18
 74c:	26 95       	lsr	r18
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	34 e5       	ldi	r19, 0x54	; 84
 752:	23 9f       	mul	r18, r19
 754:	80 0d       	add	r24, r0
 756:	91 1d       	adc	r25, r1
 758:	11 24       	eor	r1, r1
	if (value)
 75a:	44 23       	and	r20, r20
 75c:	79 f0       	breq	.+30     	; 0x77c <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 75e:	fc 01       	movw	r30, r24
 760:	e0 5e       	subi	r30, 0xE0	; 224
 762:	fe 4f       	sbci	r31, 0xFE	; 254
 764:	67 70       	andi	r22, 0x07	; 7
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <nokia_lcd_set_pixel+0x2a>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	6a 95       	dec	r22
 772:	e2 f7       	brpl	.-8      	; 0x76c <nokia_lcd_set_pixel+0x26>
 774:	90 81       	ld	r25, Z
 776:	89 2b       	or	r24, r25
 778:	80 83       	st	Z, r24
 77a:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 77c:	fc 01       	movw	r30, r24
 77e:	e0 5e       	subi	r30, 0xE0	; 224
 780:	fe 4f       	sbci	r31, 0xFE	; 254
 782:	67 70       	andi	r22, 0x07	; 7
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <nokia_lcd_set_pixel+0x48>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	6a 95       	dec	r22
 790:	e2 f7       	brpl	.-8      	; 0x78a <nokia_lcd_set_pixel+0x44>
 792:	80 95       	com	r24
 794:	90 81       	ld	r25, Z
 796:	89 23       	and	r24, r25
 798:	80 83       	st	Z, r24
 79a:	08 95       	ret

0000079c <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 79c:	5f 92       	push	r5
 79e:	6f 92       	push	r6
 7a0:	7f 92       	push	r7
 7a2:	8f 92       	push	r8
 7a4:	9f 92       	push	r9
 7a6:	af 92       	push	r10
 7a8:	bf 92       	push	r11
 7aa:	cf 92       	push	r12
 7ac:	df 92       	push	r13
 7ae:	ef 92       	push	r14
 7b0:	ff 92       	push	r15
 7b2:	0f 93       	push	r16
 7b4:	1f 93       	push	r17
 7b6:	cf 93       	push	r28
 7b8:	df 93       	push	r29
 7ba:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 7bc:	26 2f       	mov	r18, r22
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	49 01       	movw	r8, r18
 7c2:	88 0c       	add	r8, r8
 7c4:	99 1c       	adc	r9, r9
 7c6:	88 0c       	add	r8, r8
 7c8:	99 1c       	adc	r9, r9
 7ca:	82 0e       	add	r8, r18
 7cc:	93 1e       	adc	r9, r19
 7ce:	18 14       	cp	r1, r8
 7d0:	19 04       	cpc	r1, r9
 7d2:	0c f0       	brlt	.+2      	; 0x7d6 <nokia_lcd_write_char+0x3a>
 7d4:	59 c0       	rjmp	.+178    	; 0x888 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
 7d6:	89 01       	movw	r16, r18
 7d8:	00 0f       	add	r16, r16
 7da:	11 1f       	adc	r17, r17
 7dc:	00 0f       	add	r16, r16
 7de:	11 1f       	adc	r17, r17
 7e0:	00 0f       	add	r16, r16
 7e2:	11 1f       	adc	r17, r17
 7e4:	02 1b       	sub	r16, r18
 7e6:	13 0b       	sbc	r17, r19
 7e8:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 7ea:	a8 2e       	mov	r10, r24
 7ec:	b1 2c       	mov	r11, r1
 7ee:	c5 01       	movw	r24, r10
 7f0:	80 97       	sbiw	r24, 0x20	; 32
 7f2:	5c 01       	movw	r10, r24
 7f4:	aa 0c       	add	r10, r10
 7f6:	bb 1c       	adc	r11, r11
 7f8:	aa 0c       	add	r10, r10
 7fa:	bb 1c       	adc	r11, r11
 7fc:	a8 0e       	add	r10, r24
 7fe:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 800:	0f 2e       	mov	r0, r31
 802:	f9 e1       	ldi	r31, 0x19	; 25
 804:	cf 2e       	mov	r12, r31
 806:	f3 e0       	ldi	r31, 0x03	; 3
 808:	df 2e       	mov	r13, r31
 80a:	f0 2d       	mov	r31, r0
 80c:	0f 2e       	mov	r0, r31
 80e:	f8 e1       	ldi	r31, 0x18	; 24
 810:	ef 2e       	mov	r14, r31
 812:	f3 e0       	ldi	r31, 0x03	; 3
 814:	ff 2e       	mov	r15, r31
 816:	f0 2d       	mov	r31, r0
 818:	2a c0       	rjmp	.+84     	; 0x86e <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 81a:	fe 01       	movw	r30, r28
 81c:	24 91       	lpm	r18, Z
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	87 2d       	mov	r24, r7
 822:	65 2d       	mov	r22, r5
 824:	93 d0       	rcall	.+294    	; 0x94c <__udivmodqi4>
 826:	02 c0       	rjmp	.+4      	; 0x82c <nokia_lcd_write_char+0x90>
 828:	35 95       	asr	r19
 82a:	27 95       	ror	r18
 82c:	8a 95       	dec	r24
 82e:	e2 f7       	brpl	.-8      	; 0x828 <nokia_lcd_write_char+0x8c>
 830:	20 ff       	sbrs	r18, 0
 832:	09 c0       	rjmp	.+18     	; 0x846 <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 834:	f6 01       	movw	r30, r12
 836:	60 81       	ld	r22, Z
 838:	67 0d       	add	r22, r7
 83a:	f7 01       	movw	r30, r14
 83c:	80 81       	ld	r24, Z
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	86 0d       	add	r24, r6
 842:	81 df       	rcall	.-254    	; 0x746 <nokia_lcd_set_pixel>
 844:	08 c0       	rjmp	.+16     	; 0x856 <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 846:	f6 01       	movw	r30, r12
 848:	60 81       	ld	r22, Z
 84a:	67 0d       	add	r22, r7
 84c:	f7 01       	movw	r30, r14
 84e:	80 81       	ld	r24, Z
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	86 0d       	add	r24, r6
 854:	78 df       	rcall	.-272    	; 0x746 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 856:	73 94       	inc	r7
 858:	87 2d       	mov	r24, r7
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	80 17       	cp	r24, r16
 85e:	91 07       	cpc	r25, r17
 860:	e4 f2       	brlt	.-72     	; 0x81a <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 862:	63 94       	inc	r6
 864:	86 2d       	mov	r24, r6
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	88 15       	cp	r24, r8
 86a:	99 05       	cpc	r25, r9
 86c:	6c f4       	brge	.+26     	; 0x888 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
 86e:	10 16       	cp	r1, r16
 870:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 872:	bc f7       	brge	.-18     	; 0x862 <nokia_lcd_write_char+0xc6>
 874:	86 2d       	mov	r24, r6
 876:	65 2d       	mov	r22, r5
 878:	69 d0       	rcall	.+210    	; 0x94c <__udivmodqi4>
 87a:	e5 01       	movw	r28, r10
 87c:	c8 0f       	add	r28, r24
 87e:	d1 1d       	adc	r29, r1
 880:	c4 57       	subi	r28, 0x74	; 116
 882:	df 4f       	sbci	r29, 0xFF	; 255
 884:	71 2c       	mov	r7, r1
 886:	c9 cf       	rjmp	.-110    	; 0x81a <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 888:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__data_end+0x1f8>
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	98 0f       	add	r25, r24
 890:	85 2d       	mov	r24, r5
 892:	88 0f       	add	r24, r24
 894:	88 0f       	add	r24, r24
 896:	85 0d       	add	r24, r5
 898:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
 89a:	84 35       	cpi	r24, 0x54	; 84
 89c:	18 f4       	brcc	.+6      	; 0x8a4 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 89e:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__data_end+0x1f8>
 8a2:	0e c0       	rjmp	.+28     	; 0x8c0 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
 8a4:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <__data_end+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
 8a8:	e9 e1       	ldi	r30, 0x19	; 25
 8aa:	f3 e0       	ldi	r31, 0x03	; 3
 8ac:	80 81       	ld	r24, Z
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	98 0f       	add	r25, r24
 8b2:	85 2d       	mov	r24, r5
 8b4:	88 0f       	add	r24, r24
 8b6:	88 0f       	add	r24, r24
 8b8:	88 0f       	add	r24, r24
 8ba:	85 19       	sub	r24, r5
 8bc:	89 0f       	add	r24, r25
 8be:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 8c0:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <__data_end+0x1f9>
 8c4:	80 33       	cpi	r24, 0x30	; 48
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
 8c8:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <__data_end+0x1f8>
		nokia_lcd.cursor_y = 0;
 8cc:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <__data_end+0x1f9>
	}
}
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	ff 90       	pop	r15
 8da:	ef 90       	pop	r14
 8dc:	df 90       	pop	r13
 8de:	cf 90       	pop	r12
 8e0:	bf 90       	pop	r11
 8e2:	af 90       	pop	r10
 8e4:	9f 90       	pop	r9
 8e6:	8f 90       	pop	r8
 8e8:	7f 90       	pop	r7
 8ea:	6f 90       	pop	r6
 8ec:	5f 90       	pop	r5
 8ee:	08 95       	ret

000008f0 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 8f0:	1f 93       	push	r17
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	ec 01       	movw	r28, r24
	while(*str)
 8f8:	88 81       	ld	r24, Y
 8fa:	88 23       	and	r24, r24
 8fc:	39 f0       	breq	.+14     	; 0x90c <nokia_lcd_write_string+0x1c>
 8fe:	16 2f       	mov	r17, r22
 900:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
 902:	61 2f       	mov	r22, r17
 904:	4b df       	rcall	.-362    	; 0x79c <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 906:	89 91       	ld	r24, Y+
 908:	81 11       	cpse	r24, r1
 90a:	fb cf       	rjmp	.-10     	; 0x902 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	08 95       	ret

00000914 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 914:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <__data_end+0x1f8>
	nokia_lcd.cursor_y = y;
 918:	60 93 19 03 	sts	0x0319, r22	; 0x800319 <__data_end+0x1f9>
 91c:	08 95       	ret

0000091e <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 926:	80 e8       	ldi	r24, 0x80	; 128
 928:	c4 de       	rcall	.-632    	; 0x6b2 <write_cmd>
	write_cmd(0x40);
 92a:	80 e4       	ldi	r24, 0x40	; 64
 92c:	c2 de       	rcall	.-636    	; 0x6b2 <write_cmd>
 92e:	c0 e2       	ldi	r28, 0x20	; 32
 930:	d1 e0       	ldi	r29, 0x01	; 1
 932:	08 e1       	ldi	r16, 0x18	; 24
 934:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 936:	61 e0       	ldi	r22, 0x01	; 1
 938:	89 91       	ld	r24, Y+
 93a:	9d de       	rcall	.-710    	; 0x676 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 93c:	c0 17       	cp	r28, r16
 93e:	d1 07       	cpc	r29, r17
 940:	d1 f7       	brne	.-12     	; 0x936 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	1f 91       	pop	r17
 948:	0f 91       	pop	r16
 94a:	08 95       	ret

0000094c <__udivmodqi4>:
 94c:	99 1b       	sub	r25, r25
 94e:	79 e0       	ldi	r23, 0x09	; 9
 950:	04 c0       	rjmp	.+8      	; 0x95a <__udivmodqi4_ep>

00000952 <__udivmodqi4_loop>:
 952:	99 1f       	adc	r25, r25
 954:	96 17       	cp	r25, r22
 956:	08 f0       	brcs	.+2      	; 0x95a <__udivmodqi4_ep>
 958:	96 1b       	sub	r25, r22

0000095a <__udivmodqi4_ep>:
 95a:	88 1f       	adc	r24, r24
 95c:	7a 95       	dec	r23
 95e:	c9 f7       	brne	.-14     	; 0x952 <__udivmodqi4_loop>
 960:	80 95       	com	r24
 962:	08 95       	ret

00000964 <__divmodsi4>:
 964:	05 2e       	mov	r0, r21
 966:	97 fb       	bst	r25, 7
 968:	16 f4       	brtc	.+4      	; 0x96e <__divmodsi4+0xa>
 96a:	00 94       	com	r0
 96c:	0f d0       	rcall	.+30     	; 0x98c <__negsi2>
 96e:	57 fd       	sbrc	r21, 7
 970:	05 d0       	rcall	.+10     	; 0x97c <__divmodsi4_neg2>
 972:	14 d0       	rcall	.+40     	; 0x99c <__udivmodsi4>
 974:	07 fc       	sbrc	r0, 7
 976:	02 d0       	rcall	.+4      	; 0x97c <__divmodsi4_neg2>
 978:	46 f4       	brtc	.+16     	; 0x98a <__divmodsi4_exit>
 97a:	08 c0       	rjmp	.+16     	; 0x98c <__negsi2>

0000097c <__divmodsi4_neg2>:
 97c:	50 95       	com	r21
 97e:	40 95       	com	r20
 980:	30 95       	com	r19
 982:	21 95       	neg	r18
 984:	3f 4f       	sbci	r19, 0xFF	; 255
 986:	4f 4f       	sbci	r20, 0xFF	; 255
 988:	5f 4f       	sbci	r21, 0xFF	; 255

0000098a <__divmodsi4_exit>:
 98a:	08 95       	ret

0000098c <__negsi2>:
 98c:	90 95       	com	r25
 98e:	80 95       	com	r24
 990:	70 95       	com	r23
 992:	61 95       	neg	r22
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	08 95       	ret

0000099c <__udivmodsi4>:
 99c:	a1 e2       	ldi	r26, 0x21	; 33
 99e:	1a 2e       	mov	r1, r26
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	fd 01       	movw	r30, r26
 9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <__udivmodsi4_ep>

000009a8 <__udivmodsi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	ee 1f       	adc	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	a2 17       	cp	r26, r18
 9b2:	b3 07       	cpc	r27, r19
 9b4:	e4 07       	cpc	r30, r20
 9b6:	f5 07       	cpc	r31, r21
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__udivmodsi4_ep>
 9ba:	a2 1b       	sub	r26, r18
 9bc:	b3 0b       	sbc	r27, r19
 9be:	e4 0b       	sbc	r30, r20
 9c0:	f5 0b       	sbc	r31, r21

000009c2 <__udivmodsi4_ep>:
 9c2:	66 1f       	adc	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a 94       	dec	r1
 9cc:	69 f7       	brne	.-38     	; 0x9a8 <__udivmodsi4_loop>
 9ce:	60 95       	com	r22
 9d0:	70 95       	com	r23
 9d2:	80 95       	com	r24
 9d4:	90 95       	com	r25
 9d6:	9b 01       	movw	r18, r22
 9d8:	ac 01       	movw	r20, r24
 9da:	bd 01       	movw	r22, r26
 9dc:	cf 01       	movw	r24, r30
 9de:	08 95       	ret

000009e0 <_exit>:
 9e0:	f8 94       	cli

000009e2 <__stop_program>:
 9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <__stop_program>
