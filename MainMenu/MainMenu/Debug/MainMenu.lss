
MainMenu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800100  00001b4e  00001be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000849  00800260  00800260  00001d42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003781  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f8  00000000  00000000  000057bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002121  00000000  00000000  000069b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00008ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010fd  00000000  00000000  00009188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a95  00000000  00000000  0000a285  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000bd1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c1       	rjmp	.+666    	; 0x29c <__ctors_end>
       2:	00 00       	nop
       4:	69 c1       	rjmp	.+722    	; 0x2d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c1       	rjmp	.+718    	; 0x2d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c1       	rjmp	.+714    	; 0x2d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c1       	rjmp	.+710    	; 0x2d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c1       	rjmp	.+706    	; 0x2d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c1       	rjmp	.+702    	; 0x2d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c1       	rjmp	.+698    	; 0x2d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c1       	rjmp	.+694    	; 0x2d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c1       	rjmp	.+690    	; 0x2d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c1       	rjmp	.+686    	; 0x2d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c1       	rjmp	.+682    	; 0x2d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c1       	rjmp	.+678    	; 0x2d8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_13>
      38:	4f c1       	rjmp	.+670    	; 0x2d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c1       	rjmp	.+666    	; 0x2d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c1       	rjmp	.+662    	; 0x2d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c1       	rjmp	.+658    	; 0x2d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c1       	rjmp	.+654    	; 0x2d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c1       	rjmp	.+650    	; 0x2d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c1       	rjmp	.+646    	; 0x2d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c1       	rjmp	.+642    	; 0x2d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c1       	rjmp	.+638    	; 0x2d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c1       	rjmp	.+634    	; 0x2d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c1       	rjmp	.+630    	; 0x2d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c1       	rjmp	.+626    	; 0x2d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c1       	rjmp	.+622    	; 0x2d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c1       	rjmp	.+618    	; 0x2d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c1       	rjmp	.+614    	; 0x2d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c1       	rjmp	.+610    	; 0x2d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c1       	rjmp	.+606    	; 0x2d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c1       	rjmp	.+602    	; 0x2d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c1       	rjmp	.+598    	; 0x2d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c1       	rjmp	.+594    	; 0x2d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c1       	rjmp	.+590    	; 0x2d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3b 04       	cpc	r3, r11
      8e:	49 04       	cpc	r4, r9
      90:	57 04       	cpc	r5, r7
      92:	65 04       	cpc	r6, r5
      94:	73 04       	cpc	r7, r3
      96:	81 04       	cpc	r8, r1
      98:	8f 04       	cpc	r8, r15
      9a:	9d 04       	cpc	r9, r13
      9c:	ab 04       	cpc	r10, r11
      9e:	b9 04       	cpc	r11, r9
      a0:	c7 04       	cpc	r12, r7
      a2:	d5 04       	cpc	r13, r5
      a4:	ef 04       	cpc	r14, r15
      a6:	1f 05       	cpc	r17, r15
      a8:	32 05       	cpc	r19, r2
      aa:	45 05       	cpc	r20, r5
      ac:	79 05       	cpc	r23, r9
      ae:	a2 05       	cpc	r26, r2
      b0:	b5 05       	cpc	r27, r5
      b2:	c8 05       	cpc	r28, r8
      b4:	fd 05       	cpc	r31, r13
      b6:	05 06       	cpc	r0, r21
      b8:	18 06       	cpc	r1, r24
      ba:	2a 06       	cpc	r2, r26

000000bc <CHARSET>:
      bc:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      cc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      dc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      ec:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      fc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     10c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     11c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     12c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     13c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     14c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     15c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     16c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     17c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     18c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     19c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1ac:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1bc:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1cc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1dc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1ec:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1fc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     20c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     21c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     22c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     23c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     24c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     25c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     26c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     27c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     28c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000029c <__ctors_end>:
     29c:	11 24       	eor	r1, r1
     29e:	1f be       	out	0x3f, r1	; 63
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
     2a2:	d0 e4       	ldi	r29, 0x40	; 64
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	cd bf       	out	0x3d, r28	; 61

000002a8 <__do_copy_data>:
     2a8:	12 e0       	ldi	r17, 0x02	; 2
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	ee e4       	ldi	r30, 0x4E	; 78
     2b0:	fb e1       	ldi	r31, 0x1B	; 27
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a0 36       	cpi	r26, 0x60	; 96
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	2a e0       	ldi	r18, 0x0A	; 10
     2c4:	a0 e6       	ldi	r26, 0x60	; 96
     2c6:	b2 e0       	ldi	r27, 0x02	; 2
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	a9 3a       	cpi	r26, 0xA9	; 169
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>
     2d2:	aa d5       	rcall	.+2900   	; 0xe28 <main>
     2d4:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <_exit>

000002d8 <__bad_interrupt>:
     2d8:	93 ce       	rjmp	.-730    	; 0x0 <__vectors>

000002da <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     2e0:	0e 94 49 0b 	call	0x1692	; 0x1692 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     2e4:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__data_end>
     2e8:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__data_end+0x1>
     2ec:	c9 01       	movw	r24, r18
     2ee:	8c 0f       	add	r24, r28
     2f0:	9d 1f       	adc	r25, r29
     2f2:	8c 3d       	cpi	r24, 0xDC	; 220
     2f4:	45 e0       	ldi	r20, 0x05	; 5
     2f6:	94 07       	cpc	r25, r20
     2f8:	58 f4       	brcc	.+22     	; 0x310 <pvPortMalloc+0x36>
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	58 f4       	brcc	.+22     	; 0x316 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     300:	e9 01       	movw	r28, r18
     302:	ce 59       	subi	r28, 0x9E	; 158
     304:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
     306:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__data_end+0x1>
     30a:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
     30e:	05 c0       	rjmp	.+10     	; 0x31a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     310:	c0 e0       	ldi	r28, 0x00	; 0
     312:	d0 e0       	ldi	r29, 0x00	; 0
     314:	02 c0       	rjmp	.+4      	; 0x31a <pvPortMalloc+0x40>
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     31a:	0e 94 13 0c 	call	0x1826	; 0x1826 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     31e:	ce 01       	movw	r24, r28
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     326:	08 95       	ret

00000328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     328:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     32a:	03 96       	adiw	r24, 0x03	; 3
     32c:	92 83       	std	Z+2, r25	; 0x02
     32e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     330:	2f ef       	ldi	r18, 0xFF	; 255
     332:	3f ef       	ldi	r19, 0xFF	; 255
     334:	34 83       	std	Z+4, r19	; 0x04
     336:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     338:	96 83       	std	Z+6, r25	; 0x06
     33a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     33c:	90 87       	std	Z+8, r25	; 0x08
     33e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     340:	10 82       	st	Z, r1
     342:	08 95       	ret

00000344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     344:	fc 01       	movw	r30, r24
     346:	11 86       	std	Z+9, r1	; 0x09
     348:	10 86       	std	Z+8, r1	; 0x08
     34a:	08 95       	ret

0000034c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	fc 01       	movw	r30, r24
     352:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     354:	21 81       	ldd	r18, Z+1	; 0x01
     356:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     358:	e9 01       	movw	r28, r18
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	9b 81       	ldd	r25, Y+3	; 0x03
     35e:	13 96       	adiw	r26, 0x03	; 3
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
     364:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     366:	81 81       	ldd	r24, Z+1	; 0x01
     368:	92 81       	ldd	r25, Z+2	; 0x02
     36a:	15 96       	adiw	r26, 0x05	; 5
     36c:	9c 93       	st	X, r25
     36e:	8e 93       	st	-X, r24
     370:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	9b 81       	ldd	r25, Y+3	; 0x03
     376:	ec 01       	movw	r28, r24
     378:	7d 83       	std	Y+5, r23	; 0x05
     37a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     37c:	e9 01       	movw	r28, r18
     37e:	7b 83       	std	Y+3, r23	; 0x03
     380:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     382:	72 83       	std	Z+2, r23	; 0x02
     384:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     386:	19 96       	adiw	r26, 0x09	; 9
     388:	fc 93       	st	X, r31
     38a:	ee 93       	st	-X, r30
     38c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     38e:	80 81       	ld	r24, Z
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 83       	st	Z, r24
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     3a0:	48 81       	ld	r20, Y
     3a2:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     3a4:	4f 3f       	cpi	r20, 0xFF	; 255
     3a6:	2f ef       	ldi	r18, 0xFF	; 255
     3a8:	52 07       	cpc	r21, r18
     3aa:	31 f4       	brne	.+12     	; 0x3b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     3ac:	dc 01       	movw	r26, r24
     3ae:	17 96       	adiw	r26, 0x07	; 7
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	18 97       	sbiw	r26, 0x08	; 8
     3b6:	17 c0       	rjmp	.+46     	; 0x3e6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     3b8:	fc 01       	movw	r30, r24
     3ba:	33 96       	adiw	r30, 0x03	; 3
     3bc:	dc 01       	movw	r26, r24
     3be:	15 96       	adiw	r26, 0x05	; 5
     3c0:	2d 91       	ld	r18, X+
     3c2:	3c 91       	ld	r19, X
     3c4:	16 97       	sbiw	r26, 0x06	; 6
     3c6:	d9 01       	movw	r26, r18
     3c8:	2d 91       	ld	r18, X+
     3ca:	3c 91       	ld	r19, X
     3cc:	42 17       	cp	r20, r18
     3ce:	53 07       	cpc	r21, r19
     3d0:	50 f0       	brcs	.+20     	; 0x3e6 <vListInsert+0x4c>
     3d2:	02 80       	ldd	r0, Z+2	; 0x02
     3d4:	f3 81       	ldd	r31, Z+3	; 0x03
     3d6:	e0 2d       	mov	r30, r0
     3d8:	a2 81       	ldd	r26, Z+2	; 0x02
     3da:	b3 81       	ldd	r27, Z+3	; 0x03
     3dc:	2d 91       	ld	r18, X+
     3de:	3c 91       	ld	r19, X
     3e0:	42 17       	cp	r20, r18
     3e2:	53 07       	cpc	r21, r19
     3e4:	b0 f7       	brcc	.-20     	; 0x3d2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     3e6:	a2 81       	ldd	r26, Z+2	; 0x02
     3e8:	b3 81       	ldd	r27, Z+3	; 0x03
     3ea:	bb 83       	std	Y+3, r27	; 0x03
     3ec:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     3ee:	15 96       	adiw	r26, 0x05	; 5
     3f0:	dc 93       	st	X, r29
     3f2:	ce 93       	st	-X, r28
     3f4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     3f6:	fd 83       	std	Y+5, r31	; 0x05
     3f8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     3fa:	d3 83       	std	Z+3, r29	; 0x03
     3fc:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     3fe:	99 87       	std	Y+9, r25	; 0x09
     400:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     402:	fc 01       	movw	r30, r24
     404:	20 81       	ld	r18, Z
     406:	2f 5f       	subi	r18, 0xFF	; 255
     408:	20 83       	st	Z, r18
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     410:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     412:	a2 81       	ldd	r26, Z+2	; 0x02
     414:	b3 81       	ldd	r27, Z+3	; 0x03
     416:	84 81       	ldd	r24, Z+4	; 0x04
     418:	95 81       	ldd	r25, Z+5	; 0x05
     41a:	15 96       	adiw	r26, 0x05	; 5
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
     420:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     422:	a4 81       	ldd	r26, Z+4	; 0x04
     424:	b5 81       	ldd	r27, Z+5	; 0x05
     426:	82 81       	ldd	r24, Z+2	; 0x02
     428:	93 81       	ldd	r25, Z+3	; 0x03
     42a:	13 96       	adiw	r26, 0x03	; 3
     42c:	9c 93       	st	X, r25
     42e:	8e 93       	st	-X, r24
     430:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     432:	a0 85       	ldd	r26, Z+8	; 0x08
     434:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	8d 91       	ld	r24, X+
     43a:	9c 91       	ld	r25, X
     43c:	12 97       	sbiw	r26, 0x02	; 2
     43e:	e8 17       	cp	r30, r24
     440:	f9 07       	cpc	r31, r25
     442:	31 f4       	brne	.+12     	; 0x450 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     444:	84 81       	ldd	r24, Z+4	; 0x04
     446:	95 81       	ldd	r25, Z+5	; 0x05
     448:	12 96       	adiw	r26, 0x02	; 2
     44a:	9c 93       	st	X, r25
     44c:	8e 93       	st	-X, r24
     44e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     450:	11 86       	std	Z+9, r1	; 0x09
     452:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     454:	8c 91       	ld	r24, X
     456:	81 50       	subi	r24, 0x01	; 1
     458:	8c 93       	st	X, r24
     45a:	08 95       	ret

0000045c <main_menu_display>:
////////// Adding A User State Machine //////////
 
enum AddUser {userinit, name, weight, height, gender, password, confirm,} adduser_state;

void AddUser_Init(){
	adduser_state = userinit;
     45c:	4c d5       	rcall	.+2712   	; 0xef6 <nokia_lcd_clear>
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	8e e7       	ldi	r24, 0x7E	; 126
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	2e d6       	rcall	.+3164   	; 0x10c2 <nokia_lcd_write_string>
     466:	6a e0       	ldi	r22, 0x0A	; 10
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	3d d6       	rcall	.+3194   	; 0x10e6 <nokia_lcd_set_cursor>
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	80 e4       	ldi	r24, 0x40	; 64
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	27 d6       	rcall	.+3150   	; 0x10c2 <nokia_lcd_write_string>
     474:	64 e1       	ldi	r22, 0x14	; 20
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	36 d6       	rcall	.+3180   	; 0x10e6 <nokia_lcd_set_cursor>
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	8a e4       	ldi	r24, 0x4A	; 74
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	20 d6       	rcall	.+3136   	; 0x10c2 <nokia_lcd_write_string>
     482:	6e e1       	ldi	r22, 0x1E	; 30
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	2f d6       	rcall	.+3166   	; 0x10e6 <nokia_lcd_set_cursor>
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	82 e5       	ldi	r24, 0x52	; 82
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	19 d6       	rcall	.+3122   	; 0x10c2 <nokia_lcd_write_string>
     490:	2f c6       	rjmp	.+3166   	; 0x10f0 <nokia_lcd_render>
     492:	08 95       	ret

00000494 <settings_submenu_display>:
     494:	30 d5       	rcall	.+2656   	; 0xef6 <nokia_lcd_clear>
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	85 e5       	ldi	r24, 0x55	; 85
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	12 d6       	rcall	.+3108   	; 0x10c2 <nokia_lcd_write_string>
     49e:	6a e0       	ldi	r22, 0x0A	; 10
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	21 d6       	rcall	.+3138   	; 0x10e6 <nokia_lcd_set_cursor>
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	8e e5       	ldi	r24, 0x5E	; 94
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0b d6       	rcall	.+3094   	; 0x10c2 <nokia_lcd_write_string>
     4ac:	64 e1       	ldi	r22, 0x14	; 20
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	1a d6       	rcall	.+3124   	; 0x10e6 <nokia_lcd_set_cursor>
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	88 e6       	ldi	r24, 0x68	; 104
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	04 d6       	rcall	.+3080   	; 0x10c2 <nokia_lcd_write_string>
     4ba:	6e e1       	ldi	r22, 0x1E	; 30
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	13 d6       	rcall	.+3110   	; 0x10e6 <nokia_lcd_set_cursor>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	81 e7       	ldi	r24, 0x71	; 113
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	fd d5       	rcall	.+3066   	; 0x10c2 <nokia_lcd_write_string>
     4c8:	68 e2       	ldi	r22, 0x28	; 40
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	0c d6       	rcall	.+3096   	; 0x10e6 <nokia_lcd_set_cursor>
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	8b e7       	ldi	r24, 0x7B	; 123
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	f6 d5       	rcall	.+3052   	; 0x10c2 <nokia_lcd_write_string>
     4d6:	0c c6       	rjmp	.+3096   	; 0x10f0 <nokia_lcd_render>
     4d8:	08 95       	ret

000004da <drinks_submenu_display>:
     4da:	0d d5       	rcall	.+2586   	; 0xef6 <nokia_lcd_clear>
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	81 e6       	ldi	r24, 0x61	; 97
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	ef d5       	rcall	.+3038   	; 0x10c2 <nokia_lcd_write_string>
     4e4:	6a e0       	ldi	r22, 0x0A	; 10
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	fe d5       	rcall	.+3068   	; 0x10e6 <nokia_lcd_set_cursor>
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	88 e8       	ldi	r24, 0x88	; 136
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	e8 d5       	rcall	.+3024   	; 0x10c2 <nokia_lcd_write_string>
     4f2:	64 e1       	ldi	r22, 0x14	; 20
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	f7 d5       	rcall	.+3054   	; 0x10e6 <nokia_lcd_set_cursor>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	85 e9       	ldi	r24, 0x95	; 149
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	e1 d5       	rcall	.+3010   	; 0x10c2 <nokia_lcd_write_string>
     500:	6e e1       	ldi	r22, 0x1E	; 30
     502:	84 e1       	ldi	r24, 0x14	; 20
     504:	f0 d5       	rcall	.+3040   	; 0x10e6 <nokia_lcd_set_cursor>
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	8f e8       	ldi	r24, 0x8F	; 143
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	da d5       	rcall	.+2996   	; 0x10c2 <nokia_lcd_write_string>
     50e:	f0 c5       	rjmp	.+3040   	; 0x10f0 <nokia_lcd_render>
     510:	08 95       	ret

00000512 <user_submenu_display>:
     512:	f1 d4       	rcall	.+2530   	; 0xef6 <nokia_lcd_clear>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8b e6       	ldi	r24, 0x6B	; 107
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	d3 d5       	rcall	.+2982   	; 0x10c2 <nokia_lcd_write_string>
     51c:	6a e0       	ldi	r22, 0x0A	; 10
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	e2 d5       	rcall	.+3012   	; 0x10e6 <nokia_lcd_set_cursor>
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	80 ea       	ldi	r24, 0xA0	; 160
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	cc d5       	rcall	.+2968   	; 0x10c2 <nokia_lcd_write_string>
     52a:	64 e1       	ldi	r22, 0x14	; 20
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	db d5       	rcall	.+2998   	; 0x10e6 <nokia_lcd_set_cursor>
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	8c ea       	ldi	r24, 0xAC	; 172
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	c5 d5       	rcall	.+2954   	; 0x10c2 <nokia_lcd_write_string>
     538:	6e e1       	ldi	r22, 0x1E	; 30
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	d4 d5       	rcall	.+2984   	; 0x10e6 <nokia_lcd_set_cursor>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	8b eb       	ldi	r24, 0xBB	; 187
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	be d5       	rcall	.+2940   	; 0x10c2 <nokia_lcd_write_string>
     546:	68 e2       	ldi	r22, 0x28	; 40
     548:	83 e2       	ldi	r24, 0x23	; 35
     54a:	cd d5       	rcall	.+2970   	; 0x10e6 <nokia_lcd_set_cursor>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	84 ec       	ldi	r24, 0xC4	; 196
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	b7 d5       	rcall	.+2926   	; 0x10c2 <nokia_lcd_write_string>
     554:	cd c5       	rjmp	.+2970   	; 0x10f0 <nokia_lcd_render>
     556:	08 95       	ret

00000558 <adduser_name_display>:
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
     55e:	cb d4       	rcall	.+2454   	; 0xef6 <nokia_lcd_clear>
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	8d ec       	ldi	r24, 0xCD	; 205
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	ad d5       	rcall	.+2906   	; 0x10c2 <nokia_lcd_write_string>
     568:	6a e0       	ldi	r22, 0x0A	; 10
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	bc d5       	rcall	.+2936   	; 0x10e6 <nokia_lcd_set_cursor>
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	ce 01       	movw	r24, r28
     572:	a7 d5       	rcall	.+2894   	; 0x10c2 <nokia_lcd_write_string>
     574:	bd d5       	rcall	.+2938   	; 0x10f0 <nokia_lcd_render>
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <GetKeypadKey>:
     57c:	8e ef       	ldi	r24, 0xFE	; 254
     57e:	88 b9       	out	0x08, r24	; 8
     580:	00 00       	nop
     582:	86 b1       	in	r24, 0x06	; 6
     584:	80 95       	com	r24
     586:	84 fd       	sbrc	r24, 4
     588:	46 c0       	rjmp	.+140    	; 0x616 <GetKeypadKey+0x9a>
     58a:	86 b1       	in	r24, 0x06	; 6
     58c:	80 95       	com	r24
     58e:	85 fd       	sbrc	r24, 5
     590:	44 c0       	rjmp	.+136    	; 0x61a <GetKeypadKey+0x9e>
     592:	86 b1       	in	r24, 0x06	; 6
     594:	80 95       	com	r24
     596:	86 fd       	sbrc	r24, 6
     598:	42 c0       	rjmp	.+132    	; 0x61e <GetKeypadKey+0xa2>
     59a:	86 b1       	in	r24, 0x06	; 6
     59c:	80 95       	com	r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	88 0f       	add	r24, r24
     5a2:	89 2f       	mov	r24, r25
     5a4:	88 1f       	adc	r24, r24
     5a6:	99 0b       	sbc	r25, r25
     5a8:	91 95       	neg	r25
     5aa:	89 2b       	or	r24, r25
     5ac:	d1 f5       	brne	.+116    	; 0x622 <GetKeypadKey+0xa6>
     5ae:	8d ef       	ldi	r24, 0xFD	; 253
     5b0:	88 b9       	out	0x08, r24	; 8
     5b2:	00 00       	nop
     5b4:	86 b1       	in	r24, 0x06	; 6
     5b6:	80 95       	com	r24
     5b8:	84 fd       	sbrc	r24, 4
     5ba:	35 c0       	rjmp	.+106    	; 0x626 <GetKeypadKey+0xaa>
     5bc:	86 b1       	in	r24, 0x06	; 6
     5be:	80 95       	com	r24
     5c0:	85 fd       	sbrc	r24, 5
     5c2:	33 c0       	rjmp	.+102    	; 0x62a <GetKeypadKey+0xae>
     5c4:	86 b1       	in	r24, 0x06	; 6
     5c6:	80 95       	com	r24
     5c8:	86 fd       	sbrc	r24, 6
     5ca:	31 c0       	rjmp	.+98     	; 0x62e <GetKeypadKey+0xb2>
     5cc:	86 b1       	in	r24, 0x06	; 6
     5ce:	80 95       	com	r24
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	88 0f       	add	r24, r24
     5d4:	89 2f       	mov	r24, r25
     5d6:	88 1f       	adc	r24, r24
     5d8:	99 0b       	sbc	r25, r25
     5da:	91 95       	neg	r25
     5dc:	89 2b       	or	r24, r25
     5de:	49 f5       	brne	.+82     	; 0x632 <GetKeypadKey+0xb6>
     5e0:	8b ef       	ldi	r24, 0xFB	; 251
     5e2:	88 b9       	out	0x08, r24	; 8
     5e4:	00 00       	nop
     5e6:	86 b1       	in	r24, 0x06	; 6
     5e8:	80 95       	com	r24
     5ea:	84 fd       	sbrc	r24, 4
     5ec:	24 c0       	rjmp	.+72     	; 0x636 <GetKeypadKey+0xba>
     5ee:	86 b1       	in	r24, 0x06	; 6
     5f0:	80 95       	com	r24
     5f2:	85 fd       	sbrc	r24, 5
     5f4:	22 c0       	rjmp	.+68     	; 0x63a <GetKeypadKey+0xbe>
     5f6:	86 b1       	in	r24, 0x06	; 6
     5f8:	80 95       	com	r24
     5fa:	86 fd       	sbrc	r24, 6
     5fc:	20 c0       	rjmp	.+64     	; 0x63e <GetKeypadKey+0xc2>
     5fe:	86 b1       	in	r24, 0x06	; 6
     600:	80 95       	com	r24
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	88 0f       	add	r24, r24
     606:	89 2f       	mov	r24, r25
     608:	88 1f       	adc	r24, r24
     60a:	99 0b       	sbc	r25, r25
     60c:	91 95       	neg	r25
     60e:	89 2b       	or	r24, r25
     610:	c1 f4       	brne	.+48     	; 0x642 <GetKeypadKey+0xc6>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	08 95       	ret
     616:	81 e3       	ldi	r24, 0x31	; 49
     618:	08 95       	ret
     61a:	84 e3       	ldi	r24, 0x34	; 52
     61c:	08 95       	ret
     61e:	87 e3       	ldi	r24, 0x37	; 55
     620:	08 95       	ret
     622:	8a e2       	ldi	r24, 0x2A	; 42
     624:	08 95       	ret
     626:	82 e3       	ldi	r24, 0x32	; 50
     628:	08 95       	ret
     62a:	85 e3       	ldi	r24, 0x35	; 53
     62c:	08 95       	ret
     62e:	88 e3       	ldi	r24, 0x38	; 56
     630:	08 95       	ret
     632:	80 e3       	ldi	r24, 0x30	; 48
     634:	08 95       	ret
     636:	83 e3       	ldi	r24, 0x33	; 51
     638:	08 95       	ret
     63a:	86 e3       	ldi	r24, 0x36	; 54
     63c:	08 95       	ret
     63e:	89 e3       	ldi	r24, 0x39	; 57
     640:	08 95       	ret
     642:	83 e2       	ldi	r24, 0x23	; 35
     644:	08 95       	ret

00000646 <AlphaNumPad>:
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	cf 93       	push	r28
     658:	0f 2e       	mov	r0, r31
     65a:	fa e0       	ldi	r31, 0x0A	; 10
     65c:	cf 2e       	mov	r12, r31
     65e:	d1 2c       	mov	r13, r1
     660:	e1 2c       	mov	r14, r1
     662:	f1 2c       	mov	r15, r1
     664:	f0 2d       	mov	r31, r0
     666:	41 c0       	rjmp	.+130    	; 0x6ea <AlphaNumPad+0xa4>
     668:	80 90 3e 08 	lds	r8, 0x083E	; 0x80083e <auto_timer>
     66c:	90 90 3f 08 	lds	r9, 0x083F	; 0x80083f <auto_timer+0x1>
     670:	a0 90 40 08 	lds	r10, 0x0840	; 0x800840 <auto_timer+0x2>
     674:	b0 90 41 08 	lds	r11, 0x0841	; 0x800841 <auto_timer+0x3>
     678:	98 e2       	ldi	r25, 0x28	; 40
     67a:	89 16       	cp	r8, r25
     67c:	91 04       	cpc	r9, r1
     67e:	a1 04       	cpc	r10, r1
     680:	b1 04       	cpc	r11, r1
     682:	49 f4       	brne	.+18     	; 0x696 <AlphaNumPad+0x50>
     684:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <auto_timer>
     688:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <auto_timer+0x1>
     68c:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <auto_timer+0x2>
     690:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <auto_timer+0x3>
     694:	d5 c0       	rjmp	.+426    	; 0x840 <AlphaNumPad+0x1fa>
     696:	2f d4       	rcall	.+2142   	; 0xef6 <nokia_lcd_clear>
     698:	6e e1       	ldi	r22, 0x1E	; 30
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	24 d5       	rcall	.+2632   	; 0x10e6 <nokia_lcd_set_cursor>
     69e:	c5 01       	movw	r24, r10
     6a0:	b4 01       	movw	r22, r8
     6a2:	a7 01       	movw	r20, r14
     6a4:	96 01       	movw	r18, r12
     6a6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__udivmodsi4>
     6aa:	c6 2f       	mov	r28, r22
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	80 e3       	ldi	r24, 0x30	; 48
     6b0:	82 0f       	add	r24, r18
     6b2:	5d d4       	rcall	.+2234   	; 0xf6e <nokia_lcd_write_char>
     6b4:	6e e1       	ldi	r22, 0x1E	; 30
     6b6:	88 e0       	ldi	r24, 0x08	; 8
     6b8:	16 d5       	rcall	.+2604   	; 0x10e6 <nokia_lcd_set_cursor>
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	80 e3       	ldi	r24, 0x30	; 48
     6be:	8c 0f       	add	r24, r28
     6c0:	56 d4       	rcall	.+2220   	; 0xf6e <nokia_lcd_write_char>
     6c2:	16 d5       	rcall	.+2604   	; 0x10f0 <nokia_lcd_render>
     6c4:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <auto_timer>
     6c8:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <auto_timer+0x1>
     6cc:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <auto_timer+0x2>
     6d0:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <auto_timer+0x3>
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	a1 1d       	adc	r26, r1
     6d8:	b1 1d       	adc	r27, r1
     6da:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <auto_timer>
     6de:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <auto_timer+0x1>
     6e2:	a0 93 40 08 	sts	0x0840, r26	; 0x800840 <auto_timer+0x2>
     6e6:	b0 93 41 08 	sts	0x0841, r27	; 0x800841 <auto_timer+0x3>
     6ea:	48 df       	rcall	.-368    	; 0x57c <GetKeypadKey>
     6ec:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <pushed_key_ANP>
     6f0:	88 23       	and	r24, r24
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <AlphaNumPad+0xb0>
     6f4:	b9 cf       	rjmp	.-142    	; 0x668 <AlphaNumPad+0x22>
     6f6:	42 df       	rcall	.-380    	; 0x57c <GetKeypadKey>
     6f8:	80 93 a7 0a 	sts	0x0AA7, r24	; 0x800aa7 <tmp_pressed_key>
     6fc:	90 91 a5 0a 	lds	r25, 0x0AA5	; 0x800aa5 <pushed_key_ANP>
     700:	89 17       	cp	r24, r25
     702:	c9 f3       	breq	.-14     	; 0x6f6 <AlphaNumPad+0xb0>
     704:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <auto_timer>
     708:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <auto_timer+0x1>
     70c:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <auto_timer+0x2>
     710:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <auto_timer+0x3>
     714:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <previous_key_ANP>
     718:	98 13       	cpse	r25, r24
     71a:	8a c0       	rjmp	.+276    	; 0x830 <AlphaNumPad+0x1ea>
     71c:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <num_times_key_pushed>
     720:	30 91 43 08 	lds	r19, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     724:	23 30       	cpi	r18, 0x03	; 3
     726:	31 05       	cpc	r19, r1
     728:	38 f4       	brcc	.+14     	; 0x738 <AlphaNumPad+0xf2>
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	30 93 43 08 	sts	0x0843, r19	; 0x800843 <num_times_key_pushed+0x1>
     732:	20 93 42 08 	sts	0x0842, r18	; 0x800842 <num_times_key_pushed>
     736:	04 c0       	rjmp	.+8      	; 0x740 <AlphaNumPad+0xfa>
     738:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <num_times_key_pushed+0x1>
     73c:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <num_times_key_pushed>
     740:	81 33       	cpi	r24, 0x31	; 49
     742:	41 f4       	brne	.+16     	; 0x754 <AlphaNumPad+0x10e>
     744:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     748:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     74c:	e4 5d       	subi	r30, 0xD4	; 212
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	80 81       	ld	r24, Z
     752:	76 c0       	rjmp	.+236    	; 0x840 <AlphaNumPad+0x1fa>
     754:	82 33       	cpi	r24, 0x32	; 50
     756:	41 f4       	brne	.+16     	; 0x768 <AlphaNumPad+0x122>
     758:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     75c:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     760:	e8 5d       	subi	r30, 0xD8	; 216
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	80 81       	ld	r24, Z
     766:	6c c0       	rjmp	.+216    	; 0x840 <AlphaNumPad+0x1fa>
     768:	83 33       	cpi	r24, 0x33	; 51
     76a:	41 f4       	brne	.+16     	; 0x77c <AlphaNumPad+0x136>
     76c:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     770:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     774:	ec 5d       	subi	r30, 0xDC	; 220
     776:	fe 4f       	sbci	r31, 0xFE	; 254
     778:	80 81       	ld	r24, Z
     77a:	62 c0       	rjmp	.+196    	; 0x840 <AlphaNumPad+0x1fa>
     77c:	84 33       	cpi	r24, 0x34	; 52
     77e:	41 f4       	brne	.+16     	; 0x790 <AlphaNumPad+0x14a>
     780:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     784:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     788:	e0 5e       	subi	r30, 0xE0	; 224
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	80 81       	ld	r24, Z
     78e:	58 c0       	rjmp	.+176    	; 0x840 <AlphaNumPad+0x1fa>
     790:	85 33       	cpi	r24, 0x35	; 53
     792:	41 f4       	brne	.+16     	; 0x7a4 <AlphaNumPad+0x15e>
     794:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     798:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     79c:	e4 5e       	subi	r30, 0xE4	; 228
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	80 81       	ld	r24, Z
     7a2:	4e c0       	rjmp	.+156    	; 0x840 <AlphaNumPad+0x1fa>
     7a4:	86 33       	cpi	r24, 0x36	; 54
     7a6:	41 f4       	brne	.+16     	; 0x7b8 <AlphaNumPad+0x172>
     7a8:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     7ac:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     7b0:	e8 5e       	subi	r30, 0xE8	; 232
     7b2:	fe 4f       	sbci	r31, 0xFE	; 254
     7b4:	80 81       	ld	r24, Z
     7b6:	44 c0       	rjmp	.+136    	; 0x840 <AlphaNumPad+0x1fa>
     7b8:	87 33       	cpi	r24, 0x37	; 55
     7ba:	41 f4       	brne	.+16     	; 0x7cc <AlphaNumPad+0x186>
     7bc:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     7c0:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     7c4:	ec 5e       	subi	r30, 0xEC	; 236
     7c6:	fe 4f       	sbci	r31, 0xFE	; 254
     7c8:	80 81       	ld	r24, Z
     7ca:	3a c0       	rjmp	.+116    	; 0x840 <AlphaNumPad+0x1fa>
     7cc:	88 33       	cpi	r24, 0x38	; 56
     7ce:	41 f4       	brne	.+16     	; 0x7e0 <AlphaNumPad+0x19a>
     7d0:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     7d4:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     7d8:	e0 5f       	subi	r30, 0xF0	; 240
     7da:	fe 4f       	sbci	r31, 0xFE	; 254
     7dc:	80 81       	ld	r24, Z
     7de:	30 c0       	rjmp	.+96     	; 0x840 <AlphaNumPad+0x1fa>
     7e0:	89 33       	cpi	r24, 0x39	; 57
     7e2:	41 f4       	brne	.+16     	; 0x7f4 <AlphaNumPad+0x1ae>
     7e4:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     7e8:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     7ec:	e4 5f       	subi	r30, 0xF4	; 244
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	80 81       	ld	r24, Z
     7f2:	26 c0       	rjmp	.+76     	; 0x840 <AlphaNumPad+0x1fa>
     7f4:	80 33       	cpi	r24, 0x30	; 48
     7f6:	41 f4       	brne	.+16     	; 0x808 <AlphaNumPad+0x1c2>
     7f8:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     7fc:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     800:	e8 5f       	subi	r30, 0xF8	; 248
     802:	fe 4f       	sbci	r31, 0xFE	; 254
     804:	80 81       	ld	r24, Z
     806:	1c c0       	rjmp	.+56     	; 0x840 <AlphaNumPad+0x1fa>
     808:	8a 32       	cpi	r24, 0x2A	; 42
     80a:	41 f4       	brne	.+16     	; 0x81c <AlphaNumPad+0x1d6>
     80c:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     810:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     814:	ec 5f       	subi	r30, 0xFC	; 252
     816:	fe 4f       	sbci	r31, 0xFE	; 254
     818:	80 81       	ld	r24, Z
     81a:	12 c0       	rjmp	.+36     	; 0x840 <AlphaNumPad+0x1fa>
     81c:	83 32       	cpi	r24, 0x23	; 35
     81e:	71 f4       	brne	.+28     	; 0x83c <AlphaNumPad+0x1f6>
     820:	e0 91 42 08 	lds	r30, 0x0842	; 0x800842 <num_times_key_pushed>
     824:	f0 91 43 08 	lds	r31, 0x0843	; 0x800843 <num_times_key_pushed+0x1>
     828:	e0 50       	subi	r30, 0x00	; 0
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	80 81       	ld	r24, Z
     82e:	08 c0       	rjmp	.+16     	; 0x840 <AlphaNumPad+0x1fa>
     830:	90 93 44 08 	sts	0x0844, r25	; 0x800844 <previous_key_ANP>
     834:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <num_times_key_pushed+0x1>
     838:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <num_times_key_pushed>
     83c:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <previous_key_ANP>
     840:	cf 91       	pop	r28
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	08 95       	ret

00000854 <MainMenu_Init>:
     854:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     858:	01 ce       	rjmp	.-1022   	; 0x45c <main_menu_display>
     85a:	08 95       	ret

0000085c <MainMenu_Tick>:
     85c:	e0 91 a8 0a 	lds	r30, 0x0AA8	; 0x800aa8 <mainmenu_state>
     860:	8e 2f       	mov	r24, r30
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	8c 30       	cpi	r24, 0x0C	; 12
     866:	91 05       	cpc	r25, r1
     868:	08 f0       	brcs	.+2      	; 0x86c <MainMenu_Tick+0x10>
     86a:	ac c0       	rjmp	.+344    	; 0x9c4 <MainMenu_Tick+0x168>
     86c:	fc 01       	movw	r30, r24
     86e:	ea 5b       	subi	r30, 0xBA	; 186
     870:	ff 4f       	sbci	r31, 0xFF	; 255
     872:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__tablejump2__>
     876:	82 de       	rcall	.-764    	; 0x57c <GetKeypadKey>
     878:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <main_menu_selection>
     87c:	7f de       	rcall	.-770    	; 0x57c <GetKeypadKey>
     87e:	90 91 4e 08 	lds	r25, 0x084E	; 0x80084e <main_menu_selection>
     882:	89 13       	cpse	r24, r25
     884:	9f c0       	rjmp	.+318    	; 0x9c4 <MainMenu_Tick+0x168>
     886:	7a de       	rcall	.-780    	; 0x57c <GetKeypadKey>
     888:	90 91 4e 08 	lds	r25, 0x084E	; 0x80084e <main_menu_selection>
     88c:	98 17       	cp	r25, r24
     88e:	d9 f3       	breq	.-10     	; 0x886 <MainMenu_Tick+0x2a>
     890:	99 c0       	rjmp	.+306    	; 0x9c4 <MainMenu_Tick+0x168>
     892:	74 de       	rcall	.-792    	; 0x57c <GetKeypadKey>
     894:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     898:	71 de       	rcall	.-798    	; 0x57c <GetKeypadKey>
     89a:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     89e:	89 13       	cpse	r24, r25
     8a0:	91 c0       	rjmp	.+290    	; 0x9c4 <MainMenu_Tick+0x168>
     8a2:	6c de       	rcall	.-808    	; 0x57c <GetKeypadKey>
     8a4:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     8a8:	98 17       	cp	r25, r24
     8aa:	d9 f3       	breq	.-10     	; 0x8a2 <MainMenu_Tick+0x46>
     8ac:	8b c0       	rjmp	.+278    	; 0x9c4 <MainMenu_Tick+0x168>
     8ae:	66 de       	rcall	.-820    	; 0x57c <GetKeypadKey>
     8b0:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     8b4:	63 de       	rcall	.-826    	; 0x57c <GetKeypadKey>
     8b6:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     8ba:	89 13       	cpse	r24, r25
     8bc:	83 c0       	rjmp	.+262    	; 0x9c4 <MainMenu_Tick+0x168>
     8be:	5e de       	rcall	.-836    	; 0x57c <GetKeypadKey>
     8c0:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     8c4:	98 17       	cp	r25, r24
     8c6:	d9 f3       	breq	.-10     	; 0x8be <MainMenu_Tick+0x62>
     8c8:	7d c0       	rjmp	.+250    	; 0x9c4 <MainMenu_Tick+0x168>
     8ca:	58 de       	rcall	.-848    	; 0x57c <GetKeypadKey>
     8cc:	80 93 4c 08 	sts	0x084C, r24	; 0x80084c <settings_menu_selection>
     8d0:	55 de       	rcall	.-854    	; 0x57c <GetKeypadKey>
     8d2:	90 91 4c 08 	lds	r25, 0x084C	; 0x80084c <settings_menu_selection>
     8d6:	89 13       	cpse	r24, r25
     8d8:	75 c0       	rjmp	.+234    	; 0x9c4 <MainMenu_Tick+0x168>
     8da:	50 de       	rcall	.-864    	; 0x57c <GetKeypadKey>
     8dc:	90 91 4c 08 	lds	r25, 0x084C	; 0x80084c <settings_menu_selection>
     8e0:	98 17       	cp	r25, r24
     8e2:	d9 f3       	breq	.-10     	; 0x8da <MainMenu_Tick+0x7e>
     8e4:	6f c0       	rjmp	.+222    	; 0x9c4 <MainMenu_Tick+0x168>
     8e6:	4a de       	rcall	.-876    	; 0x57c <GetKeypadKey>
     8e8:	80 93 4b 08 	sts	0x084B, r24	; 0x80084b <drink_menu_selection>
     8ec:	47 de       	rcall	.-882    	; 0x57c <GetKeypadKey>
     8ee:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <drink_menu_selection>
     8f2:	89 13       	cpse	r24, r25
     8f4:	67 c0       	rjmp	.+206    	; 0x9c4 <MainMenu_Tick+0x168>
     8f6:	42 de       	rcall	.-892    	; 0x57c <GetKeypadKey>
     8f8:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <drink_menu_selection>
     8fc:	98 17       	cp	r25, r24
     8fe:	d9 f3       	breq	.-10     	; 0x8f6 <MainMenu_Tick+0x9a>
     900:	61 c0       	rjmp	.+194    	; 0x9c4 <MainMenu_Tick+0x168>
     902:	3c de       	rcall	.-904    	; 0x57c <GetKeypadKey>
     904:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     908:	39 de       	rcall	.-910    	; 0x57c <GetKeypadKey>
     90a:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     90e:	89 13       	cpse	r24, r25
     910:	59 c0       	rjmp	.+178    	; 0x9c4 <MainMenu_Tick+0x168>
     912:	34 de       	rcall	.-920    	; 0x57c <GetKeypadKey>
     914:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     918:	98 17       	cp	r25, r24
     91a:	d9 f3       	breq	.-10     	; 0x912 <MainMenu_Tick+0xb6>
     91c:	53 c0       	rjmp	.+166    	; 0x9c4 <MainMenu_Tick+0x168>
     91e:	2e de       	rcall	.-932    	; 0x57c <GetKeypadKey>
     920:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     924:	2b de       	rcall	.-938    	; 0x57c <GetKeypadKey>
     926:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     92a:	89 13       	cpse	r24, r25
     92c:	4b c0       	rjmp	.+150    	; 0x9c4 <MainMenu_Tick+0x168>
     92e:	26 de       	rcall	.-948    	; 0x57c <GetKeypadKey>
     930:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     934:	98 17       	cp	r25, r24
     936:	d9 f3       	breq	.-10     	; 0x92e <MainMenu_Tick+0xd2>
     938:	45 c0       	rjmp	.+138    	; 0x9c4 <MainMenu_Tick+0x168>
     93a:	20 de       	rcall	.-960    	; 0x57c <GetKeypadKey>
     93c:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <user_menu_selection>
     940:	1d de       	rcall	.-966    	; 0x57c <GetKeypadKey>
     942:	90 91 4a 08 	lds	r25, 0x084A	; 0x80084a <user_menu_selection>
     946:	89 13       	cpse	r24, r25
     948:	3d c0       	rjmp	.+122    	; 0x9c4 <MainMenu_Tick+0x168>
     94a:	18 de       	rcall	.-976    	; 0x57c <GetKeypadKey>
     94c:	90 91 4a 08 	lds	r25, 0x084A	; 0x80084a <user_menu_selection>
     950:	98 17       	cp	r25, r24
     952:	d9 f3       	breq	.-10     	; 0x94a <MainMenu_Tick+0xee>
     954:	37 c0       	rjmp	.+110    	; 0x9c4 <MainMenu_Tick+0x168>
     956:	12 de       	rcall	.-988    	; 0x57c <GetKeypadKey>
     958:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     95c:	0f de       	rcall	.-994    	; 0x57c <GetKeypadKey>
     95e:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     962:	89 13       	cpse	r24, r25
     964:	2f c0       	rjmp	.+94     	; 0x9c4 <MainMenu_Tick+0x168>
     966:	0a de       	rcall	.-1004   	; 0x57c <GetKeypadKey>
     968:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     96c:	98 17       	cp	r25, r24
     96e:	d9 f3       	breq	.-10     	; 0x966 <MainMenu_Tick+0x10a>
     970:	29 c0       	rjmp	.+82     	; 0x9c4 <MainMenu_Tick+0x168>
     972:	04 de       	rcall	.-1016   	; 0x57c <GetKeypadKey>
     974:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     978:	01 de       	rcall	.-1022   	; 0x57c <GetKeypadKey>
     97a:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     97e:	89 13       	cpse	r24, r25
     980:	21 c0       	rjmp	.+66     	; 0x9c4 <MainMenu_Tick+0x168>
     982:	fc dd       	rcall	.-1032   	; 0x57c <GetKeypadKey>
     984:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     988:	98 17       	cp	r25, r24
     98a:	d9 f3       	breq	.-10     	; 0x982 <MainMenu_Tick+0x126>
     98c:	1b c0       	rjmp	.+54     	; 0x9c4 <MainMenu_Tick+0x168>
     98e:	f6 dd       	rcall	.-1044   	; 0x57c <GetKeypadKey>
     990:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     994:	f3 dd       	rcall	.-1050   	; 0x57c <GetKeypadKey>
     996:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     99a:	89 13       	cpse	r24, r25
     99c:	13 c0       	rjmp	.+38     	; 0x9c4 <MainMenu_Tick+0x168>
     99e:	ee dd       	rcall	.-1060   	; 0x57c <GetKeypadKey>
     9a0:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     9a4:	98 17       	cp	r25, r24
     9a6:	d9 f3       	breq	.-10     	; 0x99e <MainMenu_Tick+0x142>
     9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <MainMenu_Tick+0x168>
     9aa:	e8 dd       	rcall	.-1072   	; 0x57c <GetKeypadKey>
     9ac:	80 93 4d 08 	sts	0x084D, r24	; 0x80084d <temp_menu_selection>
     9b0:	e5 dd       	rcall	.-1078   	; 0x57c <GetKeypadKey>
     9b2:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     9b6:	89 13       	cpse	r24, r25
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <MainMenu_Tick+0x168>
     9ba:	e0 dd       	rcall	.-1088   	; 0x57c <GetKeypadKey>
     9bc:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <temp_menu_selection>
     9c0:	98 17       	cp	r25, r24
     9c2:	d9 f3       	breq	.-10     	; 0x9ba <MainMenu_Tick+0x15e>
     9c4:	e0 91 a8 0a 	lds	r30, 0x0AA8	; 0x800aa8 <mainmenu_state>
     9c8:	8e 2f       	mov	r24, r30
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	8c 30       	cpi	r24, 0x0C	; 12
     9ce:	91 05       	cpc	r25, r1
     9d0:	08 f0       	brcs	.+2      	; 0x9d4 <MainMenu_Tick+0x178>
     9d2:	52 c1       	rjmp	.+676    	; 0xc78 <MainMenu_Tick+0x41c>
     9d4:	fc 01       	movw	r30, r24
     9d6:	ee 5a       	subi	r30, 0xAE	; 174
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__tablejump2__>
     9de:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <main_menu_selection>
     9e2:	81 33       	cpi	r24, 0x31	; 49
     9e4:	89 f4       	brne	.+34     	; 0xa08 <MainMenu_Tick+0x1ac>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     9ec:	84 d2       	rcall	.+1288   	; 0xef6 <nokia_lcd_clear>
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	88 ed       	ldi	r24, 0xD8	; 216
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	66 d3       	rcall	.+1740   	; 0x10c2 <nokia_lcd_write_string>
     9f6:	6a e0       	ldi	r22, 0x0A	; 10
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	75 d3       	rcall	.+1770   	; 0x10e6 <nokia_lcd_set_cursor>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	86 ee       	ldi	r24, 0xE6	; 230
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	5f d3       	rcall	.+1726   	; 0x10c2 <nokia_lcd_write_string>
     a04:	75 c3       	rjmp	.+1770   	; 0x10f0 <nokia_lcd_render>
     a06:	08 95       	ret
     a08:	82 33       	cpi	r24, 0x32	; 50
     a0a:	89 f4       	brne	.+34     	; 0xa2e <MainMenu_Tick+0x1d2>
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     a12:	71 d2       	rcall	.+1250   	; 0xef6 <nokia_lcd_clear>
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	82 ef       	ldi	r24, 0xF2	; 242
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	53 d3       	rcall	.+1702   	; 0x10c2 <nokia_lcd_write_string>
     a1c:	6a e0       	ldi	r22, 0x0A	; 10
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	62 d3       	rcall	.+1732   	; 0x10e6 <nokia_lcd_set_cursor>
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	86 ee       	ldi	r24, 0xE6	; 230
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	4c d3       	rcall	.+1688   	; 0x10c2 <nokia_lcd_write_string>
     a2a:	62 c3       	rjmp	.+1732   	; 0x10f0 <nokia_lcd_render>
     a2c:	08 95       	ret
     a2e:	83 33       	cpi	r24, 0x33	; 51
     a30:	09 f0       	breq	.+2      	; 0xa34 <MainMenu_Tick+0x1d8>
     a32:	2f c1       	rjmp	.+606    	; 0xc92 <MainMenu_Tick+0x436>
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     a3a:	2c cd       	rjmp	.-1448   	; 0x494 <settings_submenu_display>
     a3c:	08 95       	ret
     a3e:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <temp_menu_selection>
     a42:	83 32       	cpi	r24, 0x23	; 35
     a44:	09 f0       	breq	.+2      	; 0xa48 <MainMenu_Tick+0x1ec>
     a46:	25 c1       	rjmp	.+586    	; 0xc92 <MainMenu_Tick+0x436>
     a48:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     a4c:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     a50:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     a54:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     a58:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     a5c:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     a60:	fd cc       	rjmp	.-1542   	; 0x45c <main_menu_display>
     a62:	08 95       	ret
     a64:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <temp_menu_selection>
     a68:	83 32       	cpi	r24, 0x23	; 35
     a6a:	09 f0       	breq	.+2      	; 0xa6e <MainMenu_Tick+0x212>
     a6c:	12 c1       	rjmp	.+548    	; 0xc92 <MainMenu_Tick+0x436>
     a6e:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     a72:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     a76:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     a7a:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     a7e:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     a82:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     a86:	ea cc       	rjmp	.-1580   	; 0x45c <main_menu_display>
     a88:	08 95       	ret
     a8a:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <settings_menu_selection>
     a8e:	81 33       	cpi	r24, 0x31	; 49
     a90:	29 f4       	brne	.+10     	; 0xa9c <MainMenu_Tick+0x240>
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     a98:	20 cd       	rjmp	.-1472   	; 0x4da <drinks_submenu_display>
     a9a:	08 95       	ret
     a9c:	82 33       	cpi	r24, 0x32	; 50
     a9e:	29 f4       	brne	.+10     	; 0xaaa <MainMenu_Tick+0x24e>
     aa0:	87 e0       	ldi	r24, 0x07	; 7
     aa2:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     aa6:	35 cd       	rjmp	.-1430   	; 0x512 <user_submenu_display>
     aa8:	08 95       	ret
     aaa:	83 33       	cpi	r24, 0x33	; 51
     aac:	89 f4       	brne	.+34     	; 0xad0 <MainMenu_Tick+0x274>
     aae:	8b e0       	ldi	r24, 0x0B	; 11
     ab0:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     ab4:	20 d2       	rcall	.+1088   	; 0xef6 <nokia_lcd_clear>
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	8e ef       	ldi	r24, 0xFE	; 254
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	02 d3       	rcall	.+1540   	; 0x10c2 <nokia_lcd_write_string>
     abe:	6a e0       	ldi	r22, 0x0A	; 10
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	11 d3       	rcall	.+1570   	; 0x10e6 <nokia_lcd_set_cursor>
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	86 ee       	ldi	r24, 0xE6	; 230
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	fb d2       	rcall	.+1526   	; 0x10c2 <nokia_lcd_write_string>
     acc:	11 c3       	rjmp	.+1570   	; 0x10f0 <nokia_lcd_render>
     ace:	08 95       	ret
     ad0:	84 33       	cpi	r24, 0x34	; 52
     ad2:	09 f0       	breq	.+2      	; 0xad6 <MainMenu_Tick+0x27a>
     ad4:	de c0       	rjmp	.+444    	; 0xc92 <MainMenu_Tick+0x436>
     ad6:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     ada:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     ade:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     ae2:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     ae6:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     aea:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     aee:	b6 cc       	rjmp	.-1684   	; 0x45c <main_menu_display>
     af0:	08 95       	ret
     af2:	80 91 4b 08 	lds	r24, 0x084B	; 0x80084b <drink_menu_selection>
     af6:	81 33       	cpi	r24, 0x31	; 49
     af8:	89 f4       	brne	.+34     	; 0xb1c <MainMenu_Tick+0x2c0>
     afa:	85 e0       	ldi	r24, 0x05	; 5
     afc:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     b00:	fa d1       	rcall	.+1012   	; 0xef6 <nokia_lcd_clear>
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	8d e0       	ldi	r24, 0x0D	; 13
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	dc d2       	rcall	.+1464   	; 0x10c2 <nokia_lcd_write_string>
     b0a:	6a e0       	ldi	r22, 0x0A	; 10
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	eb d2       	rcall	.+1494   	; 0x10e6 <nokia_lcd_set_cursor>
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	86 ee       	ldi	r24, 0xE6	; 230
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	d5 d2       	rcall	.+1450   	; 0x10c2 <nokia_lcd_write_string>
     b18:	eb c2       	rjmp	.+1494   	; 0x10f0 <nokia_lcd_render>
     b1a:	08 95       	ret
     b1c:	82 33       	cpi	r24, 0x32	; 50
     b1e:	09 f0       	breq	.+2      	; 0xb22 <MainMenu_Tick+0x2c6>
     b20:	b8 c0       	rjmp	.+368    	; 0xc92 <MainMenu_Tick+0x436>
     b22:	86 e0       	ldi	r24, 0x06	; 6
     b24:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     b28:	e6 d1       	rcall	.+972    	; 0xef6 <nokia_lcd_clear>
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	89 e1       	ldi	r24, 0x19	; 25
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	c8 d2       	rcall	.+1424   	; 0x10c2 <nokia_lcd_write_string>
     b32:	6a e0       	ldi	r22, 0x0A	; 10
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	d7 d2       	rcall	.+1454   	; 0x10e6 <nokia_lcd_set_cursor>
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	86 ee       	ldi	r24, 0xE6	; 230
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	c1 d2       	rcall	.+1410   	; 0x10c2 <nokia_lcd_write_string>
     b40:	d7 c2       	rjmp	.+1454   	; 0x10f0 <nokia_lcd_render>
     b42:	08 95       	ret
     b44:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <temp_menu_selection>
     b48:	83 32       	cpi	r24, 0x23	; 35
     b4a:	09 f0       	breq	.+2      	; 0xb4e <MainMenu_Tick+0x2f2>
     b4c:	a2 c0       	rjmp	.+324    	; 0xc92 <MainMenu_Tick+0x436>
     b4e:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     b52:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     b56:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     b5a:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     b5e:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     b62:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     b66:	7a cc       	rjmp	.-1804   	; 0x45c <main_menu_display>
     b68:	08 95       	ret
     b6a:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <temp_menu_selection>
     b6e:	83 32       	cpi	r24, 0x23	; 35
     b70:	09 f0       	breq	.+2      	; 0xb74 <MainMenu_Tick+0x318>
     b72:	8f c0       	rjmp	.+286    	; 0xc92 <MainMenu_Tick+0x436>
     b74:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     b78:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     b7c:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     b80:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     b84:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     b88:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     b8c:	67 cc       	rjmp	.-1842   	; 0x45c <main_menu_display>
     b8e:	08 95       	ret
     b90:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <user_menu_selection>
     b94:	81 33       	cpi	r24, 0x31	; 49
     b96:	51 f4       	brne	.+20     	; 0xbac <MainMenu_Tick+0x350>
     b98:	88 e0       	ldi	r24, 0x08	; 8
     b9a:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 49 08 	sts	0x0849, r24	; 0x800849 <adding_user_flag>
     ba4:	87 e2       	ldi	r24, 0x27	; 39
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	d7 cc       	rjmp	.-1618   	; 0x558 <adduser_name_display>
     baa:	08 95       	ret
     bac:	82 33       	cpi	r24, 0x32	; 50
     bae:	89 f4       	brne	.+34     	; 0xbd2 <MainMenu_Tick+0x376>
     bb0:	89 e0       	ldi	r24, 0x09	; 9
     bb2:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     bb6:	9f d1       	rcall	.+830    	; 0xef6 <nokia_lcd_clear>
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	89 e2       	ldi	r24, 0x29	; 41
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	81 d2       	rcall	.+1282   	; 0x10c2 <nokia_lcd_write_string>
     bc0:	6a e0       	ldi	r22, 0x0A	; 10
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	90 d2       	rcall	.+1312   	; 0x10e6 <nokia_lcd_set_cursor>
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	86 ee       	ldi	r24, 0xE6	; 230
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	7a d2       	rcall	.+1268   	; 0x10c2 <nokia_lcd_write_string>
     bce:	90 c2       	rjmp	.+1312   	; 0x10f0 <nokia_lcd_render>
     bd0:	08 95       	ret
     bd2:	83 33       	cpi	r24, 0x33	; 51
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <MainMenu_Tick+0x37c>
     bd6:	5d c0       	rjmp	.+186    	; 0xc92 <MainMenu_Tick+0x436>
     bd8:	8a e0       	ldi	r24, 0x0A	; 10
     bda:	80 93 a8 0a 	sts	0x0AA8, r24	; 0x800aa8 <mainmenu_state>
     bde:	8b d1       	rcall	.+790    	; 0xef6 <nokia_lcd_clear>
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	86 e3       	ldi	r24, 0x36	; 54
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	6d d2       	rcall	.+1242   	; 0x10c2 <nokia_lcd_write_string>
     be8:	6a e0       	ldi	r22, 0x0A	; 10
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	7c d2       	rcall	.+1272   	; 0x10e6 <nokia_lcd_set_cursor>
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	86 ee       	ldi	r24, 0xE6	; 230
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	66 d2       	rcall	.+1228   	; 0x10c2 <nokia_lcd_write_string>
     bf6:	7c c2       	rjmp	.+1272   	; 0x10f0 <nokia_lcd_render>
     bf8:	08 95       	ret
     bfa:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <adding_user_flag>
     bfe:	81 11       	cpse	r24, r1
     c00:	48 c0       	rjmp	.+144    	; 0xc92 <MainMenu_Tick+0x436>
     c02:	2c dc       	rcall	.-1960   	; 0x45c <main_menu_display>
     c04:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     c08:	08 95       	ret
     c0a:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <temp_menu_selection>
     c0e:	83 32       	cpi	r24, 0x23	; 35
     c10:	09 f0       	breq	.+2      	; 0xc14 <MainMenu_Tick+0x3b8>
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <MainMenu_Tick+0x436>
     c14:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     c18:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     c1c:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     c20:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     c24:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     c28:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     c2c:	17 cc       	rjmp	.-2002   	; 0x45c <main_menu_display>
     c2e:	08 95       	ret
     c30:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <temp_menu_selection>
     c34:	83 32       	cpi	r24, 0x23	; 35
     c36:	69 f5       	brne	.+90     	; 0xc92 <MainMenu_Tick+0x436>
     c38:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     c3c:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     c40:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     c44:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     c48:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     c4c:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     c50:	05 cc       	rjmp	.-2038   	; 0x45c <main_menu_display>
     c52:	08 95       	ret
     c54:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <temp_menu_selection>
     c58:	83 32       	cpi	r24, 0x23	; 35
     c5a:	d9 f4       	brne	.+54     	; 0xc92 <MainMenu_Tick+0x436>
     c5c:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     c60:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     c64:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     c68:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     c6c:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     c70:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     c74:	f3 cb       	rjmp	.-2074   	; 0x45c <main_menu_display>
     c76:	08 95       	ret
     c78:	10 92 a8 0a 	sts	0x0AA8, r1	; 0x800aa8 <mainmenu_state>
     c7c:	10 92 4e 08 	sts	0x084E, r1	; 0x80084e <main_menu_selection>
     c80:	10 92 4d 08 	sts	0x084D, r1	; 0x80084d <temp_menu_selection>
     c84:	10 92 4c 08 	sts	0x084C, r1	; 0x80084c <settings_menu_selection>
     c88:	10 92 4b 08 	sts	0x084B, r1	; 0x80084b <drink_menu_selection>
     c8c:	10 92 4a 08 	sts	0x084A, r1	; 0x80084a <user_menu_selection>
     c90:	e5 cb       	rjmp	.-2102   	; 0x45c <main_menu_display>
     c92:	08 95       	ret

00000c94 <MainMenuTask>:
     c94:	df dd       	rcall	.-1090   	; 0x854 <MainMenu_Init>
     c96:	e2 dd       	rcall	.-1084   	; 0x85c <MainMenu_Tick>
     c98:	8a e0       	ldi	r24, 0x0A	; 10
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	48 d6       	rcall	.+3216   	; 0x192e <vTaskDelay>
     c9e:	fb cf       	rjmp	.-10     	; 0xc96 <MainMenuTask+0x2>

00000ca0 <MainMenuPulse>:
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	a1 2c       	mov	r10, r1
     cb0:	b1 2c       	mov	r11, r1
     cb2:	c1 2c       	mov	r12, r1
     cb4:	d1 2c       	mov	r13, r1
     cb6:	e1 2c       	mov	r14, r1
     cb8:	f1 2c       	mov	r15, r1
     cba:	08 2f       	mov	r16, r24
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	45 e5       	ldi	r20, 0x55	; 85
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	61 e4       	ldi	r22, 0x41	; 65
     cc6:	72 e0       	ldi	r23, 0x02	; 2
     cc8:	8a e4       	ldi	r24, 0x4A	; 74
     cca:	96 e0       	ldi	r25, 0x06	; 6
     ccc:	b8 d3       	rcall	.+1904   	; 0x143e <xTaskGenericCreate>
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	08 95       	ret

00000cde <AddUser_Tick>:
} 

void AddUser_Tick(){
     cde:	cf 93       	push	r28
	// Actions
	switch (adduser_state){
     ce0:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <adduser_state>
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	09 f0       	breq	.+2      	; 0xcea <AddUser_Tick+0xc>
     ce8:	54 c0       	rjmp	.+168    	; 0xd92 <AddUser_Tick+0xb4>
		case userinit:
			break;
			
		case name:
			while(!name_finished){	
     cea:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <name_finished>
     cee:	81 11       	cpse	r24, r1
     cf0:	68 c0       	rjmp	.+208    	; 0xdc2 <AddUser_Tick+0xe4>
				new_key = AlphaNumPad();
     cf2:	a9 dc       	rcall	.-1710   	; 0x646 <AlphaNumPad>
     cf4:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <new_key>
				
					else{
						if(last_key != '\0'){
							if(name_length < 10){
								last_key = '\0';
								user_name[name_length + 1] = '_';
     cf8:	cf e5       	ldi	r28, 0x5F	; 95
			break;
			
		case name:
			while(!name_finished){	
				new_key = AlphaNumPad();
				while(new_key != '#'){
     cfa:	39 c0       	rjmp	.+114    	; 0xd6e <AddUser_Tick+0x90>
					if(new_key == '*'){
     cfc:	8a 32       	cpi	r24, 0x2A	; 42
     cfe:	91 f4       	brne	.+36     	; 0xd24 <AddUser_Tick+0x46>
						if(name_length > 0){
     d00:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <name_length>
     d04:	ee 23       	and	r30, r30
     d06:	99 f1       	breq	.+102    	; 0xd6e <AddUser_Tick+0x90>
							--name_length;
     d08:	e1 50       	subi	r30, 0x01	; 1
     d0a:	e0 93 48 08 	sts	0x0848, r30	; 0x800848 <name_length>
							user_name[name_length] = '_';
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	e0 5d       	subi	r30, 0xD0	; 208
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	c0 83       	st	Z, r28
							user_name[name_length + 1] = '\0';
     d16:	11 82       	std	Z+1, r1	; 0x01
							adduser_name_display(user_name);
     d18:	80 e3       	ldi	r24, 0x30	; 48
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	1d dc       	rcall	.-1990   	; 0x558 <adduser_name_display>
							last_key = '\0';
     d1e:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <last_key>
     d22:	25 c0       	rjmp	.+74     	; 0xd6e <AddUser_Tick+0x90>
						}
					}
				
					else if(new_key != '\0'){
     d24:	88 23       	and	r24, r24
     d26:	69 f0       	breq	.+26     	; 0xd42 <AddUser_Tick+0x64>
						last_key = new_key;
     d28:	80 93 47 08 	sts	0x0847, r24	; 0x800847 <last_key>
						user_name[name_length] = new_key;
     d2c:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <name_length>
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	e0 5d       	subi	r30, 0xD0	; 208
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	80 83       	st	Z, r24
						user_name[name_length + 1] = '\0';
     d38:	11 82       	std	Z+1, r1	; 0x01
						adduser_name_display(user_name);
     d3a:	80 e3       	ldi	r24, 0x30	; 48
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0c dc       	rcall	.-2024   	; 0x558 <adduser_name_display>
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <AddUser_Tick+0x90>
					}
				
				
					else{
						if(last_key != '\0'){
     d42:	80 91 47 08 	lds	r24, 0x0847	; 0x800847 <last_key>
     d46:	88 23       	and	r24, r24
     d48:	91 f0       	breq	.+36     	; 0xd6e <AddUser_Tick+0x90>
							if(name_length < 10){
     d4a:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <name_length>
     d4e:	8a 30       	cpi	r24, 0x0A	; 10
     d50:	70 f4       	brcc	.+28     	; 0xd6e <AddUser_Tick+0x90>
								last_key = '\0';
     d52:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <last_key>
								user_name[name_length + 1] = '_';
     d56:	e8 2f       	mov	r30, r24
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	e0 5d       	subi	r30, 0xD0	; 208
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	c1 83       	std	Z+1, r28	; 0x01
								user_name[name_length + 2] = '\0';
     d60:	12 82       	std	Z+2, r1	; 0x02
								++name_length;
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <name_length>
								adduser_name_display(user_name);
     d68:	80 e3       	ldi	r24, 0x30	; 48
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	f5 db       	rcall	.-2070   	; 0x558 <adduser_name_display>
			break;
			
		case name:
			while(!name_finished){	
				new_key = AlphaNumPad();
				while(new_key != '#'){
     d6e:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <new_key>
     d72:	83 32       	cpi	r24, 0x23	; 35
     d74:	09 f0       	breq	.+2      	; 0xd78 <AddUser_Tick+0x9a>
     d76:	c2 cf       	rjmp	.-124    	; 0xcfc <AddUser_Tick+0x1e>
								adduser_name_display(user_name);
							}
						}
					}
				}
				name_finished = 1;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <name_finished>
				
				new_key = '#';
     d7e:	83 e2       	ldi	r24, 0x23	; 35
     d80:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <new_key>
		default:
			break;
	}
	
	// Transitions
	switch (adduser_state){
     d84:	80 91 a4 0a 	lds	r24, 0x0AA4	; 0x800aa4 <adduser_state>
     d88:	88 23       	and	r24, r24
     d8a:	41 f0       	breq	.+16     	; 0xd9c <AddUser_Tick+0xbe>
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	11 f5       	brne	.+68     	; 0xdd4 <AddUser_Tick+0xf6>
     d90:	1c c0       	rjmp	.+56     	; 0xdca <AddUser_Tick+0xec>
     d92:	88 23       	and	r24, r24
     d94:	19 f0       	breq	.+6      	; 0xd9c <AddUser_Tick+0xbe>
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	a1 f0       	breq	.+40     	; 0xdc2 <AddUser_Tick+0xe4>
     d9a:	1c c0       	rjmp	.+56     	; 0xdd4 <AddUser_Tick+0xf6>
		case userinit:
			if(adding_user_flag){
     d9c:	80 91 49 08 	lds	r24, 0x0849	; 0x800849 <adding_user_flag>
     da0:	88 23       	and	r24, r24
     da2:	d1 f0       	breq	.+52     	; 0xdd8 <AddUser_Tick+0xfa>
				user_name[0] = '_';
     da4:	8f e5       	ldi	r24, 0x5F	; 95
     da6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <user_name>
				name_length = 0;
     daa:	10 92 48 08 	sts	0x0848, r1	; 0x800848 <name_length>

				last_key = '\0';
     dae:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <last_key>
				new_key = '\0';
     db2:	10 92 46 08 	sts	0x0846, r1	; 0x800846 <new_key>
				name_finished = 0;
     db6:	10 92 45 08 	sts	0x0845, r1	; 0x800845 <name_finished>
				
				adduser_state = name;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 a4 0a 	sts	0x0AA4, r24	; 0x800aa4 <adduser_state>
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <AddUser_Tick+0xfa>
			}
			
			break;
		
		case name:
			if(new_key == '#'){
     dc2:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <new_key>
     dc6:	83 32       	cpi	r24, 0x23	; 35
     dc8:	39 f4       	brne	.+14     	; 0xdd8 <AddUser_Tick+0xfa>
				adding_user_flag = 0;
     dca:	10 92 49 08 	sts	0x0849, r1	; 0x800849 <adding_user_flag>
				adduser_state = userinit;
     dce:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <adduser_state>
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <AddUser_Tick+0xfa>
				adding_user_flag = 0;
			}
			break;
		*/
		default:
			adduser_state = userinit;
     dd4:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <adduser_state>
			break;
	}
}
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <AddUserTask>:
////////// Adding A User State Machine //////////
 
enum AddUser {userinit, name, weight, height, gender, password, confirm,} adduser_state;

void AddUser_Init(){
	adduser_state = userinit;
     ddc:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <adduser_state>

void AddUserTask(){
	AddUser_Init();
	for(;;)
	{
		AddUser_Tick();
     de0:	7e df       	rcall	.-260    	; 0xcde <AddUser_Tick>
		vTaskDelay(1);
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a3 d5       	rcall	.+2886   	; 0x192e <vTaskDelay>
     de8:	fb cf       	rjmp	.-10     	; 0xde0 <AddUserTask+0x4>

00000dea <AddUserPulse>:
	}
}

void AddUserPulse(unsigned portBASE_TYPE Priority){
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
	xTaskCreate(AddUserTask, (signed portCHAR *)"AddUserTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     df8:	a1 2c       	mov	r10, r1
     dfa:	b1 2c       	mov	r11, r1
     dfc:	c1 2c       	mov	r12, r1
     dfe:	d1 2c       	mov	r13, r1
     e00:	e1 2c       	mov	r14, r1
     e02:	f1 2c       	mov	r15, r1
     e04:	08 2f       	mov	r16, r24
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	45 e5       	ldi	r20, 0x55	; 85
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	6e e4       	ldi	r22, 0x4E	; 78
     e10:	72 e0       	ldi	r23, 0x02	; 2
     e12:	8e ee       	ldi	r24, 0xEE	; 238
     e14:	96 e0       	ldi	r25, 0x06	; 6
     e16:	13 d3       	rcall	.+1574   	; 0x143e <xTaskGenericCreate>
}
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	bf 90       	pop	r11
     e24:	af 90       	pop	r10
     e26:	08 95       	ret

00000e28 <main>:
	/*
	when scaling by 1: 14 chars per line, 8 pixels in height
	when scaling by 2: 8 chars per line, 14 pixels in height
	when scaling by 3: 5 chars per line, 21 pixels in height
	*/
	DDRC = 0x0F;	//Set PC7...PC3 to input, PC2...PC0 to output [0000 1111]
     e28:	8f e0       	ldi	r24, 0x0F	; 15
     e2a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xF0;	//Init port C to 1s							[1111 0000]
     e2c:	80 ef       	ldi	r24, 0xF0	; 240
     e2e:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;	//Set Port D to output
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//Init Port D to 0s
     e34:	1b b8       	out	0x0b, r1	; 11
	nokia_lcd_init();
     e36:	29 d0       	rcall	.+82     	; 0xe8a <nokia_lcd_init>

    //Start Tasks  
    MainMenuPulse(1);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	32 df       	rcall	.-412    	; 0xca0 <MainMenuPulse>
	AddUserPulse(1);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	d5 df       	rcall	.-86     	; 0xdea <AddUserPulse>
    //RunSchedular 
    vTaskStartScheduler(); 
     e40:	ff d3       	rcall	.+2046   	; 0x1640 <vTaskStartScheduler>
     e42:	80 e0       	ldi	r24, 0x00	; 0
	return 0; 
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	08 95       	ret

00000e48 <write>:
     e48:	59 98       	cbi	0x0b, 1	; 11
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     e4a:	66 23       	and	r22, r22
     e4c:	11 f0       	breq	.+4      	; 0xe52 <write+0xa>
     e4e:	5b 9a       	sbi	0x0b, 3	; 11
     e50:	15 c0       	rjmp	.+42     	; 0xe7c <write+0x34>
     e52:	5b 98       	cbi	0x0b, 3	; 11
     e54:	13 c0       	rjmp	.+38     	; 0xe7c <write+0x34>
     e56:	ac 01       	movw	r20, r24
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <write+0x18>
     e5c:	55 95       	asr	r21
     e5e:	47 95       	ror	r20
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <write+0x14>
     e64:	40 ff       	sbrs	r20, 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <write+0x24>
     e68:	5c 9a       	sbi	0x0b, 4	; 11
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <write+0x26>
     e6c:	5c 98       	cbi	0x0b, 4	; 11
     e6e:	5d 9a       	sbi	0x0b, 5	; 11
     e70:	5d 98       	cbi	0x0b, 5	; 11
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	31 09       	sbc	r19, r1
     e76:	78 f7       	brcc	.-34     	; 0xe56 <write+0xe>
     e78:	59 9a       	sbi	0x0b, 1	; 11
     e7a:	08 95       	ret
     e7c:	27 e0       	ldi	r18, 0x07	; 7
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	e9 cf       	rjmp	.-46     	; 0xe56 <write+0xe>

00000e84 <write_cmd>:
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	e0 cf       	rjmp	.-64     	; 0xe48 <write>
     e88:	08 95       	ret

00000e8a <nokia_lcd_init>:
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	51 9a       	sbi	0x0a, 1	; 10
     e90:	52 9a       	sbi	0x0a, 2	; 10
     e92:	53 9a       	sbi	0x0a, 3	; 10
     e94:	54 9a       	sbi	0x0a, 4	; 10
     e96:	55 9a       	sbi	0x0a, 5	; 10
     e98:	5a 9a       	sbi	0x0b, 2	; 11
     e9a:	59 9a       	sbi	0x0b, 1	; 11
     e9c:	83 ec       	ldi	r24, 0xC3	; 195
     e9e:	99 e0       	ldi	r25, 0x09	; 9
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <nokia_lcd_init+0x16>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <nokia_lcd_init+0x1c>
     ea6:	00 00       	nop
     ea8:	5a 98       	cbi	0x0b, 2	; 11
     eaa:	8b e5       	ldi	r24, 0x5B	; 91
     eac:	94 e4       	ldi	r25, 0x44	; 68
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <nokia_lcd_init+0x24>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <nokia_lcd_init+0x2a>
     eb4:	00 00       	nop
     eb6:	5a 9a       	sbi	0x0b, 2	; 11
     eb8:	59 98       	cbi	0x0b, 1	; 11
     eba:	81 e2       	ldi	r24, 0x21	; 33
     ebc:	e3 df       	rcall	.-58     	; 0xe84 <write_cmd>
     ebe:	83 e1       	ldi	r24, 0x13	; 19
     ec0:	e1 df       	rcall	.-62     	; 0xe84 <write_cmd>
     ec2:	86 e0       	ldi	r24, 0x06	; 6
     ec4:	df df       	rcall	.-66     	; 0xe84 <write_cmd>
     ec6:	82 ec       	ldi	r24, 0xC2	; 194
     ec8:	dd df       	rcall	.-70     	; 0xe84 <write_cmd>
     eca:	80 e2       	ldi	r24, 0x20	; 32
     ecc:	db df       	rcall	.-74     	; 0xe84 <write_cmd>
     ece:	89 e0       	ldi	r24, 0x09	; 9
     ed0:	d9 df       	rcall	.-78     	; 0xe84 <write_cmd>
     ed2:	80 e8       	ldi	r24, 0x80	; 128
     ed4:	d7 df       	rcall	.-82     	; 0xe84 <write_cmd>
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	d5 df       	rcall	.-86     	; 0xe84 <write_cmd>
     eda:	c8 ef       	ldi	r28, 0xF8	; 248
     edc:	d1 e0       	ldi	r29, 0x01	; 1
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	b2 df       	rcall	.-156    	; 0xe48 <write>
     ee4:	21 97       	sbiw	r28, 0x01	; 1
     ee6:	d9 f7       	brne	.-10     	; 0xede <nokia_lcd_init+0x54>
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	cc df       	rcall	.-104    	; 0xe84 <write_cmd>
     eec:	8c e0       	ldi	r24, 0x0C	; 12
     eee:	ca df       	rcall	.-108    	; 0xe84 <write_cmd>
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <nokia_lcd_clear>:
     ef6:	80 e8       	ldi	r24, 0x80	; 128
     ef8:	c5 df       	rcall	.-118    	; 0xe84 <write_cmd>
     efa:	80 e4       	ldi	r24, 0x40	; 64
     efc:	c3 df       	rcall	.-122    	; 0xe84 <write_cmd>
     efe:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <nokia_lcd+0x1f8>
     f02:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <nokia_lcd+0x1f9>
     f06:	ef e4       	ldi	r30, 0x4F	; 79
     f08:	f8 e0       	ldi	r31, 0x08	; 8
     f0a:	87 e4       	ldi	r24, 0x47	; 71
     f0c:	9a e0       	ldi	r25, 0x0A	; 10
     f0e:	11 92       	st	Z+, r1
     f10:	e8 17       	cp	r30, r24
     f12:	f9 07       	cpc	r31, r25
     f14:	e1 f7       	brne	.-8      	; 0xf0e <nokia_lcd_clear+0x18>
     f16:	08 95       	ret

00000f18 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     f18:	26 2f       	mov	r18, r22
     f1a:	26 95       	lsr	r18
     f1c:	26 95       	lsr	r18
     f1e:	26 95       	lsr	r18
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	34 e5       	ldi	r19, 0x54	; 84
     f24:	23 9f       	mul	r18, r19
     f26:	80 0d       	add	r24, r0
     f28:	91 1d       	adc	r25, r1
     f2a:	11 24       	eor	r1, r1
	if (value)
     f2c:	44 23       	and	r20, r20
     f2e:	79 f0       	breq	.+30     	; 0xf4e <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     f30:	fc 01       	movw	r30, r24
     f32:	e1 5b       	subi	r30, 0xB1	; 177
     f34:	f7 4f       	sbci	r31, 0xF7	; 247
     f36:	67 70       	andi	r22, 0x07	; 7
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <nokia_lcd_set_pixel+0x2a>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	6a 95       	dec	r22
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <nokia_lcd_set_pixel+0x26>
     f46:	90 81       	ld	r25, Z
     f48:	89 2b       	or	r24, r25
     f4a:	80 83       	st	Z, r24
     f4c:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     f4e:	fc 01       	movw	r30, r24
     f50:	e1 5b       	subi	r30, 0xB1	; 177
     f52:	f7 4f       	sbci	r31, 0xF7	; 247
     f54:	67 70       	andi	r22, 0x07	; 7
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <nokia_lcd_set_pixel+0x48>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	6a 95       	dec	r22
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <nokia_lcd_set_pixel+0x44>
     f64:	80 95       	com	r24
     f66:	90 81       	ld	r25, Z
     f68:	89 23       	and	r24, r25
     f6a:	80 83       	st	Z, r24
     f6c:	08 95       	ret

00000f6e <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     f6e:	5f 92       	push	r5
     f70:	6f 92       	push	r6
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     f8e:	26 2f       	mov	r18, r22
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	49 01       	movw	r8, r18
     f94:	88 0c       	add	r8, r8
     f96:	99 1c       	adc	r9, r9
     f98:	88 0c       	add	r8, r8
     f9a:	99 1c       	adc	r9, r9
     f9c:	82 0e       	add	r8, r18
     f9e:	93 1e       	adc	r9, r19
     fa0:	18 14       	cp	r1, r8
     fa2:	19 04       	cpc	r1, r9
     fa4:	0c f0       	brlt	.+2      	; 0xfa8 <nokia_lcd_write_char+0x3a>
     fa6:	59 c0       	rjmp	.+178    	; 0x105a <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
     fa8:	89 01       	movw	r16, r18
     faa:	00 0f       	add	r16, r16
     fac:	11 1f       	adc	r17, r17
     fae:	00 0f       	add	r16, r16
     fb0:	11 1f       	adc	r17, r17
     fb2:	00 0f       	add	r16, r16
     fb4:	11 1f       	adc	r17, r17
     fb6:	02 1b       	sub	r16, r18
     fb8:	13 0b       	sbc	r17, r19
     fba:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     fbc:	a8 2e       	mov	r10, r24
     fbe:	b1 2c       	mov	r11, r1
     fc0:	c5 01       	movw	r24, r10
     fc2:	80 97       	sbiw	r24, 0x20	; 32
     fc4:	5c 01       	movw	r10, r24
     fc6:	aa 0c       	add	r10, r10
     fc8:	bb 1c       	adc	r11, r11
     fca:	aa 0c       	add	r10, r10
     fcc:	bb 1c       	adc	r11, r11
     fce:	a8 0e       	add	r10, r24
     fd0:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     fd2:	0f 2e       	mov	r0, r31
     fd4:	f8 e4       	ldi	r31, 0x48	; 72
     fd6:	cf 2e       	mov	r12, r31
     fd8:	fa e0       	ldi	r31, 0x0A	; 10
     fda:	df 2e       	mov	r13, r31
     fdc:	f0 2d       	mov	r31, r0
     fde:	0f 2e       	mov	r0, r31
     fe0:	f7 e4       	ldi	r31, 0x47	; 71
     fe2:	ef 2e       	mov	r14, r31
     fe4:	fa e0       	ldi	r31, 0x0A	; 10
     fe6:	ff 2e       	mov	r15, r31
     fe8:	f0 2d       	mov	r31, r0
     fea:	2a c0       	rjmp	.+84     	; 0x1040 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     fec:	fe 01       	movw	r30, r28
     fee:	24 91       	lpm	r18, Z
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	87 2d       	mov	r24, r7
     ff4:	65 2d       	mov	r22, r5
     ff6:	5c d5       	rcall	.+2744   	; 0x1ab0 <__udivmodqi4>
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <nokia_lcd_write_char+0x90>
     ffa:	35 95       	asr	r19
     ffc:	27 95       	ror	r18
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <nokia_lcd_write_char+0x8c>
    1002:	20 ff       	sbrs	r18, 0
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    1006:	f6 01       	movw	r30, r12
    1008:	60 81       	ld	r22, Z
    100a:	67 0d       	add	r22, r7
    100c:	f7 01       	movw	r30, r14
    100e:	80 81       	ld	r24, Z
    1010:	41 e0       	ldi	r20, 0x01	; 1
    1012:	86 0d       	add	r24, r6
    1014:	81 df       	rcall	.-254    	; 0xf18 <nokia_lcd_set_pixel>
    1016:	08 c0       	rjmp	.+16     	; 0x1028 <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1018:	f6 01       	movw	r30, r12
    101a:	60 81       	ld	r22, Z
    101c:	67 0d       	add	r22, r7
    101e:	f7 01       	movw	r30, r14
    1020:	80 81       	ld	r24, Z
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	86 0d       	add	r24, r6
    1026:	78 df       	rcall	.-272    	; 0xf18 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1028:	73 94       	inc	r7
    102a:	87 2d       	mov	r24, r7
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	80 17       	cp	r24, r16
    1030:	91 07       	cpc	r25, r17
    1032:	e4 f2       	brlt	.-72     	; 0xfec <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1034:	63 94       	inc	r6
    1036:	86 2d       	mov	r24, r6
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	88 15       	cp	r24, r8
    103c:	99 05       	cpc	r25, r9
    103e:	6c f4       	brge	.+26     	; 0x105a <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    1040:	10 16       	cp	r1, r16
    1042:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1044:	bc f7       	brge	.-18     	; 0x1034 <nokia_lcd_write_char+0xc6>
    1046:	86 2d       	mov	r24, r6
    1048:	65 2d       	mov	r22, r5
    104a:	32 d5       	rcall	.+2660   	; 0x1ab0 <__udivmodqi4>
    104c:	e5 01       	movw	r28, r10
    104e:	c8 0f       	add	r28, r24
    1050:	d1 1d       	adc	r29, r1
    1052:	c4 54       	subi	r28, 0x44	; 68
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	71 2c       	mov	r7, r1
    1058:	c9 cf       	rjmp	.-110    	; 0xfec <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    105a:	80 91 47 0a 	lds	r24, 0x0A47	; 0x800a47 <nokia_lcd+0x1f8>
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	98 0f       	add	r25, r24
    1062:	85 2d       	mov	r24, r5
    1064:	88 0f       	add	r24, r24
    1066:	88 0f       	add	r24, r24
    1068:	85 0d       	add	r24, r5
    106a:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
    106c:	84 35       	cpi	r24, 0x54	; 84
    106e:	18 f4       	brcc	.+6      	; 0x1076 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1070:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <nokia_lcd+0x1f8>
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
    1076:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    107a:	e8 e4       	ldi	r30, 0x48	; 72
    107c:	fa e0       	ldi	r31, 0x0A	; 10
    107e:	80 81       	ld	r24, Z
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	98 0f       	add	r25, r24
    1084:	85 2d       	mov	r24, r5
    1086:	88 0f       	add	r24, r24
    1088:	88 0f       	add	r24, r24
    108a:	88 0f       	add	r24, r24
    108c:	85 19       	sub	r24, r5
    108e:	89 0f       	add	r24, r25
    1090:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    1092:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <nokia_lcd+0x1f9>
    1096:	80 33       	cpi	r24, 0x30	; 48
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
    109a:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    109e:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <nokia_lcd+0x1f9>
	}
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	5f 90       	pop	r5
    10c0:	08 95       	ret

000010c2 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	ec 01       	movw	r28, r24
	while(*str)
    10ca:	88 81       	ld	r24, Y
    10cc:	88 23       	and	r24, r24
    10ce:	39 f0       	breq	.+14     	; 0x10de <nokia_lcd_write_string+0x1c>
    10d0:	16 2f       	mov	r17, r22
    10d2:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
    10d4:	61 2f       	mov	r22, r17
    10d6:	4b df       	rcall	.-362    	; 0xf6e <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    10d8:	89 91       	ld	r24, Y+
    10da:	81 11       	cpse	r24, r1
    10dc:	fb cf       	rjmp	.-10     	; 0x10d4 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	08 95       	ret

000010e6 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    10e6:	80 93 47 0a 	sts	0x0A47, r24	; 0x800a47 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    10ea:	60 93 48 0a 	sts	0x0A48, r22	; 0x800a48 <nokia_lcd+0x1f9>
    10ee:	08 95       	ret

000010f0 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    10f8:	80 e8       	ldi	r24, 0x80	; 128
    10fa:	c4 de       	rcall	.-632    	; 0xe84 <write_cmd>
	write_cmd(0x40);
    10fc:	80 e4       	ldi	r24, 0x40	; 64
    10fe:	c2 de       	rcall	.-636    	; 0xe84 <write_cmd>
    1100:	cf e4       	ldi	r28, 0x4F	; 79
    1102:	d8 e0       	ldi	r29, 0x08	; 8
    1104:	07 e4       	ldi	r16, 0x47	; 71
    1106:	1a e0       	ldi	r17, 0x0A	; 10
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	89 91       	ld	r24, Y+
    110c:	9d de       	rcall	.-710    	; 0xe48 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    110e:	c0 17       	cp	r28, r16
    1110:	d1 07       	cpc	r29, r17
    1112:	d1 f7       	brne	.-12     	; 0x1108 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    111e:	31 e1       	ldi	r19, 0x11	; 17
    1120:	fc 01       	movw	r30, r24
    1122:	30 83       	st	Z, r19
    1124:	31 97       	sbiw	r30, 0x01	; 1
    1126:	22 e2       	ldi	r18, 0x22	; 34
    1128:	20 83       	st	Z, r18
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	a3 e3       	ldi	r26, 0x33	; 51
    112e:	a0 83       	st	Z, r26
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	60 83       	st	Z, r22
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	70 83       	st	Z, r23
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	10 82       	st	Z, r1
    113c:	31 97       	sbiw	r30, 0x01	; 1
    113e:	60 e8       	ldi	r22, 0x80	; 128
    1140:	60 83       	st	Z, r22
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	10 82       	st	Z, r1
    1146:	31 97       	sbiw	r30, 0x01	; 1
    1148:	62 e0       	ldi	r22, 0x02	; 2
    114a:	60 83       	st	Z, r22
    114c:	31 97       	sbiw	r30, 0x01	; 1
    114e:	63 e0       	ldi	r22, 0x03	; 3
    1150:	60 83       	st	Z, r22
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	60 83       	st	Z, r22
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	65 e0       	ldi	r22, 0x05	; 5
    115c:	60 83       	st	Z, r22
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	66 e0       	ldi	r22, 0x06	; 6
    1162:	60 83       	st	Z, r22
    1164:	31 97       	sbiw	r30, 0x01	; 1
    1166:	67 e0       	ldi	r22, 0x07	; 7
    1168:	60 83       	st	Z, r22
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	68 e0       	ldi	r22, 0x08	; 8
    116e:	60 83       	st	Z, r22
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	69 e0       	ldi	r22, 0x09	; 9
    1174:	60 83       	st	Z, r22
    1176:	31 97       	sbiw	r30, 0x01	; 1
    1178:	60 e1       	ldi	r22, 0x10	; 16
    117a:	60 83       	st	Z, r22
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	30 83       	st	Z, r19
    1180:	31 97       	sbiw	r30, 0x01	; 1
    1182:	32 e1       	ldi	r19, 0x12	; 18
    1184:	30 83       	st	Z, r19
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	33 e1       	ldi	r19, 0x13	; 19
    118a:	30 83       	st	Z, r19
    118c:	31 97       	sbiw	r30, 0x01	; 1
    118e:	34 e1       	ldi	r19, 0x14	; 20
    1190:	30 83       	st	Z, r19
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	35 e1       	ldi	r19, 0x15	; 21
    1196:	30 83       	st	Z, r19
    1198:	31 97       	sbiw	r30, 0x01	; 1
    119a:	36 e1       	ldi	r19, 0x16	; 22
    119c:	30 83       	st	Z, r19
    119e:	31 97       	sbiw	r30, 0x01	; 1
    11a0:	37 e1       	ldi	r19, 0x17	; 23
    11a2:	30 83       	st	Z, r19
    11a4:	31 97       	sbiw	r30, 0x01	; 1
    11a6:	38 e1       	ldi	r19, 0x18	; 24
    11a8:	30 83       	st	Z, r19
    11aa:	31 97       	sbiw	r30, 0x01	; 1
    11ac:	39 e1       	ldi	r19, 0x19	; 25
    11ae:	30 83       	st	Z, r19
    11b0:	31 97       	sbiw	r30, 0x01	; 1
    11b2:	30 e2       	ldi	r19, 0x20	; 32
    11b4:	30 83       	st	Z, r19
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	31 e2       	ldi	r19, 0x21	; 33
    11ba:	30 83       	st	Z, r19
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	20 83       	st	Z, r18
    11c0:	31 97       	sbiw	r30, 0x01	; 1
    11c2:	23 e2       	ldi	r18, 0x23	; 35
    11c4:	20 83       	st	Z, r18
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	40 83       	st	Z, r20
    11ca:	31 97       	sbiw	r30, 0x01	; 1
    11cc:	50 83       	st	Z, r21
    11ce:	31 97       	sbiw	r30, 0x01	; 1
    11d0:	26 e2       	ldi	r18, 0x26	; 38
    11d2:	20 83       	st	Z, r18
    11d4:	31 97       	sbiw	r30, 0x01	; 1
    11d6:	27 e2       	ldi	r18, 0x27	; 39
    11d8:	20 83       	st	Z, r18
    11da:	31 97       	sbiw	r30, 0x01	; 1
    11dc:	28 e2       	ldi	r18, 0x28	; 40
    11de:	20 83       	st	Z, r18
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	29 e2       	ldi	r18, 0x29	; 41
    11e4:	20 83       	st	Z, r18
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	20 e3       	ldi	r18, 0x30	; 48
    11ea:	20 83       	st	Z, r18
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	21 e3       	ldi	r18, 0x31	; 49
    11f0:	20 83       	st	Z, r18
    11f2:	86 97       	sbiw	r24, 0x26	; 38
    11f4:	08 95       	ret

000011f6 <xPortStartScheduler>:
    11f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    11fa:	8c e7       	ldi	r24, 0x7C	; 124
    11fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1200:	8b e0       	ldi	r24, 0x0B	; 11
    1202:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1206:	ef e6       	ldi	r30, 0x6F	; 111
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	82 60       	ori	r24, 0x02	; 2
    120e:	80 83       	st	Z, r24
    1210:	a0 91 a1 0a 	lds	r26, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    1214:	b0 91 a2 0a 	lds	r27, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    1218:	cd 91       	ld	r28, X+
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	dd 91       	ld	r29, X+
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	9f 90       	pop	r9
    124e:	8f 90       	pop	r8
    1250:	7f 90       	pop	r7
    1252:	6f 90       	pop	r6
    1254:	5f 90       	pop	r5
    1256:	4f 90       	pop	r4
    1258:	3f 90       	pop	r3
    125a:	2f 90       	pop	r2
    125c:	1f 90       	pop	r1
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	08 95       	ret
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	08 95       	ret

0000126a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	0f 92       	push	r0
    1272:	1f 92       	push	r1
    1274:	11 24       	eor	r1, r1
    1276:	2f 92       	push	r2
    1278:	3f 92       	push	r3
    127a:	4f 92       	push	r4
    127c:	5f 92       	push	r5
    127e:	6f 92       	push	r6
    1280:	7f 92       	push	r7
    1282:	8f 92       	push	r8
    1284:	9f 92       	push	r9
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
    12b2:	a0 91 a1 0a 	lds	r26, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    12b6:	b0 91 a2 0a 	lds	r27, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    12ba:	0d b6       	in	r0, 0x3d	; 61
    12bc:	0d 92       	st	X+, r0
    12be:	0e b6       	in	r0, 0x3e	; 62
    12c0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    12c2:	8a d3       	rcall	.+1812   	; 0x19d8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    12c4:	a0 91 a1 0a 	lds	r26, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    12c8:	b0 91 a2 0a 	lds	r27, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    12cc:	cd 91       	ld	r28, X+
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	dd 91       	ld	r29, X+
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	bf 90       	pop	r11
    12fe:	af 90       	pop	r10
    1300:	9f 90       	pop	r9
    1302:	8f 90       	pop	r8
    1304:	7f 90       	pop	r7
    1306:	6f 90       	pop	r6
    1308:	5f 90       	pop	r5
    130a:	4f 90       	pop	r4
    130c:	3f 90       	pop	r3
    130e:	2f 90       	pop	r2
    1310:	1f 90       	pop	r1
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1318:	08 95       	ret

0000131a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    131a:	0f 92       	push	r0
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	0f 92       	push	r0
    1322:	1f 92       	push	r1
    1324:	11 24       	eor	r1, r1
    1326:	2f 92       	push	r2
    1328:	3f 92       	push	r3
    132a:	4f 92       	push	r4
    132c:	5f 92       	push	r5
    132e:	6f 92       	push	r6
    1330:	7f 92       	push	r7
    1332:	8f 92       	push	r8
    1334:	9f 92       	push	r9
    1336:	af 92       	push	r10
    1338:	bf 92       	push	r11
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
    1362:	a0 91 a1 0a 	lds	r26, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    1366:	b0 91 a2 0a 	lds	r27, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    136a:	0d b6       	in	r0, 0x3d	; 61
    136c:	0d 92       	st	X+, r0
    136e:	0e b6       	in	r0, 0x3e	; 62
    1370:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1372:	95 d1       	rcall	.+810    	; 0x169e <vTaskIncrementTick>
	vTaskSwitchContext();
    1374:	31 d3       	rcall	.+1634   	; 0x19d8 <vTaskSwitchContext>
    1376:	a0 91 a1 0a 	lds	r26, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
	portRESTORE_CONTEXT();
    137a:	b0 91 a2 0a 	lds	r27, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    137e:	cd 91       	ld	r28, X+
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	dd 91       	ld	r29, X+
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	ff 91       	pop	r31
    1388:	ef 91       	pop	r30
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	7f 90       	pop	r7
    13b8:	6f 90       	pop	r6
    13ba:	5f 90       	pop	r5
    13bc:	4f 90       	pop	r4
    13be:	3f 90       	pop	r3
    13c0:	2f 90       	pop	r2
    13c2:	1f 90       	pop	r1
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	08 95       	ret

000013cc <__vector_13>:

	asm volatile ( "ret" );
    13cc:	a6 df       	rcall	.-180    	; 0x131a <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    13ce:	18 95       	reti

000013d0 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
    13d6:	e0 91 a1 0a 	lds	r30, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    13da:	f0 91 a2 0a 	lds	r31, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    13de:	93 83       	std	Z+3, r25	; 0x03
    13e0:	82 83       	std	Z+2, r24	; 0x02
    13e2:	80 91 51 0a 	lds	r24, 0x0A51	; 0x800a51 <xTickCount>
    13e6:	90 91 52 0a 	lds	r25, 0x0A52	; 0x800a52 <xTickCount+0x1>
    13ea:	c8 17       	cp	r28, r24
    13ec:	d9 07       	cpc	r29, r25
    13ee:	68 f4       	brcc	.+26     	; 0x140a <prvAddCurrentTaskToDelayedList+0x3a>
    13f0:	60 91 a1 0a 	lds	r22, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    13f4:	70 91 a2 0a 	lds	r23, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    13f8:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <pxOverflowDelayedTaskList>
    13fc:	90 91 68 0a 	lds	r25, 0x0A68	; 0x800a68 <pxOverflowDelayedTaskList+0x1>
    1400:	6e 5f       	subi	r22, 0xFE	; 254
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	0e 94 cd 01 	call	0x39a	; 0x39a <vListInsert>
    1408:	17 c0       	rjmp	.+46     	; 0x1438 <prvAddCurrentTaskToDelayedList+0x68>
    140a:	60 91 a1 0a 	lds	r22, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    140e:	70 91 a2 0a 	lds	r23, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    1412:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    1416:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    141a:	6e 5f       	subi	r22, 0xFE	; 254
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	0e 94 cd 01 	call	0x39a	; 0x39a <vListInsert>
    1422:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <xNextTaskUnblockTime>
    1426:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <xNextTaskUnblockTime+0x1>
    142a:	c8 17       	cp	r28, r24
    142c:	d9 07       	cpc	r29, r25
    142e:	20 f4       	brcc	.+8      	; 0x1438 <prvAddCurrentTaskToDelayedList+0x68>
    1430:	d0 93 3f 01 	sts	0x013F, r29	; 0x80013f <xNextTaskUnblockTime+0x1>
    1434:	c0 93 3e 01 	sts	0x013E, r28	; 0x80013e <xNextTaskUnblockTime>
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <xTaskGenericCreate>:
    143e:	4f 92       	push	r4
    1440:	5f 92       	push	r5
    1442:	6f 92       	push	r6
    1444:	7f 92       	push	r7
    1446:	8f 92       	push	r8
    1448:	9f 92       	push	r9
    144a:	af 92       	push	r10
    144c:	bf 92       	push	r11
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	5c 01       	movw	r10, r24
    1460:	4b 01       	movw	r8, r22
    1462:	3a 01       	movw	r6, r20
    1464:	29 01       	movw	r4, r18
    1466:	81 e2       	ldi	r24, 0x21	; 33
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 6d 01 	call	0x2da	; 0x2da <pvPortMalloc>
    146e:	ec 01       	movw	r28, r24
    1470:	89 2b       	or	r24, r25
    1472:	09 f4       	brne	.+2      	; 0x1476 <xTaskGenericCreate+0x38>
    1474:	d3 c0       	rjmp	.+422    	; 0x161c <xTaskGenericCreate+0x1de>
    1476:	c1 14       	cp	r12, r1
    1478:	d1 04       	cpc	r13, r1
    147a:	09 f0       	breq	.+2      	; 0x147e <xTaskGenericCreate+0x40>
    147c:	cb c0       	rjmp	.+406    	; 0x1614 <xTaskGenericCreate+0x1d6>
    147e:	c3 01       	movw	r24, r6
    1480:	0e 94 6d 01 	call	0x2da	; 0x2da <pvPortMalloc>
    1484:	98 8f       	std	Y+24, r25	; 0x18
    1486:	8f 8b       	std	Y+23, r24	; 0x17
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	21 f4       	brne	.+8      	; 0x1494 <xTaskGenericCreate+0x56>
    148c:	ce 01       	movw	r24, r28
    148e:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>
    1492:	c4 c0       	rjmp	.+392    	; 0x161c <xTaskGenericCreate+0x1de>
    1494:	a3 01       	movw	r20, r6
    1496:	65 ea       	ldi	r22, 0xA5	; 165
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	41 d3       	rcall	.+1666   	; 0x1b1e <memset>
    149c:	93 01       	movw	r18, r6
    149e:	21 50       	subi	r18, 0x01	; 1
    14a0:	31 09       	sbc	r19, r1
    14a2:	8f 89       	ldd	r24, Y+23	; 0x17
    14a4:	98 8d       	ldd	r25, Y+24	; 0x18
    14a6:	3c 01       	movw	r6, r24
    14a8:	62 0e       	add	r6, r18
    14aa:	73 1e       	adc	r7, r19
    14ac:	48 e0       	ldi	r20, 0x08	; 8
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	b4 01       	movw	r22, r8
    14b2:	ce 01       	movw	r24, r28
    14b4:	49 96       	adiw	r24, 0x19	; 25
    14b6:	3a d3       	rcall	.+1652   	; 0x1b2c <strncpy>
    14b8:	18 a2       	std	Y+32, r1	; 0x20
    14ba:	10 2f       	mov	r17, r16
    14bc:	04 30       	cpi	r16, 0x04	; 4
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <xTaskGenericCreate+0x84>
    14c0:	13 e0       	ldi	r17, 0x03	; 3
    14c2:	1e 8b       	std	Y+22, r17	; 0x16
    14c4:	6e 01       	movw	r12, r28
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	c8 0e       	add	r12, r24
    14ca:	d1 1c       	adc	r13, r1
    14cc:	c6 01       	movw	r24, r12
    14ce:	0e 94 a2 01 	call	0x344	; 0x344 <vListInitialiseItem>
    14d2:	ce 01       	movw	r24, r28
    14d4:	0c 96       	adiw	r24, 0x0c	; 12
    14d6:	0e 94 a2 01 	call	0x344	; 0x344 <vListInitialiseItem>
    14da:	d9 87       	std	Y+9, r29	; 0x09
    14dc:	c8 87       	std	Y+8, r28	; 0x08
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	81 1b       	sub	r24, r17
    14e4:	91 09       	sbc	r25, r1
    14e6:	9d 87       	std	Y+13, r25	; 0x0d
    14e8:	8c 87       	std	Y+12, r24	; 0x0c
    14ea:	db 8b       	std	Y+19, r29	; 0x13
    14ec:	ca 8b       	std	Y+18, r28	; 0x12
    14ee:	a2 01       	movw	r20, r4
    14f0:	b5 01       	movw	r22, r10
    14f2:	c3 01       	movw	r24, r6
    14f4:	14 de       	rcall	.-984    	; 0x111e <pxPortInitialiseStack>
    14f6:	99 83       	std	Y+1, r25	; 0x01
    14f8:	88 83       	st	Y, r24
    14fa:	e1 14       	cp	r14, r1
    14fc:	f1 04       	cpc	r15, r1
    14fe:	19 f0       	breq	.+6      	; 0x1506 <xTaskGenericCreate+0xc8>
    1500:	f7 01       	movw	r30, r14
    1502:	d1 83       	std	Z+1, r29	; 0x01
    1504:	c0 83       	st	Z, r28
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	0f 92       	push	r0
    150c:	80 91 53 0a 	lds	r24, 0x0A53	; 0x800a53 <uxCurrentNumberOfTasks>
    1510:	8f 5f       	subi	r24, 0xFF	; 255
    1512:	80 93 53 0a 	sts	0x0A53, r24	; 0x800a53 <uxCurrentNumberOfTasks>
    1516:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    151a:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    151e:	89 2b       	or	r24, r25
    1520:	a9 f5       	brne	.+106    	; 0x158c <xTaskGenericCreate+0x14e>
    1522:	d0 93 a2 0a 	sts	0x0AA2, r29	; 0x800aa2 <pxCurrentTCB+0x1>
    1526:	c0 93 a1 0a 	sts	0x0AA1, r28	; 0x800aa1 <pxCurrentTCB>
    152a:	80 91 53 0a 	lds	r24, 0x0A53	; 0x800a53 <uxCurrentNumberOfTasks>
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	e1 f5       	brne	.+120    	; 0x15aa <xTaskGenericCreate+0x16c>
    1532:	8d e7       	ldi	r24, 0x7D	; 125
    1534:	9a e0       	ldi	r25, 0x0A	; 10
    1536:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    153a:	86 e8       	ldi	r24, 0x86	; 134
    153c:	9a e0       	ldi	r25, 0x0A	; 10
    153e:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1542:	8f e8       	ldi	r24, 0x8F	; 143
    1544:	9a e0       	ldi	r25, 0x0A	; 10
    1546:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    154a:	88 e9       	ldi	r24, 0x98	; 152
    154c:	9a e0       	ldi	r25, 0x0A	; 10
    154e:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1552:	84 e7       	ldi	r24, 0x74	; 116
    1554:	9a e0       	ldi	r25, 0x0A	; 10
    1556:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    155a:	8b e6       	ldi	r24, 0x6B	; 107
    155c:	9a e0       	ldi	r25, 0x0A	; 10
    155e:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1562:	8e e5       	ldi	r24, 0x5E	; 94
    1564:	9a e0       	ldi	r25, 0x0A	; 10
    1566:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    156a:	85 e5       	ldi	r24, 0x55	; 85
    156c:	9a e0       	ldi	r25, 0x0A	; 10
    156e:	0e 94 94 01 	call	0x328	; 0x328 <vListInitialise>
    1572:	84 e7       	ldi	r24, 0x74	; 116
    1574:	9a e0       	ldi	r25, 0x0A	; 10
    1576:	90 93 6a 0a 	sts	0x0A6A, r25	; 0x800a6a <pxDelayedTaskList+0x1>
    157a:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <pxDelayedTaskList>
    157e:	8b e6       	ldi	r24, 0x6B	; 107
    1580:	9a e0       	ldi	r25, 0x0A	; 10
    1582:	90 93 68 0a 	sts	0x0A68, r25	; 0x800a68 <pxOverflowDelayedTaskList+0x1>
    1586:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <pxOverflowDelayedTaskList>
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <xTaskGenericCreate+0x16c>
    158c:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xSchedulerRunning>
    1590:	81 11       	cpse	r24, r1
    1592:	0b c0       	rjmp	.+22     	; 0x15aa <xTaskGenericCreate+0x16c>
    1594:	e0 91 a1 0a 	lds	r30, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    1598:	f0 91 a2 0a 	lds	r31, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    159c:	86 89       	ldd	r24, Z+22	; 0x16
    159e:	08 17       	cp	r16, r24
    15a0:	20 f0       	brcs	.+8      	; 0x15aa <xTaskGenericCreate+0x16c>
    15a2:	d0 93 a2 0a 	sts	0x0AA2, r29	; 0x800aa2 <pxCurrentTCB+0x1>
    15a6:	c0 93 a1 0a 	sts	0x0AA1, r28	; 0x800aa1 <pxCurrentTCB>
    15aa:	8e 89       	ldd	r24, Y+22	; 0x16
    15ac:	90 91 50 0a 	lds	r25, 0x0A50	; 0x800a50 <uxTopUsedPriority>
    15b0:	98 17       	cp	r25, r24
    15b2:	10 f4       	brcc	.+4      	; 0x15b8 <xTaskGenericCreate+0x17a>
    15b4:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <uxTopUsedPriority>
    15b8:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <uxTaskNumber>
    15bc:	9f 5f       	subi	r25, 0xFF	; 255
    15be:	90 93 49 0a 	sts	0x0A49, r25	; 0x800a49 <uxTaskNumber>
    15c2:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <uxTopReadyPriority>
    15c6:	98 17       	cp	r25, r24
    15c8:	10 f4       	brcc	.+4      	; 0x15ce <xTaskGenericCreate+0x190>
    15ca:	80 93 4f 0a 	sts	0x0A4F, r24	; 0x800a4f <uxTopReadyPriority>
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9c 01       	movw	r18, r24
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	22 0f       	add	r18, r18
    15d8:	33 1f       	adc	r19, r19
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	82 0f       	add	r24, r18
    15e0:	93 1f       	adc	r25, r19
    15e2:	b6 01       	movw	r22, r12
    15e4:	83 58       	subi	r24, 0x83	; 131
    15e6:	95 4f       	sbci	r25, 0xF5	; 245
    15e8:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <xSchedulerRunning>
    15f4:	88 23       	and	r24, r24
    15f6:	51 f0       	breq	.+20     	; 0x160c <xTaskGenericCreate+0x1ce>
    15f8:	e0 91 a1 0a 	lds	r30, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    15fc:	f0 91 a2 0a 	lds	r31, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    1600:	86 89       	ldd	r24, Z+22	; 0x16
    1602:	80 17       	cp	r24, r16
    1604:	28 f4       	brcc	.+10     	; 0x1610 <xTaskGenericCreate+0x1d2>
    1606:	31 de       	rcall	.-926    	; 0x126a <vPortYield>
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	09 c0       	rjmp	.+18     	; 0x161e <xTaskGenericCreate+0x1e0>
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	07 c0       	rjmp	.+14     	; 0x161e <xTaskGenericCreate+0x1e0>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	05 c0       	rjmp	.+10     	; 0x161e <xTaskGenericCreate+0x1e0>
    1614:	d8 8e       	std	Y+24, r13	; 0x18
    1616:	cf 8a       	std	Y+23, r12	; 0x17
    1618:	c6 01       	movw	r24, r12
    161a:	3c cf       	rjmp	.-392    	; 0x1494 <xTaskGenericCreate+0x56>
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	7f 90       	pop	r7
    1638:	6f 90       	pop	r6
    163a:	5f 90       	pop	r5
    163c:	4f 90       	pop	r4
    163e:	08 95       	ret

00001640 <vTaskStartScheduler>:
    1640:	af 92       	push	r10
    1642:	bf 92       	push	r11
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	a1 2c       	mov	r10, r1
    1650:	b1 2c       	mov	r11, r1
    1652:	c1 2c       	mov	r12, r1
    1654:	d1 2c       	mov	r13, r1
    1656:	e1 2c       	mov	r14, r1
    1658:	f1 2c       	mov	r15, r1
    165a:	00 e0       	ldi	r16, 0x00	; 0
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	45 e5       	ldi	r20, 0x55	; 85
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	6a e5       	ldi	r22, 0x5A	; 90
    1666:	72 e0       	ldi	r23, 0x02	; 2
    1668:	83 eb       	ldi	r24, 0xB3	; 179
    166a:	9c e0       	ldi	r25, 0x0C	; 12
    166c:	e8 de       	rcall	.-560    	; 0x143e <xTaskGenericCreate>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	41 f4       	brne	.+16     	; 0x1682 <vTaskStartScheduler+0x42>
    1672:	f8 94       	cli
    1674:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <xSchedulerRunning>
    1678:	10 92 52 0a 	sts	0x0A52, r1	; 0x800a52 <xTickCount+0x1>
    167c:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <xTickCount>
    1680:	ba dd       	rcall	.-1164   	; 0x11f6 <xPortStartScheduler>
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	08 95       	ret

00001692 <vTaskSuspendAll>:
    1692:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <uxSchedulerSuspended>
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <uxSchedulerSuspended>
    169c:	08 95       	ret

0000169e <vTaskIncrementTick>:
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <uxSchedulerSuspended>
    16aa:	81 11       	cpse	r24, r1
    16ac:	b2 c0       	rjmp	.+356    	; 0x1812 <vTaskIncrementTick+0x174>
    16ae:	80 91 51 0a 	lds	r24, 0x0A51	; 0x800a51 <xTickCount>
    16b2:	90 91 52 0a 	lds	r25, 0x0A52	; 0x800a52 <xTickCount+0x1>
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	90 93 52 0a 	sts	0x0A52, r25	; 0x800a52 <xTickCount+0x1>
    16bc:	80 93 51 0a 	sts	0x0A51, r24	; 0x800a51 <xTickCount>
    16c0:	80 91 51 0a 	lds	r24, 0x0A51	; 0x800a51 <xTickCount>
    16c4:	90 91 52 0a 	lds	r25, 0x0A52	; 0x800a52 <xTickCount+0x1>
    16c8:	89 2b       	or	r24, r25
    16ca:	99 f5       	brne	.+102    	; 0x1732 <vTaskIncrementTick+0x94>
    16cc:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    16d0:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    16d4:	20 91 67 0a 	lds	r18, 0x0A67	; 0x800a67 <pxOverflowDelayedTaskList>
    16d8:	30 91 68 0a 	lds	r19, 0x0A68	; 0x800a68 <pxOverflowDelayedTaskList+0x1>
    16dc:	30 93 6a 0a 	sts	0x0A6A, r19	; 0x800a6a <pxDelayedTaskList+0x1>
    16e0:	20 93 69 0a 	sts	0x0A69, r18	; 0x800a69 <pxDelayedTaskList>
    16e4:	90 93 68 0a 	sts	0x0A68, r25	; 0x800a68 <pxOverflowDelayedTaskList+0x1>
    16e8:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <pxOverflowDelayedTaskList>
    16ec:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <xNumOfOverflows>
    16f0:	8f 5f       	subi	r24, 0xFF	; 255
    16f2:	80 93 4a 0a 	sts	0x0A4A, r24	; 0x800a4a <xNumOfOverflows>
    16f6:	e0 91 69 0a 	lds	r30, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    16fa:	f0 91 6a 0a 	lds	r31, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    16fe:	80 81       	ld	r24, Z
    1700:	81 11       	cpse	r24, r1
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <vTaskIncrementTick+0x74>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <xNextTaskUnblockTime+0x1>
    170c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <xNextTaskUnblockTime>
    1710:	10 c0       	rjmp	.+32     	; 0x1732 <vTaskIncrementTick+0x94>
    1712:	e0 91 69 0a 	lds	r30, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    1716:	f0 91 6a 0a 	lds	r31, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    171a:	05 80       	ldd	r0, Z+5	; 0x05
    171c:	f6 81       	ldd	r31, Z+6	; 0x06
    171e:	e0 2d       	mov	r30, r0
    1720:	06 80       	ldd	r0, Z+6	; 0x06
    1722:	f7 81       	ldd	r31, Z+7	; 0x07
    1724:	e0 2d       	mov	r30, r0
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <xNextTaskUnblockTime+0x1>
    172e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <xNextTaskUnblockTime>
    1732:	20 91 51 0a 	lds	r18, 0x0A51	; 0x800a51 <xTickCount>
    1736:	30 91 52 0a 	lds	r19, 0x0A52	; 0x800a52 <xTickCount+0x1>
    173a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <xNextTaskUnblockTime>
    173e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <xNextTaskUnblockTime+0x1>
    1742:	28 17       	cp	r18, r24
    1744:	39 07       	cpc	r19, r25
    1746:	08 f4       	brcc	.+2      	; 0x174a <vTaskIncrementTick+0xac>
    1748:	69 c0       	rjmp	.+210    	; 0x181c <vTaskIncrementTick+0x17e>
    174a:	e0 91 69 0a 	lds	r30, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    174e:	f0 91 6a 0a 	lds	r31, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    1752:	80 81       	ld	r24, Z
    1754:	88 23       	and	r24, r24
    1756:	99 f0       	breq	.+38     	; 0x177e <vTaskIncrementTick+0xe0>
    1758:	e0 91 69 0a 	lds	r30, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    175c:	f0 91 6a 0a 	lds	r31, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    1760:	05 80       	ldd	r0, Z+5	; 0x05
    1762:	f6 81       	ldd	r31, Z+6	; 0x06
    1764:	e0 2d       	mov	r30, r0
    1766:	c6 81       	ldd	r28, Z+6	; 0x06
    1768:	d7 81       	ldd	r29, Z+7	; 0x07
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	9b 81       	ldd	r25, Y+3	; 0x03
    176e:	20 91 51 0a 	lds	r18, 0x0A51	; 0x800a51 <xTickCount>
    1772:	30 91 52 0a 	lds	r19, 0x0A52	; 0x800a52 <xTickCount+0x1>
    1776:	28 17       	cp	r18, r24
    1778:	39 07       	cpc	r19, r25
    177a:	f8 f4       	brcc	.+62     	; 0x17ba <vTaskIncrementTick+0x11c>
    177c:	19 c0       	rjmp	.+50     	; 0x17b0 <vTaskIncrementTick+0x112>
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	9f ef       	ldi	r25, 0xFF	; 255
    1782:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <xNextTaskUnblockTime+0x1>
    1786:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <xNextTaskUnblockTime>
    178a:	48 c0       	rjmp	.+144    	; 0x181c <vTaskIncrementTick+0x17e>
    178c:	e0 91 69 0a 	lds	r30, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    1790:	f0 91 6a 0a 	lds	r31, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    1794:	05 80       	ldd	r0, Z+5	; 0x05
    1796:	f6 81       	ldd	r31, Z+6	; 0x06
    1798:	e0 2d       	mov	r30, r0
    179a:	c6 81       	ldd	r28, Z+6	; 0x06
    179c:	d7 81       	ldd	r29, Z+7	; 0x07
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	9b 81       	ldd	r25, Y+3	; 0x03
    17a2:	20 91 51 0a 	lds	r18, 0x0A51	; 0x800a51 <xTickCount>
    17a6:	30 91 52 0a 	lds	r19, 0x0A52	; 0x800a52 <xTickCount+0x1>
    17aa:	28 17       	cp	r18, r24
    17ac:	39 07       	cpc	r19, r25
    17ae:	28 f4       	brcc	.+10     	; 0x17ba <vTaskIncrementTick+0x11c>
    17b0:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <xNextTaskUnblockTime+0x1>
    17b4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <xNextTaskUnblockTime>
    17b8:	31 c0       	rjmp	.+98     	; 0x181c <vTaskIncrementTick+0x17e>
    17ba:	8e 01       	movw	r16, r28
    17bc:	0e 5f       	subi	r16, 0xFE	; 254
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	c8 01       	movw	r24, r16
    17c2:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    17c6:	8c 89       	ldd	r24, Y+20	; 0x14
    17c8:	9d 89       	ldd	r25, Y+21	; 0x15
    17ca:	89 2b       	or	r24, r25
    17cc:	21 f0       	breq	.+8      	; 0x17d6 <vTaskIncrementTick+0x138>
    17ce:	ce 01       	movw	r24, r28
    17d0:	0c 96       	adiw	r24, 0x0c	; 12
    17d2:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    17d6:	8e 89       	ldd	r24, Y+22	; 0x16
    17d8:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <uxTopReadyPriority>
    17dc:	98 17       	cp	r25, r24
    17de:	10 f4       	brcc	.+4      	; 0x17e4 <vTaskIncrementTick+0x146>
    17e0:	80 93 4f 0a 	sts	0x0A4F, r24	; 0x800a4f <uxTopReadyPriority>
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9c 01       	movw	r18, r24
    17e8:	22 0f       	add	r18, r18
    17ea:	33 1f       	adc	r19, r19
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	82 0f       	add	r24, r18
    17f6:	93 1f       	adc	r25, r19
    17f8:	b8 01       	movw	r22, r16
    17fa:	83 58       	subi	r24, 0x83	; 131
    17fc:	95 4f       	sbci	r25, 0xF5	; 245
    17fe:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    1802:	e0 91 69 0a 	lds	r30, 0x0A69	; 0x800a69 <pxDelayedTaskList>
    1806:	f0 91 6a 0a 	lds	r31, 0x0A6A	; 0x800a6a <pxDelayedTaskList+0x1>
    180a:	80 81       	ld	r24, Z
    180c:	81 11       	cpse	r24, r1
    180e:	be cf       	rjmp	.-132    	; 0x178c <vTaskIncrementTick+0xee>
    1810:	b6 cf       	rjmp	.-148    	; 0x177e <vTaskIncrementTick+0xe0>
    1812:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <uxMissedTicks>
    1816:	8f 5f       	subi	r24, 0xFF	; 255
    1818:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <uxMissedTicks>
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <xTaskResumeAll>:
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	0f 92       	push	r0
    183c:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <uxSchedulerSuspended>
    1840:	81 50       	subi	r24, 0x01	; 1
    1842:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <uxSchedulerSuspended>
    1846:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <uxSchedulerSuspended>
    184a:	81 11       	cpse	r24, r1
    184c:	62 c0       	rjmp	.+196    	; 0x1912 <xTaskResumeAll+0xec>
    184e:	80 91 53 0a 	lds	r24, 0x0A53	; 0x800a53 <uxCurrentNumberOfTasks>
    1852:	81 11       	cpse	r24, r1
    1854:	32 c0       	rjmp	.+100    	; 0x18ba <xTaskResumeAll+0x94>
    1856:	60 c0       	rjmp	.+192    	; 0x1918 <xTaskResumeAll+0xf2>
    1858:	d7 01       	movw	r26, r14
    185a:	15 96       	adiw	r26, 0x05	; 5
    185c:	ed 91       	ld	r30, X+
    185e:	fc 91       	ld	r31, X
    1860:	16 97       	sbiw	r26, 0x06	; 6
    1862:	c6 81       	ldd	r28, Z+6	; 0x06
    1864:	d7 81       	ldd	r29, Z+7	; 0x07
    1866:	ce 01       	movw	r24, r28
    1868:	0c 96       	adiw	r24, 0x0c	; 12
    186a:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    186e:	8e 01       	movw	r16, r28
    1870:	0e 5f       	subi	r16, 0xFE	; 254
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	c8 01       	movw	r24, r16
    1876:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    187a:	8e 89       	ldd	r24, Y+22	; 0x16
    187c:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <uxTopReadyPriority>
    1880:	98 17       	cp	r25, r24
    1882:	10 f4       	brcc	.+4      	; 0x1888 <xTaskResumeAll+0x62>
    1884:	80 93 4f 0a 	sts	0x0A4F, r24	; 0x800a4f <uxTopReadyPriority>
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 01       	movw	r18, r24
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	22 0f       	add	r18, r18
    1892:	33 1f       	adc	r19, r19
    1894:	22 0f       	add	r18, r18
    1896:	33 1f       	adc	r19, r19
    1898:	82 0f       	add	r24, r18
    189a:	93 1f       	adc	r25, r19
    189c:	b8 01       	movw	r22, r16
    189e:	83 58       	subi	r24, 0x83	; 131
    18a0:	95 4f       	sbci	r25, 0xF5	; 245
    18a2:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    18a6:	e0 91 a1 0a 	lds	r30, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    18aa:	f0 91 a2 0a 	lds	r31, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    18ae:	9e 89       	ldd	r25, Y+22	; 0x16
    18b0:	86 89       	ldd	r24, Z+22	; 0x16
    18b2:	98 17       	cp	r25, r24
    18b4:	58 f0       	brcs	.+22     	; 0x18cc <xTaskResumeAll+0xa6>
    18b6:	dc 2c       	mov	r13, r12
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <xTaskResumeAll+0xa6>
    18ba:	d1 2c       	mov	r13, r1
    18bc:	0f 2e       	mov	r0, r31
    18be:	fe e5       	ldi	r31, 0x5E	; 94
    18c0:	ef 2e       	mov	r14, r31
    18c2:	fa e0       	ldi	r31, 0x0A	; 10
    18c4:	ff 2e       	mov	r15, r31
    18c6:	f0 2d       	mov	r31, r0
    18c8:	cc 24       	eor	r12, r12
    18ca:	c3 94       	inc	r12
    18cc:	f7 01       	movw	r30, r14
    18ce:	80 81       	ld	r24, Z
    18d0:	81 11       	cpse	r24, r1
    18d2:	c2 cf       	rjmp	.-124    	; 0x1858 <xTaskResumeAll+0x32>
    18d4:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <uxMissedTicks>
    18d8:	88 23       	and	r24, r24
    18da:	79 f0       	breq	.+30     	; 0x18fa <xTaskResumeAll+0xd4>
    18dc:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <uxMissedTicks>
    18e0:	88 23       	and	r24, r24
    18e2:	91 f0       	breq	.+36     	; 0x1908 <xTaskResumeAll+0xe2>
    18e4:	dc de       	rcall	.-584    	; 0x169e <vTaskIncrementTick>
    18e6:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <uxMissedTicks>
    18ea:	81 50       	subi	r24, 0x01	; 1
    18ec:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <uxMissedTicks>
    18f0:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <uxMissedTicks>
    18f4:	81 11       	cpse	r24, r1
    18f6:	f6 cf       	rjmp	.-20     	; 0x18e4 <xTaskResumeAll+0xbe>
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <xTaskResumeAll+0xe2>
    18fa:	f1 e0       	ldi	r31, 0x01	; 1
    18fc:	df 16       	cp	r13, r31
    18fe:	21 f0       	breq	.+8      	; 0x1908 <xTaskResumeAll+0xe2>
    1900:	80 91 4b 0a 	lds	r24, 0x0A4B	; 0x800a4b <xMissedYield>
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	39 f4       	brne	.+14     	; 0x1916 <xTaskResumeAll+0xf0>
    1908:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <xMissedYield>
    190c:	ae dc       	rcall	.-1700   	; 0x126a <vPortYield>
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <xTaskResumeAll+0xf2>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <xTaskResumeAll+0xf2>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	08 95       	ret

0000192e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1934:	89 2b       	or	r24, r25
    1936:	99 f0       	breq	.+38     	; 0x195e <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    1938:	ac de       	rcall	.-680    	; 0x1692 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    193a:	80 91 51 0a 	lds	r24, 0x0A51	; 0x800a51 <xTickCount>
    193e:	90 91 52 0a 	lds	r25, 0x0A52	; 0x800a52 <xTickCount+0x1>
    1942:	c8 0f       	add	r28, r24
    1944:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1946:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <pxCurrentTCB>
    194a:	90 91 a2 0a 	lds	r25, 0x0AA2	; 0x800aa2 <pxCurrentTCB+0x1>
    194e:	02 96       	adiw	r24, 0x02	; 2
    1950:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1954:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    1956:	3c dd       	rcall	.-1416   	; 0x13d0 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1958:	66 df       	rcall	.-308    	; 0x1826 <xTaskResumeAll>
    195a:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <vTaskDelay+0x32>
    195e:	85 dc       	rcall	.-1782   	; 0x126a <vPortYield>
		}
	}
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1966:	0f 2e       	mov	r0, r31
    1968:	f5 e5       	ldi	r31, 0x55	; 85
    196a:	ef 2e       	mov	r14, r31
    196c:	fa e0       	ldi	r31, 0x0A	; 10
    196e:	ff 2e       	mov	r15, r31
    1970:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1972:	cd e7       	ldi	r28, 0x7D	; 125
    1974:	da e0       	ldi	r29, 0x0A	; 10
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1976:	80 91 54 0a 	lds	r24, 0x0A54	; 0x800a54 <uxTasksDeleted>
    197a:	88 23       	and	r24, r24
    197c:	41 f1       	breq	.+80     	; 0x19ce <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    197e:	89 de       	rcall	.-750    	; 0x1692 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1980:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    1982:	1c 91       	ld	r17, X
    1984:	50 df       	rcall	.-352    	; 0x1826 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1986:	11 23       	and	r17, r17
    1988:	11 f1       	breq	.+68     	; 0x19ce <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1990:	d7 01       	movw	r26, r14
    1992:	15 96       	adiw	r26, 0x05	; 5
    1994:	ed 91       	ld	r30, X+
    1996:	fc 91       	ld	r31, X
    1998:	16 97       	sbiw	r26, 0x06	; 6
    199a:	06 81       	ldd	r16, Z+6	; 0x06
    199c:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    199e:	c8 01       	movw	r24, r16
    19a0:	02 96       	adiw	r24, 0x02	; 2
    19a2:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
					--uxCurrentNumberOfTasks;
    19a6:	80 91 53 0a 	lds	r24, 0x0A53	; 0x800a53 <uxCurrentNumberOfTasks>
    19aa:	81 50       	subi	r24, 0x01	; 1
    19ac:	80 93 53 0a 	sts	0x0A53, r24	; 0x800a53 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    19b0:	80 91 54 0a 	lds	r24, 0x0A54	; 0x800a54 <uxTasksDeleted>
    19b4:	81 50       	subi	r24, 0x01	; 1
    19b6:	80 93 54 0a 	sts	0x0A54, r24	; 0x800a54 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    19be:	f8 01       	movw	r30, r16
    19c0:	87 89       	ldd	r24, Z+23	; 0x17
    19c2:	90 8d       	ldd	r25, Z+24	; 0x18
    19c4:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>
		vPortFree( pxTCB );
    19c8:	c8 01       	movw	r24, r16
    19ca:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    19ce:	88 81       	ld	r24, Y
    19d0:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    19d2:	88 f2       	brcs	.-94     	; 0x1976 <prvIdleTask+0x10>
    19d4:	4a dc       	rcall	.-1900   	; 0x126a <vPortYield>
    19d6:	cf cf       	rjmp	.-98     	; 0x1976 <prvIdleTask+0x10>

000019d8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    19d8:	80 91 4d 0a 	lds	r24, 0x0A4D	; 0x800a4d <uxSchedulerSuspended>
    19dc:	81 11       	cpse	r24, r1
    19de:	13 c0       	rjmp	.+38     	; 0x1a06 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    19e0:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <uxTopReadyPriority>
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	fc 01       	movw	r30, r24
    19e8:	ee 0f       	add	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	8e 0f       	add	r24, r30
    19f6:	9f 1f       	adc	r25, r31
    19f8:	fc 01       	movw	r30, r24
    19fa:	e3 58       	subi	r30, 0x83	; 131
    19fc:	f5 4f       	sbci	r31, 0xF5	; 245
    19fe:	80 81       	ld	r24, Z
    1a00:	88 23       	and	r24, r24
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <vTaskSwitchContext+0x36>
    1a04:	1b c0       	rjmp	.+54     	; 0x1a3c <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 4b 0a 	sts	0x0A4B, r24	; 0x800a4b <xMissedYield>
    1a0c:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1a0e:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <uxTopReadyPriority>
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	80 93 4f 0a 	sts	0x0A4F, r24	; 0x800a4f <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1a18:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <uxTopReadyPriority>
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	fc 01       	movw	r30, r24
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	8e 0f       	add	r24, r30
    1a2e:	9f 1f       	adc	r25, r31
    1a30:	fc 01       	movw	r30, r24
    1a32:	e3 58       	subi	r30, 0x83	; 131
    1a34:	f5 4f       	sbci	r31, 0xF5	; 245
    1a36:	80 81       	ld	r24, Z
    1a38:	88 23       	and	r24, r24
    1a3a:	49 f3       	breq	.-46     	; 0x1a0e <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1a3c:	80 91 4f 0a 	lds	r24, 0x0A4F	; 0x800a4f <uxTopReadyPriority>
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9c 01       	movw	r18, r24
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	28 0f       	add	r18, r24
    1a52:	39 1f       	adc	r19, r25
    1a54:	d9 01       	movw	r26, r18
    1a56:	a3 58       	subi	r26, 0x83	; 131
    1a58:	b5 4f       	sbci	r27, 0xF5	; 245
    1a5a:	11 96       	adiw	r26, 0x01	; 1
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	12 97       	sbiw	r26, 0x02	; 2
    1a62:	02 80       	ldd	r0, Z+2	; 0x02
    1a64:	f3 81       	ldd	r31, Z+3	; 0x03
    1a66:	e0 2d       	mov	r30, r0
    1a68:	12 96       	adiw	r26, 0x02	; 2
    1a6a:	fc 93       	st	X, r31
    1a6c:	ee 93       	st	-X, r30
    1a6e:	11 97       	sbiw	r26, 0x01	; 1
    1a70:	20 58       	subi	r18, 0x80	; 128
    1a72:	35 4f       	sbci	r19, 0xF5	; 245
    1a74:	e2 17       	cp	r30, r18
    1a76:	f3 07       	cpc	r31, r19
    1a78:	29 f4       	brne	.+10     	; 0x1a84 <vTaskSwitchContext+0xac>
    1a7a:	22 81       	ldd	r18, Z+2	; 0x02
    1a7c:	33 81       	ldd	r19, Z+3	; 0x03
    1a7e:	fd 01       	movw	r30, r26
    1a80:	32 83       	std	Z+2, r19	; 0x02
    1a82:	21 83       	std	Z+1, r18	; 0x01
    1a84:	fc 01       	movw	r30, r24
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	8e 0f       	add	r24, r30
    1a94:	9f 1f       	adc	r25, r31
    1a96:	fc 01       	movw	r30, r24
    1a98:	e3 58       	subi	r30, 0x83	; 131
    1a9a:	f5 4f       	sbci	r31, 0xF5	; 245
    1a9c:	01 80       	ldd	r0, Z+1	; 0x01
    1a9e:	f2 81       	ldd	r31, Z+2	; 0x02
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	86 81       	ldd	r24, Z+6	; 0x06
    1aa4:	97 81       	ldd	r25, Z+7	; 0x07
    1aa6:	90 93 a2 0a 	sts	0x0AA2, r25	; 0x800aa2 <pxCurrentTCB+0x1>
    1aaa:	80 93 a1 0a 	sts	0x0AA1, r24	; 0x800aa1 <pxCurrentTCB>
    1aae:	08 95       	ret

00001ab0 <__udivmodqi4>:
    1ab0:	99 1b       	sub	r25, r25
    1ab2:	79 e0       	ldi	r23, 0x09	; 9
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <__udivmodqi4_ep>

00001ab6 <__udivmodqi4_loop>:
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	96 17       	cp	r25, r22
    1aba:	08 f0       	brcs	.+2      	; 0x1abe <__udivmodqi4_ep>
    1abc:	96 1b       	sub	r25, r22

00001abe <__udivmodqi4_ep>:
    1abe:	88 1f       	adc	r24, r24
    1ac0:	7a 95       	dec	r23
    1ac2:	c9 f7       	brne	.-14     	; 0x1ab6 <__udivmodqi4_loop>
    1ac4:	80 95       	com	r24
    1ac6:	08 95       	ret

00001ac8 <__udivmodsi4>:
    1ac8:	a1 e2       	ldi	r26, 0x21	; 33
    1aca:	1a 2e       	mov	r1, r26
    1acc:	aa 1b       	sub	r26, r26
    1ace:	bb 1b       	sub	r27, r27
    1ad0:	fd 01       	movw	r30, r26
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <__udivmodsi4_ep>

00001ad4 <__udivmodsi4_loop>:
    1ad4:	aa 1f       	adc	r26, r26
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	ee 1f       	adc	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	a2 17       	cp	r26, r18
    1ade:	b3 07       	cpc	r27, r19
    1ae0:	e4 07       	cpc	r30, r20
    1ae2:	f5 07       	cpc	r31, r21
    1ae4:	20 f0       	brcs	.+8      	; 0x1aee <__udivmodsi4_ep>
    1ae6:	a2 1b       	sub	r26, r18
    1ae8:	b3 0b       	sbc	r27, r19
    1aea:	e4 0b       	sbc	r30, r20
    1aec:	f5 0b       	sbc	r31, r21

00001aee <__udivmodsi4_ep>:
    1aee:	66 1f       	adc	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	1a 94       	dec	r1
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <__udivmodsi4_loop>
    1afa:	60 95       	com	r22
    1afc:	70 95       	com	r23
    1afe:	80 95       	com	r24
    1b00:	90 95       	com	r25
    1b02:	9b 01       	movw	r18, r22
    1b04:	ac 01       	movw	r20, r24
    1b06:	bd 01       	movw	r22, r26
    1b08:	cf 01       	movw	r24, r30
    1b0a:	08 95       	ret

00001b0c <__tablejump2__>:
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	00 24       	eor	r0, r0
    1b12:	00 1c       	adc	r0, r0
    1b14:	0b be       	out	0x3b, r0	; 59
    1b16:	07 90       	elpm	r0, Z+
    1b18:	f6 91       	elpm	r31, Z
    1b1a:	e0 2d       	mov	r30, r0
    1b1c:	09 94       	ijmp

00001b1e <memset>:
    1b1e:	dc 01       	movw	r26, r24
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <memset+0x6>
    1b22:	6d 93       	st	X+, r22
    1b24:	41 50       	subi	r20, 0x01	; 1
    1b26:	50 40       	sbci	r21, 0x00	; 0
    1b28:	e0 f7       	brcc	.-8      	; 0x1b22 <memset+0x4>
    1b2a:	08 95       	ret

00001b2c <strncpy>:
    1b2c:	fb 01       	movw	r30, r22
    1b2e:	dc 01       	movw	r26, r24
    1b30:	41 50       	subi	r20, 0x01	; 1
    1b32:	50 40       	sbci	r21, 0x00	; 0
    1b34:	48 f0       	brcs	.+18     	; 0x1b48 <strncpy+0x1c>
    1b36:	01 90       	ld	r0, Z+
    1b38:	0d 92       	st	X+, r0
    1b3a:	00 20       	and	r0, r0
    1b3c:	c9 f7       	brne	.-14     	; 0x1b30 <strncpy+0x4>
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <strncpy+0x16>
    1b40:	1d 92       	st	X+, r1
    1b42:	41 50       	subi	r20, 0x01	; 1
    1b44:	50 40       	sbci	r21, 0x00	; 0
    1b46:	e0 f7       	brcc	.-8      	; 0x1b40 <strncpy+0x14>
    1b48:	08 95       	ret

00001b4a <_exit>:
    1b4a:	f8 94       	cli

00001b4c <__stop_program>:
    1b4c:	ff cf       	rjmp	.-2      	; 0x1b4c <__stop_program>
