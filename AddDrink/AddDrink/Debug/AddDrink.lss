
AddDrink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00001c9c  00001d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000839  008001ba  008001ba  00001dea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ad5  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ff  00000000  00000000  00005b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002068  00000000  00000000  00006d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  00008df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f70  00000000  00000000  000093f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d46  00000000  00000000  0000a368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000c0ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c1       	rjmp	.+618    	; 0x26c <__ctors_end>
       2:	00 00       	nop
       4:	51 c1       	rjmp	.+674    	; 0x2a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	4f c1       	rjmp	.+670    	; 0x2a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	4d c1       	rjmp	.+666    	; 0x2a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	4b c1       	rjmp	.+662    	; 0x2a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	49 c1       	rjmp	.+658    	; 0x2a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c1       	rjmp	.+654    	; 0x2a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c1       	rjmp	.+650    	; 0x2a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c1       	rjmp	.+646    	; 0x2a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c1       	rjmp	.+642    	; 0x2a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c1       	rjmp	.+638    	; 0x2a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3d c1       	rjmp	.+634    	; 0x2a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3b c1       	rjmp	.+630    	; 0x2a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_13>
      38:	37 c1       	rjmp	.+622    	; 0x2a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	35 c1       	rjmp	.+618    	; 0x2a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c1       	rjmp	.+614    	; 0x2a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	31 c1       	rjmp	.+610    	; 0x2a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c1       	rjmp	.+606    	; 0x2a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c1       	rjmp	.+602    	; 0x2a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c1       	rjmp	.+598    	; 0x2a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	29 c1       	rjmp	.+594    	; 0x2a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c1       	rjmp	.+590    	; 0x2a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	25 c1       	rjmp	.+586    	; 0x2a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	23 c1       	rjmp	.+582    	; 0x2a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c1       	rjmp	.+578    	; 0x2a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	1f c1       	rjmp	.+574    	; 0x2a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1d c1       	rjmp	.+570    	; 0x2a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1b c1       	rjmp	.+566    	; 0x2a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	19 c1       	rjmp	.+562    	; 0x2a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	17 c1       	rjmp	.+558    	; 0x2a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	15 c1       	rjmp	.+554    	; 0x2a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	13 c1       	rjmp	.+550    	; 0x2a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	11 c1       	rjmp	.+546    	; 0x2a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0f c1       	rjmp	.+542    	; 0x2a8 <__bad_interrupt>
	...

0000008c <CHARSET>:
      8c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      9c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      ac:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      bc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      cc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      dc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      ec:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      fc:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     10c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     11c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     12c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     13c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     14c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     15c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     16c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     17c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     18c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     19c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1ac:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1bc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1cc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1dc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1ec:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1fc:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     20c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     21c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     22c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     23c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     24c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     25c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000026c <__ctors_end>:
     26c:	11 24       	eor	r1, r1
     26e:	1f be       	out	0x3f, r1	; 63
     270:	cf ef       	ldi	r28, 0xFF	; 255
     272:	d0 e4       	ldi	r29, 0x40	; 64
     274:	de bf       	out	0x3e, r29	; 62
     276:	cd bf       	out	0x3d, r28	; 61

00000278 <__do_copy_data>:
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b1 e0       	ldi	r27, 0x01	; 1
     27e:	ec e9       	ldi	r30, 0x9C	; 156
     280:	fc e1       	ldi	r31, 0x1C	; 28
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	aa 3b       	cpi	r26, 0xBA	; 186
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	29 e0       	ldi	r18, 0x09	; 9
     294:	aa eb       	ldi	r26, 0xBA	; 186
     296:	b1 e0       	ldi	r27, 0x01	; 1
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a3 3f       	cpi	r26, 0xF3	; 243
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>
     2a2:	60 d6       	rcall	.+3264   	; 0xf64 <main>
     2a4:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <_exit>

000002a8 <__bad_interrupt>:
     2a8:	ab ce       	rjmp	.-682    	; 0x0 <__vectors>

000002aa <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     2b0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     2b4:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__data_end>
     2b8:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <__data_end+0x1>
     2bc:	c9 01       	movw	r24, r18
     2be:	8c 0f       	add	r24, r28
     2c0:	9d 1f       	adc	r25, r29
     2c2:	8c 3d       	cpi	r24, 0xDC	; 220
     2c4:	45 e0       	ldi	r20, 0x05	; 5
     2c6:	94 07       	cpc	r25, r20
     2c8:	58 f4       	brcc	.+22     	; 0x2e0 <pvPortMalloc+0x36>
     2ca:	28 17       	cp	r18, r24
     2cc:	39 07       	cpc	r19, r25
     2ce:	58 f4       	brcc	.+22     	; 0x2e6 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     2d0:	e9 01       	movw	r28, r18
     2d2:	c4 54       	subi	r28, 0x44	; 68
     2d4:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
     2d6:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <__data_end+0x1>
     2da:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <__data_end>
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     2e0:	c0 e0       	ldi	r28, 0x00	; 0
     2e2:	d0 e0       	ldi	r29, 0x00	; 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <pvPortMalloc+0x40>
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     2ea:	0e 94 af 0c 	call	0x195e	; 0x195e <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     2ee:	ce 01       	movw	r24, r28
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     2f6:	08 95       	ret

000002f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     2f8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     2fa:	03 96       	adiw	r24, 0x03	; 3
     2fc:	92 83       	std	Z+2, r25	; 0x02
     2fe:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     300:	2f ef       	ldi	r18, 0xFF	; 255
     302:	3f ef       	ldi	r19, 0xFF	; 255
     304:	34 83       	std	Z+4, r19	; 0x04
     306:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     308:	96 83       	std	Z+6, r25	; 0x06
     30a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     30c:	90 87       	std	Z+8, r25	; 0x08
     30e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     310:	10 82       	st	Z, r1
     312:	08 95       	ret

00000314 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     314:	fc 01       	movw	r30, r24
     316:	11 86       	std	Z+9, r1	; 0x09
     318:	10 86       	std	Z+8, r1	; 0x08
     31a:	08 95       	ret

0000031c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	fc 01       	movw	r30, r24
     322:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     324:	21 81       	ldd	r18, Z+1	; 0x01
     326:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     328:	e9 01       	movw	r28, r18
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	13 96       	adiw	r26, 0x03	; 3
     330:	9c 93       	st	X, r25
     332:	8e 93       	st	-X, r24
     334:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     336:	81 81       	ldd	r24, Z+1	; 0x01
     338:	92 81       	ldd	r25, Z+2	; 0x02
     33a:	15 96       	adiw	r26, 0x05	; 5
     33c:	9c 93       	st	X, r25
     33e:	8e 93       	st	-X, r24
     340:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     342:	8a 81       	ldd	r24, Y+2	; 0x02
     344:	9b 81       	ldd	r25, Y+3	; 0x03
     346:	ec 01       	movw	r28, r24
     348:	7d 83       	std	Y+5, r23	; 0x05
     34a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     34c:	e9 01       	movw	r28, r18
     34e:	7b 83       	std	Y+3, r23	; 0x03
     350:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     352:	72 83       	std	Z+2, r23	; 0x02
     354:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     356:	19 96       	adiw	r26, 0x09	; 9
     358:	fc 93       	st	X, r31
     35a:	ee 93       	st	-X, r30
     35c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     35e:	80 81       	ld	r24, Z
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	80 83       	st	Z, r24
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     370:	48 81       	ld	r20, Y
     372:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     374:	4f 3f       	cpi	r20, 0xFF	; 255
     376:	2f ef       	ldi	r18, 0xFF	; 255
     378:	52 07       	cpc	r21, r18
     37a:	31 f4       	brne	.+12     	; 0x388 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     37c:	dc 01       	movw	r26, r24
     37e:	17 96       	adiw	r26, 0x07	; 7
     380:	ed 91       	ld	r30, X+
     382:	fc 91       	ld	r31, X
     384:	18 97       	sbiw	r26, 0x08	; 8
     386:	17 c0       	rjmp	.+46     	; 0x3b6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     388:	fc 01       	movw	r30, r24
     38a:	33 96       	adiw	r30, 0x03	; 3
     38c:	dc 01       	movw	r26, r24
     38e:	15 96       	adiw	r26, 0x05	; 5
     390:	2d 91       	ld	r18, X+
     392:	3c 91       	ld	r19, X
     394:	16 97       	sbiw	r26, 0x06	; 6
     396:	d9 01       	movw	r26, r18
     398:	2d 91       	ld	r18, X+
     39a:	3c 91       	ld	r19, X
     39c:	42 17       	cp	r20, r18
     39e:	53 07       	cpc	r21, r19
     3a0:	50 f0       	brcs	.+20     	; 0x3b6 <vListInsert+0x4c>
     3a2:	02 80       	ldd	r0, Z+2	; 0x02
     3a4:	f3 81       	ldd	r31, Z+3	; 0x03
     3a6:	e0 2d       	mov	r30, r0
     3a8:	a2 81       	ldd	r26, Z+2	; 0x02
     3aa:	b3 81       	ldd	r27, Z+3	; 0x03
     3ac:	2d 91       	ld	r18, X+
     3ae:	3c 91       	ld	r19, X
     3b0:	42 17       	cp	r20, r18
     3b2:	53 07       	cpc	r21, r19
     3b4:	b0 f7       	brcc	.-20     	; 0x3a2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     3b6:	a2 81       	ldd	r26, Z+2	; 0x02
     3b8:	b3 81       	ldd	r27, Z+3	; 0x03
     3ba:	bb 83       	std	Y+3, r27	; 0x03
     3bc:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     3be:	15 96       	adiw	r26, 0x05	; 5
     3c0:	dc 93       	st	X, r29
     3c2:	ce 93       	st	-X, r28
     3c4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     3c6:	fd 83       	std	Y+5, r31	; 0x05
     3c8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     3ca:	d3 83       	std	Z+3, r29	; 0x03
     3cc:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     3ce:	99 87       	std	Y+9, r25	; 0x09
     3d0:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 81       	ld	r18, Z
     3d6:	2f 5f       	subi	r18, 0xFF	; 255
     3d8:	20 83       	st	Z, r18
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     3e0:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3e2:	a2 81       	ldd	r26, Z+2	; 0x02
     3e4:	b3 81       	ldd	r27, Z+3	; 0x03
     3e6:	84 81       	ldd	r24, Z+4	; 0x04
     3e8:	95 81       	ldd	r25, Z+5	; 0x05
     3ea:	15 96       	adiw	r26, 0x05	; 5
     3ec:	9c 93       	st	X, r25
     3ee:	8e 93       	st	-X, r24
     3f0:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3f2:	a4 81       	ldd	r26, Z+4	; 0x04
     3f4:	b5 81       	ldd	r27, Z+5	; 0x05
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	93 81       	ldd	r25, Z+3	; 0x03
     3fa:	13 96       	adiw	r26, 0x03	; 3
     3fc:	9c 93       	st	X, r25
     3fe:	8e 93       	st	-X, r24
     400:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     402:	a0 85       	ldd	r26, Z+8	; 0x08
     404:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     406:	11 96       	adiw	r26, 0x01	; 1
     408:	8d 91       	ld	r24, X+
     40a:	9c 91       	ld	r25, X
     40c:	12 97       	sbiw	r26, 0x02	; 2
     40e:	e8 17       	cp	r30, r24
     410:	f9 07       	cpc	r31, r25
     412:	31 f4       	brne	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     414:	84 81       	ldd	r24, Z+4	; 0x04
     416:	95 81       	ldd	r25, Z+5	; 0x05
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	9c 93       	st	X, r25
     41c:	8e 93       	st	-X, r24
     41e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     420:	11 86       	std	Z+9, r1	; 0x09
     422:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     424:	8c 91       	ld	r24, X
     426:	81 50       	subi	r24, 0x01	; 1
     428:	8c 93       	st	X, r24
     42a:	08 95       	ret

0000042c <GetKeypadKey>:
}

enum AddDrinkState {add_drink_init,drink_exists,drink_type,drink_volume,drink_ac,drink_confirm} add_drink_state;	
	
void AddDrink_Init(){
	add_drink_state = add_drink_init;
     42c:	8e ef       	ldi	r24, 0xFE	; 254
     42e:	88 b9       	out	0x08, r24	; 8
     430:	00 00       	nop
     432:	86 b1       	in	r24, 0x06	; 6
     434:	80 95       	com	r24
     436:	84 fd       	sbrc	r24, 4
     438:	46 c0       	rjmp	.+140    	; 0x4c6 <GetKeypadKey+0x9a>
     43a:	86 b1       	in	r24, 0x06	; 6
     43c:	80 95       	com	r24
     43e:	85 fd       	sbrc	r24, 5
     440:	44 c0       	rjmp	.+136    	; 0x4ca <GetKeypadKey+0x9e>
     442:	86 b1       	in	r24, 0x06	; 6
     444:	80 95       	com	r24
     446:	86 fd       	sbrc	r24, 6
     448:	42 c0       	rjmp	.+132    	; 0x4ce <GetKeypadKey+0xa2>
     44a:	86 b1       	in	r24, 0x06	; 6
     44c:	80 95       	com	r24
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	88 0f       	add	r24, r24
     452:	89 2f       	mov	r24, r25
     454:	88 1f       	adc	r24, r24
     456:	99 0b       	sbc	r25, r25
     458:	91 95       	neg	r25
     45a:	89 2b       	or	r24, r25
     45c:	d1 f5       	brne	.+116    	; 0x4d2 <GetKeypadKey+0xa6>
     45e:	8d ef       	ldi	r24, 0xFD	; 253
     460:	88 b9       	out	0x08, r24	; 8
     462:	00 00       	nop
     464:	86 b1       	in	r24, 0x06	; 6
     466:	80 95       	com	r24
     468:	84 fd       	sbrc	r24, 4
     46a:	35 c0       	rjmp	.+106    	; 0x4d6 <GetKeypadKey+0xaa>
     46c:	86 b1       	in	r24, 0x06	; 6
     46e:	80 95       	com	r24
     470:	85 fd       	sbrc	r24, 5
     472:	33 c0       	rjmp	.+102    	; 0x4da <GetKeypadKey+0xae>
     474:	86 b1       	in	r24, 0x06	; 6
     476:	80 95       	com	r24
     478:	86 fd       	sbrc	r24, 6
     47a:	31 c0       	rjmp	.+98     	; 0x4de <GetKeypadKey+0xb2>
     47c:	86 b1       	in	r24, 0x06	; 6
     47e:	80 95       	com	r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	88 0f       	add	r24, r24
     484:	89 2f       	mov	r24, r25
     486:	88 1f       	adc	r24, r24
     488:	99 0b       	sbc	r25, r25
     48a:	91 95       	neg	r25
     48c:	89 2b       	or	r24, r25
     48e:	49 f5       	brne	.+82     	; 0x4e2 <GetKeypadKey+0xb6>
     490:	8b ef       	ldi	r24, 0xFB	; 251
     492:	88 b9       	out	0x08, r24	; 8
     494:	00 00       	nop
     496:	86 b1       	in	r24, 0x06	; 6
     498:	80 95       	com	r24
     49a:	84 fd       	sbrc	r24, 4
     49c:	24 c0       	rjmp	.+72     	; 0x4e6 <GetKeypadKey+0xba>
     49e:	86 b1       	in	r24, 0x06	; 6
     4a0:	80 95       	com	r24
     4a2:	85 fd       	sbrc	r24, 5
     4a4:	22 c0       	rjmp	.+68     	; 0x4ea <GetKeypadKey+0xbe>
     4a6:	86 b1       	in	r24, 0x06	; 6
     4a8:	80 95       	com	r24
     4aa:	86 fd       	sbrc	r24, 6
     4ac:	20 c0       	rjmp	.+64     	; 0x4ee <GetKeypadKey+0xc2>
     4ae:	86 b1       	in	r24, 0x06	; 6
     4b0:	80 95       	com	r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	88 0f       	add	r24, r24
     4b6:	89 2f       	mov	r24, r25
     4b8:	88 1f       	adc	r24, r24
     4ba:	99 0b       	sbc	r25, r25
     4bc:	91 95       	neg	r25
     4be:	89 2b       	or	r24, r25
     4c0:	c1 f4       	brne	.+48     	; 0x4f2 <GetKeypadKey+0xc6>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret
     4c6:	81 e3       	ldi	r24, 0x31	; 49
     4c8:	08 95       	ret
     4ca:	84 e3       	ldi	r24, 0x34	; 52
     4cc:	08 95       	ret
     4ce:	87 e3       	ldi	r24, 0x37	; 55
     4d0:	08 95       	ret
     4d2:	8a e2       	ldi	r24, 0x2A	; 42
     4d4:	08 95       	ret
     4d6:	82 e3       	ldi	r24, 0x32	; 50
     4d8:	08 95       	ret
     4da:	85 e3       	ldi	r24, 0x35	; 53
     4dc:	08 95       	ret
     4de:	88 e3       	ldi	r24, 0x38	; 56
     4e0:	08 95       	ret
     4e2:	80 e3       	ldi	r24, 0x30	; 48
     4e4:	08 95       	ret
     4e6:	83 e3       	ldi	r24, 0x33	; 51
     4e8:	08 95       	ret
     4ea:	86 e3       	ldi	r24, 0x36	; 54
     4ec:	08 95       	ret
     4ee:	89 e3       	ldi	r24, 0x39	; 57
     4f0:	08 95       	ret
     4f2:	83 e2       	ldi	r24, 0x23	; 35
     4f4:	08 95       	ret

000004f6 <add_drink_display>:
     4f6:	9b d5       	rcall	.+2870   	; 0x102e <nokia_lcd_clear>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	84 e1       	ldi	r24, 0x14	; 20
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	7d d6       	rcall	.+3322   	; 0x11fa <nokia_lcd_write_string>
     500:	6a e0       	ldi	r22, 0x0A	; 10
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	8c d6       	rcall	.+3352   	; 0x121e <nokia_lcd_set_cursor>
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	82 e2       	ldi	r24, 0x22	; 34
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	76 d6       	rcall	.+3308   	; 0x11fa <nokia_lcd_write_string>
     50e:	64 e1       	ldi	r22, 0x14	; 20
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	85 d6       	rcall	.+3338   	; 0x121e <nokia_lcd_set_cursor>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8a e2       	ldi	r24, 0x2A	; 42
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	6f d6       	rcall	.+3294   	; 0x11fa <nokia_lcd_write_string>
     51c:	6e e1       	ldi	r22, 0x1E	; 30
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	7e d6       	rcall	.+3324   	; 0x121e <nokia_lcd_set_cursor>
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	82 e3       	ldi	r24, 0x32	; 50
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	68 d6       	rcall	.+3280   	; 0x11fa <nokia_lcd_write_string>
     52a:	68 e2       	ldi	r22, 0x28	; 40
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	77 d6       	rcall	.+3310   	; 0x121e <nokia_lcd_set_cursor>
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	8c e3       	ldi	r24, 0x3C	; 60
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	61 d6       	rcall	.+3266   	; 0x11fa <nokia_lcd_write_string>
     538:	77 c6       	rjmp	.+3310   	; 0x1228 <nokia_lcd_render>
     53a:	08 95       	ret

0000053c <add_drink_volume_display>:
     53c:	78 d5       	rcall	.+2800   	; 0x102e <nokia_lcd_clear>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	85 e4       	ldi	r24, 0x45	; 69
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	5a d6       	rcall	.+3252   	; 0x11fa <nokia_lcd_write_string>
     546:	6a e0       	ldi	r22, 0x0A	; 10
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	69 d6       	rcall	.+3282   	; 0x121e <nokia_lcd_set_cursor>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	8b e4       	ldi	r24, 0x4B	; 75
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	53 d6       	rcall	.+3238   	; 0x11fa <nokia_lcd_write_string>
     554:	69 c6       	rjmp	.+3282   	; 0x1228 <nokia_lcd_render>
     556:	08 95       	ret

00000558 <add_drink_ac_display>:
     558:	6a d5       	rcall	.+2772   	; 0x102e <nokia_lcd_clear>
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	87 e5       	ldi	r24, 0x57	; 87
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	4c d6       	rcall	.+3224   	; 0x11fa <nokia_lcd_write_string>
     562:	6a e0       	ldi	r22, 0x0A	; 10
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	5b d6       	rcall	.+3254   	; 0x121e <nokia_lcd_set_cursor>
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	85 e6       	ldi	r24, 0x65	; 101
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	45 d6       	rcall	.+3210   	; 0x11fa <nokia_lcd_write_string>
     570:	5b c6       	rjmp	.+3254   	; 0x1228 <nokia_lcd_render>
     572:	08 95       	ret

00000574 <add_drink_variable_reset>:
     574:	10 92 9d 07 	sts	0x079D, r1	; 0x80079d <add_drink_selection>
     578:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <add_drink_prev_select>
     57c:	e0 e0       	ldi	r30, 0x00	; 0
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	8f e5       	ldi	r24, 0x5F	; 95
     582:	80 83       	st	Z, r24
     584:	11 82       	std	Z+1, r1	; 0x01
     586:	12 82       	std	Z+2, r1	; 0x02
     588:	13 82       	std	Z+3, r1	; 0x03
     58a:	08 95       	ret

0000058c <AddDrink_Tick>:
}

void AddDrink_Tick(){
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
	//Actions
	switch(add_drink_state){
     598:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <add_drink_state>
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	09 f4       	brne	.+2      	; 0x5a2 <AddDrink_Tick+0x16>
     5a0:	47 c0       	rjmp	.+142    	; 0x630 <AddDrink_Tick+0xa4>
     5a2:	28 f4       	brcc	.+10     	; 0x5ae <AddDrink_Tick+0x22>
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	81 f0       	breq	.+32     	; 0x5c8 <AddDrink_Tick+0x3c>
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	41 f1       	breq	.+80     	; 0x5fc <AddDrink_Tick+0x70>
     5ac:	45 c2       	rjmp	.+1162   	; 0xa38 <AddDrink_Tick+0x4ac>
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <AddDrink_Tick+0x28>
     5b2:	5f c1       	rjmp	.+702    	; 0x872 <AddDrink_Tick+0x2e6>
     5b4:	85 30       	cpi	r24, 0x05	; 5
     5b6:	09 f4       	brne	.+2      	; 0x5ba <AddDrink_Tick+0x2e>
     5b8:	2c c2       	rjmp	.+1112   	; 0xa12 <AddDrink_Tick+0x486>
     5ba:	3e c2       	rjmp	.+1148   	; 0xa38 <AddDrink_Tick+0x4ac>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5bc:	8f e4       	ldi	r24, 0x4F	; 79
     5be:	93 ec       	ldi	r25, 0xC3	; 195
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <AddDrink_Tick+0x34>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <AddDrink_Tick+0x3a>
     5c6:	00 00       	nop
		case add_drink_init:
			break;
			
		case drink_exists:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     5c8:	31 df       	rcall	.-414    	; 0x42c <GetKeypadKey>
     5ca:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
     5ce:	88 23       	and	r24, r24
     5d0:	a9 f3       	breq	.-22     	; 0x5bc <AddDrink_Tick+0x30>
     5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <AddDrink_Tick+0x54>
     5d4:	8f e4       	ldi	r24, 0x4F	; 79
     5d6:	93 ec       	ldi	r25, 0xC3	; 195
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <AddDrink_Tick+0x4c>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <AddDrink_Tick+0x52>
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
     5de:	00 00       	nop
     5e0:	25 df       	rcall	.-438    	; 0x42c <GetKeypadKey>
     5e2:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <add_drink_prev_select>
     5e6:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <add_drink_selection>
     5ea:	89 17       	cp	r24, r25
     5ec:	99 f3       	breq	.-26     	; 0x5d4 <AddDrink_Tick+0x48>
     5ee:	24 c2       	rjmp	.+1096   	; 0xa38 <AddDrink_Tick+0x4ac>
     5f0:	8f e4       	ldi	r24, 0x4F	; 79
     5f2:	93 ec       	ldi	r25, 0xC3	; 195
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <AddDrink_Tick+0x68>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <AddDrink_Tick+0x6e>
			break;
			
		case drink_type:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     5fa:	00 00       	nop
     5fc:	17 df       	rcall	.-466    	; 0x42c <GetKeypadKey>
     5fe:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
     602:	88 23       	and	r24, r24
     604:	a9 f3       	breq	.-22     	; 0x5f0 <AddDrink_Tick+0x64>
     606:	06 c0       	rjmp	.+12     	; 0x614 <AddDrink_Tick+0x88>
     608:	8f e4       	ldi	r24, 0x4F	; 79
     60a:	93 ec       	ldi	r25, 0xC3	; 195
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <AddDrink_Tick+0x80>
     610:	00 c0       	rjmp	.+0      	; 0x612 <AddDrink_Tick+0x86>
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
     612:	00 00       	nop
     614:	0b df       	rcall	.-490    	; 0x42c <GetKeypadKey>
     616:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <add_drink_prev_select>
     61a:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <add_drink_selection>
     61e:	89 17       	cp	r24, r25
     620:	99 f3       	breq	.-26     	; 0x608 <AddDrink_Tick+0x7c>
     622:	0a c2       	rjmp	.+1044   	; 0xa38 <AddDrink_Tick+0x4ac>
     624:	8f e4       	ldi	r24, 0x4F	; 79
     626:	93 ec       	ldi	r25, 0xC3	; 195
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <AddDrink_Tick+0x9c>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <AddDrink_Tick+0xa2>
			break;
			
		case drink_volume:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     62e:	00 00       	nop
     630:	fd de       	rcall	.-518    	; 0x42c <GetKeypadKey>
     632:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
     636:	88 23       	and	r24, r24
     638:	a9 f3       	breq	.-22     	; 0x624 <AddDrink_Tick+0x98>
     63a:	06 c0       	rjmp	.+12     	; 0x648 <AddDrink_Tick+0xbc>
     63c:	8f e4       	ldi	r24, 0x4F	; 79
     63e:	93 ec       	ldi	r25, 0xC3	; 195
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <AddDrink_Tick+0xb4>
     644:	00 c0       	rjmp	.+0      	; 0x646 <AddDrink_Tick+0xba>
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
     646:	00 00       	nop
     648:	f1 de       	rcall	.-542    	; 0x42c <GetKeypadKey>
     64a:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <add_drink_prev_select>
     64e:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <add_drink_selection>
     652:	89 17       	cp	r24, r25
     654:	99 f3       	breq	.-26     	; 0x63c <AddDrink_Tick+0xb0>
					nokia_lcd_render();
				}
				
				else if(add_drink_selection == '*'){
					volume_of_drink = 0;
					number_output[0] = '_';
     656:	c0 e0       	ldi	r28, 0x00	; 0
     658:	d1 e0       	ldi	r29, 0x01	; 1
     65a:	1f e5       	ldi	r17, 0x5F	; 95
     65c:	fe c0       	rjmp	.+508    	; 0x85a <AddDrink_Tick+0x2ce>
		case drink_volume:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
				
			while(add_drink_selection != '#'){
				if(add_drink_selection != '\0' && add_drink_selection != '*' && volume_of_drink == 0){
     65e:	88 23       	and	r24, r24
     660:	09 f4       	brne	.+2      	; 0x664 <AddDrink_Tick+0xd8>
     662:	e8 c0       	rjmp	.+464    	; 0x834 <AddDrink_Tick+0x2a8>
     664:	8a 32       	cpi	r24, 0x2A	; 42
     666:	09 f4       	brne	.+2      	; 0x66a <AddDrink_Tick+0xde>
     668:	bf c0       	rjmp	.+382    	; 0x7e8 <AddDrink_Tick+0x25c>
     66a:	20 91 99 07 	lds	r18, 0x0799	; 0x800799 <volume_of_drink>
     66e:	30 91 9a 07 	lds	r19, 0x079A	; 0x80079a <volume_of_drink+0x1>
     672:	21 15       	cp	r18, r1
     674:	31 05       	cpc	r19, r1
     676:	09 f5       	brne	.+66     	; 0x6ba <AddDrink_Tick+0x12e>
					volume_of_drink = add_drink_selection - '0';
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	20 53       	subi	r18, 0x30	; 48
     67e:	31 09       	sbc	r19, r1
     680:	30 93 9a 07 	sts	0x079A, r19	; 0x80079a <volume_of_drink+0x1>
     684:	20 93 99 07 	sts	0x0799, r18	; 0x800799 <volume_of_drink>
					number_output[0] =  add_drink_selection;
					nokia_lcd_clear();
     688:	88 83       	st	Y, r24
					nokia_lcd_write_string("Enter",1);
     68a:	d1 d4       	rcall	.+2466   	; 0x102e <nokia_lcd_clear>
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	85 e4       	ldi	r24, 0x45	; 69
     690:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_set_cursor(0,10);
     692:	b3 d5       	rcall	.+2918   	; 0x11fa <nokia_lcd_write_string>
     694:	6a e0       	ldi	r22, 0x0A	; 10
     696:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_write_string("Volume (mL)",1);
     698:	c2 d5       	rcall	.+2948   	; 0x121e <nokia_lcd_set_cursor>
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	8b e4       	ldi	r24, 0x4B	; 75
     69e:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_set_cursor(0,20);
     6a0:	ac d5       	rcall	.+2904   	; 0x11fa <nokia_lcd_write_string>
     6a2:	64 e1       	ldi	r22, 0x14	; 20
     6a4:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_write_string(number_output,1);
     6a6:	bb d5       	rcall	.+2934   	; 0x121e <nokia_lcd_set_cursor>
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	ce 01       	movw	r24, r28
     6ac:	a6 d5       	rcall	.+2892   	; 0x11fa <nokia_lcd_write_string>
					nokia_lcd_write_string(" (mL)",1);
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	81 e5       	ldi	r24, 0x51	; 81
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	a2 d5       	rcall	.+2884   	; 0x11fa <nokia_lcd_write_string>
     6b6:	b8 d5       	rcall	.+2928   	; 0x1228 <nokia_lcd_render>
					nokia_lcd_render();
     6b8:	bd c0       	rjmp	.+378    	; 0x834 <AddDrink_Tick+0x2a8>
     6ba:	a9 01       	movw	r20, r18
     6bc:	41 50       	subi	r20, 0x01	; 1
				}
				
				else if(add_drink_selection != '\0' && add_drink_selection != '*' && volume_of_drink >= 1 && volume_of_drink <= 9){
     6be:	51 09       	sbc	r21, r1
     6c0:	49 30       	cpi	r20, 0x09	; 9
     6c2:	51 05       	cpc	r21, r1
     6c4:	60 f5       	brcc	.+88     	; 0x71e <AddDrink_Tick+0x192>
     6c6:	a9 01       	movw	r20, r18
     6c8:	44 0f       	add	r20, r20
					volume_of_drink = (volume_of_drink * 10) + (add_drink_selection - '0');
     6ca:	55 1f       	adc	r21, r21
     6cc:	22 0f       	add	r18, r18
     6ce:	33 1f       	adc	r19, r19
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	22 0f       	add	r18, r18
     6d6:	33 1f       	adc	r19, r19
     6d8:	24 0f       	add	r18, r20
     6da:	35 1f       	adc	r19, r21
     6dc:	28 0f       	add	r18, r24
     6de:	31 1d       	adc	r19, r1
     6e0:	20 53       	subi	r18, 0x30	; 48
     6e2:	31 09       	sbc	r19, r1
     6e4:	30 93 9a 07 	sts	0x079A, r19	; 0x80079a <volume_of_drink+0x1>
     6e8:	20 93 99 07 	sts	0x0799, r18	; 0x800799 <volume_of_drink>
					number_output[1] =  add_drink_selection;
					nokia_lcd_clear();
     6ec:	89 83       	std	Y+1, r24	; 0x01
					nokia_lcd_write_string("Enter",1);
     6ee:	9f d4       	rcall	.+2366   	; 0x102e <nokia_lcd_clear>
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	85 e4       	ldi	r24, 0x45	; 69
     6f4:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_set_cursor(0,10);
     6f6:	81 d5       	rcall	.+2818   	; 0x11fa <nokia_lcd_write_string>
     6f8:	6a e0       	ldi	r22, 0x0A	; 10
					nokia_lcd_write_string("Volume (mL)",1);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 d5       	rcall	.+2848   	; 0x121e <nokia_lcd_set_cursor>
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	8b e4       	ldi	r24, 0x4B	; 75
     702:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_set_cursor(0,20);
     704:	7a d5       	rcall	.+2804   	; 0x11fa <nokia_lcd_write_string>
     706:	64 e1       	ldi	r22, 0x14	; 20
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	89 d5       	rcall	.+2834   	; 0x121e <nokia_lcd_set_cursor>
					nokia_lcd_write_string(number_output,1);
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	ce 01       	movw	r24, r28
     710:	74 d5       	rcall	.+2792   	; 0x11fa <nokia_lcd_write_string>
     712:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(" (mL)",1);
     714:	81 e5       	ldi	r24, 0x51	; 81
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	70 d5       	rcall	.+2784   	; 0x11fa <nokia_lcd_write_string>
     71a:	86 d5       	rcall	.+2828   	; 0x1228 <nokia_lcd_render>
     71c:	8b c0       	rjmp	.+278    	; 0x834 <AddDrink_Tick+0x2a8>
					nokia_lcd_render();
     71e:	a9 01       	movw	r20, r18
     720:	4a 50       	subi	r20, 0x0A	; 10
     722:	51 09       	sbc	r21, r1
				}
				
				else if(add_drink_selection != '\0' && add_drink_selection != '*' && volume_of_drink >= 10 && volume_of_drink <= 99){
     724:	4a 35       	cpi	r20, 0x5A	; 90
     726:	51 05       	cpc	r21, r1
     728:	60 f5       	brcc	.+88     	; 0x782 <AddDrink_Tick+0x1f6>
     72a:	a9 01       	movw	r20, r18
     72c:	44 0f       	add	r20, r20
					volume_of_drink = (volume_of_drink * 10) + (add_drink_selection - '0');
     72e:	55 1f       	adc	r21, r21
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	22 0f       	add	r18, r18
     73a:	33 1f       	adc	r19, r19
     73c:	24 0f       	add	r18, r20
     73e:	35 1f       	adc	r19, r21
     740:	28 0f       	add	r18, r24
     742:	31 1d       	adc	r19, r1
     744:	20 53       	subi	r18, 0x30	; 48
     746:	31 09       	sbc	r19, r1
     748:	30 93 9a 07 	sts	0x079A, r19	; 0x80079a <volume_of_drink+0x1>
					number_output[2] =  add_drink_selection;
					nokia_lcd_clear();
     74c:	20 93 99 07 	sts	0x0799, r18	; 0x800799 <volume_of_drink>
					nokia_lcd_write_string("Enter",1);
     750:	8a 83       	std	Y+2, r24	; 0x02
     752:	6d d4       	rcall	.+2266   	; 0x102e <nokia_lcd_clear>
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	85 e4       	ldi	r24, 0x45	; 69
					nokia_lcd_set_cursor(0,10);
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	4f d5       	rcall	.+2718   	; 0x11fa <nokia_lcd_write_string>
     75c:	6a e0       	ldi	r22, 0x0A	; 10
     75e:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_write_string("Volume (mL)",1);
     760:	5e d5       	rcall	.+2748   	; 0x121e <nokia_lcd_set_cursor>
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	8b e4       	ldi	r24, 0x4B	; 75
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	48 d5       	rcall	.+2704   	; 0x11fa <nokia_lcd_write_string>
					nokia_lcd_set_cursor(0,20);
     76a:	64 e1       	ldi	r22, 0x14	; 20
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	57 d5       	rcall	.+2734   	; 0x121e <nokia_lcd_set_cursor>
     770:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(number_output,1);
     772:	ce 01       	movw	r24, r28
     774:	42 d5       	rcall	.+2692   	; 0x11fa <nokia_lcd_write_string>
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	81 e5       	ldi	r24, 0x51	; 81
					nokia_lcd_write_string(" (mL)",1);
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	3e d5       	rcall	.+2684   	; 0x11fa <nokia_lcd_write_string>
     77e:	54 d5       	rcall	.+2728   	; 0x1228 <nokia_lcd_render>
     780:	59 c0       	rjmp	.+178    	; 0x834 <AddDrink_Tick+0x2a8>
     782:	a9 01       	movw	r20, r18
					nokia_lcd_render();
     784:	44 56       	subi	r20, 0x64	; 100
     786:	51 09       	sbc	r21, r1
				}
				
				else if(add_drink_selection != '\0' && add_drink_selection != '*' && volume_of_drink >= 100 && volume_of_drink <= 999){
     788:	44 38       	cpi	r20, 0x84	; 132
     78a:	53 40       	sbci	r21, 0x03	; 3
     78c:	08 f0       	brcs	.+2      	; 0x790 <AddDrink_Tick+0x204>
     78e:	52 c0       	rjmp	.+164    	; 0x834 <AddDrink_Tick+0x2a8>
     790:	a9 01       	movw	r20, r18
					volume_of_drink = (volume_of_drink * 10) + (add_drink_selection - '0');
     792:	44 0f       	add	r20, r20
     794:	55 1f       	adc	r21, r21
     796:	22 0f       	add	r18, r18
     798:	33 1f       	adc	r19, r19
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	24 0f       	add	r18, r20
     7a4:	35 1f       	adc	r19, r21
     7a6:	28 0f       	add	r18, r24
     7a8:	31 1d       	adc	r19, r1
     7aa:	20 53       	subi	r18, 0x30	; 48
     7ac:	31 09       	sbc	r19, r1
					number_output[3] =  add_drink_selection;
     7ae:	30 93 9a 07 	sts	0x079A, r19	; 0x80079a <volume_of_drink+0x1>
					nokia_lcd_clear();
     7b2:	20 93 99 07 	sts	0x0799, r18	; 0x800799 <volume_of_drink>
					nokia_lcd_write_string("Enter",1);
     7b6:	8b 83       	std	Y+3, r24	; 0x03
     7b8:	3a d4       	rcall	.+2164   	; 0x102e <nokia_lcd_clear>
     7ba:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_set_cursor(0,10);
     7bc:	85 e4       	ldi	r24, 0x45	; 69
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	1c d5       	rcall	.+2616   	; 0x11fa <nokia_lcd_write_string>
					nokia_lcd_write_string("Volume (mL)",1);
     7c2:	6a e0       	ldi	r22, 0x0A	; 10
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	2b d5       	rcall	.+2646   	; 0x121e <nokia_lcd_set_cursor>
     7c8:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_set_cursor(0,20);
     7ca:	8b e4       	ldi	r24, 0x4B	; 75
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	15 d5       	rcall	.+2602   	; 0x11fa <nokia_lcd_write_string>
					nokia_lcd_write_string(number_output,1);
     7d0:	64 e1       	ldi	r22, 0x14	; 20
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	24 d5       	rcall	.+2632   	; 0x121e <nokia_lcd_set_cursor>
					nokia_lcd_write_string(" (mL)",1);
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	ce 01       	movw	r24, r28
     7da:	0f d5       	rcall	.+2590   	; 0x11fa <nokia_lcd_write_string>
     7dc:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_render();
     7de:	81 e5       	ldi	r24, 0x51	; 81
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0b d5       	rcall	.+2582   	; 0x11fa <nokia_lcd_write_string>
				}
				
				else if(add_drink_selection == '*'){
					volume_of_drink = 0;
     7e4:	21 d5       	rcall	.+2626   	; 0x1228 <nokia_lcd_render>
     7e6:	26 c0       	rjmp	.+76     	; 0x834 <AddDrink_Tick+0x2a8>
     7e8:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <volume_of_drink+0x1>
					number_output[0] = '_';
					number_output[1] = '\0';
     7ec:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <volume_of_drink>
					number_output[2] = '\0';
					number_output[3] = '\0';
     7f0:	18 83       	st	Y, r17
					nokia_lcd_clear();
     7f2:	19 82       	std	Y+1, r1	; 0x01
     7f4:	1a 82       	std	Y+2, r1	; 0x02
					nokia_lcd_write_string("Enter",1);
     7f6:	1b 82       	std	Y+3, r1	; 0x03
     7f8:	1a d4       	rcall	.+2100   	; 0x102e <nokia_lcd_clear>
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	85 e4       	ldi	r24, 0x45	; 69
					nokia_lcd_set_cursor(0,10);
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	fc d4       	rcall	.+2552   	; 0x11fa <nokia_lcd_write_string>
     802:	6a e0       	ldi	r22, 0x0A	; 10
     804:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_write_string("Volume (mL)",1);
     806:	0b d5       	rcall	.+2582   	; 0x121e <nokia_lcd_set_cursor>
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	8b e4       	ldi	r24, 0x4B	; 75
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	f5 d4       	rcall	.+2538   	; 0x11fa <nokia_lcd_write_string>
					nokia_lcd_set_cursor(0,20);
     810:	64 e1       	ldi	r22, 0x14	; 20
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	04 d5       	rcall	.+2568   	; 0x121e <nokia_lcd_set_cursor>
     816:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(number_output,1);
     818:	ce 01       	movw	r24, r28
     81a:	ef d4       	rcall	.+2526   	; 0x11fa <nokia_lcd_write_string>
     81c:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(" (mL)",1);
     81e:	81 e5       	ldi	r24, 0x51	; 81
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	eb d4       	rcall	.+2518   	; 0x11fa <nokia_lcd_write_string>
     824:	01 d5       	rcall	.+2562   	; 0x1228 <nokia_lcd_render>
     826:	06 c0       	rjmp	.+12     	; 0x834 <AddDrink_Tick+0x2a8>
					nokia_lcd_render();
     828:	8f e4       	ldi	r24, 0x4F	; 79
     82a:	93 ec       	ldi	r25, 0xC3	; 195
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <AddDrink_Tick+0x2a0>
     830:	00 c0       	rjmp	.+0      	; 0x832 <AddDrink_Tick+0x2a6>
     832:	00 00       	nop
     834:	fb dd       	rcall	.-1034   	; 0x42c <GetKeypadKey>
     836:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
				}
				
				while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     83a:	88 23       	and	r24, r24
     83c:	a9 f3       	breq	.-22     	; 0x828 <AddDrink_Tick+0x29c>
     83e:	06 c0       	rjmp	.+12     	; 0x84c <AddDrink_Tick+0x2c0>
     840:	8f e4       	ldi	r24, 0x4F	; 79
     842:	93 ec       	ldi	r25, 0xC3	; 195
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <AddDrink_Tick+0x2b8>
     848:	00 c0       	rjmp	.+0      	; 0x84a <AddDrink_Tick+0x2be>
     84a:	00 00       	nop
     84c:	ef dd       	rcall	.-1058   	; 0x42c <GetKeypadKey>
     84e:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <add_drink_prev_select>
				while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
     852:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <add_drink_selection>
     856:	89 17       	cp	r24, r25
     858:	99 f3       	breq	.-26     	; 0x840 <AddDrink_Tick+0x2b4>
     85a:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <add_drink_selection>
     85e:	83 32       	cpi	r24, 0x23	; 35
     860:	09 f0       	breq	.+2      	; 0x864 <AddDrink_Tick+0x2d8>
			
		case drink_volume:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
				
			while(add_drink_selection != '#'){
     862:	fd ce       	rjmp	.-518    	; 0x65e <AddDrink_Tick+0xd2>
     864:	3d c3       	rjmp	.+1658   	; 0xee0 <AddDrink_Tick+0x954>
     866:	8f e4       	ldi	r24, 0x4F	; 79
     868:	93 ec       	ldi	r25, 0xC3	; 195
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <AddDrink_Tick+0x2de>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <AddDrink_Tick+0x2e4>
     870:	00 00       	nop
     872:	dc dd       	rcall	.-1096   	; 0x42c <GetKeypadKey>
				while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
			}
			break;
			
		case drink_ac:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     874:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
     878:	88 23       	and	r24, r24
     87a:	a9 f3       	breq	.-22     	; 0x866 <AddDrink_Tick+0x2da>
     87c:	06 c0       	rjmp	.+12     	; 0x88a <AddDrink_Tick+0x2fe>
     87e:	8f e4       	ldi	r24, 0x4F	; 79
     880:	93 ec       	ldi	r25, 0xC3	; 195
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <AddDrink_Tick+0x2f6>
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
     886:	00 c0       	rjmp	.+0      	; 0x888 <AddDrink_Tick+0x2fc>
     888:	00 00       	nop
     88a:	d0 dd       	rcall	.-1120   	; 0x42c <GetKeypadKey>
     88c:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <add_drink_prev_select>
     890:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <add_drink_selection>
     894:	89 17       	cp	r24, r25
					nokia_lcd_render();
				}
				
				else if(add_drink_selection == '*'){
					drink_alcohol_content = 0;
					number_output[0] = '_';
     896:	99 f3       	breq	.-26     	; 0x87e <AddDrink_Tick+0x2f2>
     898:	c0 e0       	ldi	r28, 0x00	; 0
     89a:	d1 e0       	ldi	r29, 0x01	; 1
     89c:	1f e5       	ldi	r17, 0x5F	; 95
		case drink_ac:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
			
			while(add_drink_selection != '#'){
				if(add_drink_selection != '\0' && add_drink_selection != '*' && drink_alcohol_content == 0){
     89e:	ad c0       	rjmp	.+346    	; 0x9fa <AddDrink_Tick+0x46e>
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <AddDrink_Tick+0x31a>
     8a4:	97 c0       	rjmp	.+302    	; 0x9d4 <AddDrink_Tick+0x448>
     8a6:	8a 32       	cpi	r24, 0x2A	; 42
     8a8:	09 f4       	brne	.+2      	; 0x8ac <AddDrink_Tick+0x320>
     8aa:	70 c0       	rjmp	.+224    	; 0x98c <AddDrink_Tick+0x400>
     8ac:	90 91 98 07 	lds	r25, 0x0798	; 0x800798 <drink_alcohol_content>
					drink_alcohol_content = add_drink_selection - '0';
     8b0:	91 11       	cpse	r25, r1
     8b2:	1d c0       	rjmp	.+58     	; 0x8ee <AddDrink_Tick+0x362>
					number_output[0] =  add_drink_selection;
     8b4:	90 ed       	ldi	r25, 0xD0	; 208
					nokia_lcd_clear();
     8b6:	98 0f       	add	r25, r24
					nokia_lcd_write_string("Enter Alcohol",1);
     8b8:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <drink_alcohol_content>
     8bc:	88 83       	st	Y, r24
     8be:	b7 d3       	rcall	.+1902   	; 0x102e <nokia_lcd_clear>
					nokia_lcd_set_cursor(0,10);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	87 e5       	ldi	r24, 0x57	; 87
     8c4:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_write_string("Content %",1);
     8c6:	99 d4       	rcall	.+2354   	; 0x11fa <nokia_lcd_write_string>
     8c8:	6a e0       	ldi	r22, 0x0A	; 10
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	a8 d4       	rcall	.+2384   	; 0x121e <nokia_lcd_set_cursor>
					nokia_lcd_set_cursor(0,20);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	85 e6       	ldi	r24, 0x65	; 101
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	92 d4       	rcall	.+2340   	; 0x11fa <nokia_lcd_write_string>
					nokia_lcd_write_string(number_output,1);
     8d6:	64 e1       	ldi	r22, 0x14	; 20
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	a1 d4       	rcall	.+2370   	; 0x121e <nokia_lcd_set_cursor>
     8dc:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string(" %",1);
     8de:	ce 01       	movw	r24, r28
     8e0:	8c d4       	rcall	.+2328   	; 0x11fa <nokia_lcd_write_string>
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	8c e6       	ldi	r24, 0x6C	; 108
     8e6:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_render();
     8e8:	88 d4       	rcall	.+2320   	; 0x11fa <nokia_lcd_write_string>
     8ea:	9e d4       	rcall	.+2364   	; 0x1228 <nokia_lcd_render>
				}
				
				else if(add_drink_selection != '\0' && add_drink_selection != '*' && drink_alcohol_content >= 1 && drink_alcohol_content <= 9){
     8ec:	73 c0       	rjmp	.+230    	; 0x9d4 <AddDrink_Tick+0x448>
     8ee:	2f ef       	ldi	r18, 0xFF	; 255
     8f0:	29 0f       	add	r18, r25
					drink_alcohol_content = (drink_alcohol_content * 10) + (add_drink_selection - '0');
     8f2:	29 30       	cpi	r18, 0x09	; 9
     8f4:	18 f5       	brcc	.+70     	; 0x93c <AddDrink_Tick+0x3b0>
     8f6:	99 0f       	add	r25, r25
     8f8:	29 2f       	mov	r18, r25
     8fa:	22 0f       	add	r18, r18
     8fc:	22 0f       	add	r18, r18
     8fe:	92 0f       	add	r25, r18
					number_output[1] =  add_drink_selection;
					nokia_lcd_clear();
     900:	20 ed       	ldi	r18, 0xD0	; 208
     902:	28 0f       	add	r18, r24
					nokia_lcd_write_string("Enter Alcohol",1);
     904:	92 0f       	add	r25, r18
     906:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <drink_alcohol_content>
					nokia_lcd_set_cursor(0,10);
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	90 d3       	rcall	.+1824   	; 0x102e <nokia_lcd_clear>
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	87 e5       	ldi	r24, 0x57	; 87
					nokia_lcd_write_string("Content %",1);
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	72 d4       	rcall	.+2276   	; 0x11fa <nokia_lcd_write_string>
     916:	6a e0       	ldi	r22, 0x0A	; 10
     918:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_set_cursor(0,20);
     91a:	81 d4       	rcall	.+2306   	; 0x121e <nokia_lcd_set_cursor>
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	85 e6       	ldi	r24, 0x65	; 101
					nokia_lcd_write_string(number_output,1);
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	6b d4       	rcall	.+2262   	; 0x11fa <nokia_lcd_write_string>
     924:	64 e1       	ldi	r22, 0x14	; 20
					nokia_lcd_write_string(" %",1);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	7a d4       	rcall	.+2292   	; 0x121e <nokia_lcd_set_cursor>
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	ce 01       	movw	r24, r28
					nokia_lcd_render();
     92e:	65 d4       	rcall	.+2250   	; 0x11fa <nokia_lcd_write_string>
     930:	61 e0       	ldi	r22, 0x01	; 1
				}
				
				else if(add_drink_selection != '\0' && add_drink_selection != '*' && drink_alcohol_content >= 10 && drink_alcohol_content <= 99){
     932:	8c e6       	ldi	r24, 0x6C	; 108
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	61 d4       	rcall	.+2242   	; 0x11fa <nokia_lcd_write_string>
					drink_alcohol_content = (drink_alcohol_content * 10) + (add_drink_selection - '0');
     938:	77 d4       	rcall	.+2286   	; 0x1228 <nokia_lcd_render>
     93a:	4c c0       	rjmp	.+152    	; 0x9d4 <AddDrink_Tick+0x448>
     93c:	26 ef       	ldi	r18, 0xF6	; 246
     93e:	29 0f       	add	r18, r25
     940:	2a 35       	cpi	r18, 0x5A	; 90
     942:	08 f0       	brcs	.+2      	; 0x946 <AddDrink_Tick+0x3ba>
     944:	47 c0       	rjmp	.+142    	; 0x9d4 <AddDrink_Tick+0x448>
     946:	99 0f       	add	r25, r25
     948:	29 2f       	mov	r18, r25
					number_output[2] =  add_drink_selection;
     94a:	22 0f       	add	r18, r18
					nokia_lcd_clear();
     94c:	22 0f       	add	r18, r18
     94e:	92 0f       	add	r25, r18
					nokia_lcd_write_string("Enter Alcohol",1);
     950:	20 ed       	ldi	r18, 0xD0	; 208
     952:	28 0f       	add	r18, r24
     954:	92 0f       	add	r25, r18
     956:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <drink_alcohol_content>
					nokia_lcd_set_cursor(0,10);
     95a:	8a 83       	std	Y+2, r24	; 0x02
     95c:	68 d3       	rcall	.+1744   	; 0x102e <nokia_lcd_clear>
     95e:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_string("Content %",1);
     960:	87 e5       	ldi	r24, 0x57	; 87
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	4a d4       	rcall	.+2196   	; 0x11fa <nokia_lcd_write_string>
     966:	6a e0       	ldi	r22, 0x0A	; 10
     968:	80 e0       	ldi	r24, 0x00	; 0
					nokia_lcd_set_cursor(0,20);
     96a:	59 d4       	rcall	.+2226   	; 0x121e <nokia_lcd_set_cursor>
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	85 e6       	ldi	r24, 0x65	; 101
     970:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_write_string(number_output,1);
     972:	43 d4       	rcall	.+2182   	; 0x11fa <nokia_lcd_write_string>
     974:	64 e1       	ldi	r22, 0x14	; 20
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	52 d4       	rcall	.+2212   	; 0x121e <nokia_lcd_set_cursor>
					nokia_lcd_write_string(" %",1);
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	ce 01       	movw	r24, r28
     97e:	3d d4       	rcall	.+2170   	; 0x11fa <nokia_lcd_write_string>
     980:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_render();
     982:	8c e6       	ldi	r24, 0x6C	; 108
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	39 d4       	rcall	.+2162   	; 0x11fa <nokia_lcd_write_string>
				}
				
				else if(add_drink_selection == '*'){
					drink_alcohol_content = 0;
     988:	4f d4       	rcall	.+2206   	; 0x1228 <nokia_lcd_render>
     98a:	24 c0       	rjmp	.+72     	; 0x9d4 <AddDrink_Tick+0x448>
					number_output[0] = '_';
     98c:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <drink_alcohol_content>
					number_output[1] = '\0';
					number_output[2] = '\0';
     990:	18 83       	st	Y, r17
					number_output[3] = '\0';
					nokia_lcd_clear();
     992:	19 82       	std	Y+1, r1	; 0x01
     994:	1a 82       	std	Y+2, r1	; 0x02
					nokia_lcd_write_string("Enter Alcohol",1);
     996:	1b 82       	std	Y+3, r1	; 0x03
     998:	4a d3       	rcall	.+1684   	; 0x102e <nokia_lcd_clear>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	87 e5       	ldi	r24, 0x57	; 87
     99e:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_set_cursor(0,10);
     9a0:	2c d4       	rcall	.+2136   	; 0x11fa <nokia_lcd_write_string>
     9a2:	6a e0       	ldi	r22, 0x0A	; 10
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	3b d4       	rcall	.+2166   	; 0x121e <nokia_lcd_set_cursor>
					nokia_lcd_write_string("Content %",1);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	85 e6       	ldi	r24, 0x65	; 101
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	25 d4       	rcall	.+2122   	; 0x11fa <nokia_lcd_write_string>
     9b0:	64 e1       	ldi	r22, 0x14	; 20
					nokia_lcd_set_cursor(0,20);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	34 d4       	rcall	.+2152   	; 0x121e <nokia_lcd_set_cursor>
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	ce 01       	movw	r24, r28
					nokia_lcd_write_string(number_output,1);
     9ba:	1f d4       	rcall	.+2110   	; 0x11fa <nokia_lcd_write_string>
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	8c e6       	ldi	r24, 0x6C	; 108
     9c0:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_write_string(" %",1);
     9c2:	1b d4       	rcall	.+2102   	; 0x11fa <nokia_lcd_write_string>
     9c4:	31 d4       	rcall	.+2146   	; 0x1228 <nokia_lcd_render>
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <AddDrink_Tick+0x448>
     9c8:	8f e4       	ldi	r24, 0x4F	; 79
     9ca:	93 ec       	ldi	r25, 0xC3	; 195
					nokia_lcd_render();
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <AddDrink_Tick+0x440>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <AddDrink_Tick+0x446>
     9d2:	00 00       	nop
     9d4:	2b dd       	rcall	.-1450   	; 0x42c <GetKeypadKey>
     9d6:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
     9da:	88 23       	and	r24, r24
				}
			
				
				while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     9dc:	a9 f3       	breq	.-22     	; 0x9c8 <AddDrink_Tick+0x43c>
     9de:	06 c0       	rjmp	.+12     	; 0x9ec <AddDrink_Tick+0x460>
     9e0:	8f e4       	ldi	r24, 0x4F	; 79
     9e2:	93 ec       	ldi	r25, 0xC3	; 195
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <AddDrink_Tick+0x458>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <AddDrink_Tick+0x45e>
     9ea:	00 00       	nop
     9ec:	1f dd       	rcall	.-1474   	; 0x42c <GetKeypadKey>
				while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
     9ee:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <add_drink_prev_select>
     9f2:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <add_drink_selection>
     9f6:	89 17       	cp	r24, r25
     9f8:	99 f3       	breq	.-26     	; 0x9e0 <AddDrink_Tick+0x454>
			
		case drink_ac:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
			
			while(add_drink_selection != '#'){
     9fa:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <add_drink_selection>
     9fe:	83 32       	cpi	r24, 0x23	; 35
     a00:	09 f0       	breq	.+2      	; 0xa04 <AddDrink_Tick+0x478>
     a02:	4e cf       	rjmp	.-356    	; 0x8a0 <AddDrink_Tick+0x314>
     a04:	6d c2       	rjmp	.+1242   	; 0xee0 <AddDrink_Tick+0x954>
     a06:	8f e4       	ldi	r24, 0x4F	; 79
     a08:	93 ec       	ldi	r25, 0xC3	; 195
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <AddDrink_Tick+0x47e>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <AddDrink_Tick+0x484>
				
				}
			break;
		
		case drink_confirm:
			while((add_drink_selection = GetKeypadKey()) == '\0'){ _delay_ms(200); }
     a10:	00 00       	nop
     a12:	0c dd       	rcall	.-1512   	; 0x42c <GetKeypadKey>
     a14:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
     a18:	88 23       	and	r24, r24
     a1a:	a9 f3       	breq	.-22     	; 0xa06 <AddDrink_Tick+0x47a>
     a1c:	06 c0       	rjmp	.+12     	; 0xa2a <AddDrink_Tick+0x49e>
     a1e:	8f e4       	ldi	r24, 0x4F	; 79
     a20:	93 ec       	ldi	r25, 0xC3	; 195
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <AddDrink_Tick+0x496>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <AddDrink_Tick+0x49c>
     a28:	00 00       	nop
			while((add_drink_prev_select = GetKeypadKey()) == add_drink_selection){ _delay_ms(200); }
     a2a:	00 dd       	rcall	.-1536   	; 0x42c <GetKeypadKey>
     a2c:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <add_drink_prev_select>
     a30:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <add_drink_selection>
     a34:	89 17       	cp	r24, r25
     a36:	99 f3       	breq	.-26     	; 0xa1e <AddDrink_Tick+0x492>
		default:
			break;
	}
	
	//Transitions
	switch(add_drink_state){
     a38:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <add_drink_state>
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	09 f4       	brne	.+2      	; 0xa42 <AddDrink_Tick+0x4b6>
     a40:	4f c0       	rjmp	.+158    	; 0xae0 <AddDrink_Tick+0x554>
     a42:	28 f4       	brcc	.+10     	; 0xa4e <AddDrink_Tick+0x4c2>
     a44:	88 23       	and	r24, r24
     a46:	61 f0       	breq	.+24     	; 0xa60 <AddDrink_Tick+0x4d4>
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	51 f1       	breq	.+84     	; 0xaa0 <AddDrink_Tick+0x514>
     a4c:	46 c2       	rjmp	.+1164   	; 0xeda <AddDrink_Tick+0x94e>
     a4e:	84 30       	cpi	r24, 0x04	; 4
     a50:	09 f4       	brne	.+2      	; 0xa54 <AddDrink_Tick+0x4c8>
     a52:	b9 c0       	rjmp	.+370    	; 0xbc6 <AddDrink_Tick+0x63a>
     a54:	08 f4       	brcc	.+2      	; 0xa58 <AddDrink_Tick+0x4cc>
     a56:	8d c0       	rjmp	.+282    	; 0xb72 <AddDrink_Tick+0x5e6>
     a58:	85 30       	cpi	r24, 0x05	; 5
     a5a:	09 f4       	brne	.+2      	; 0xa5e <AddDrink_Tick+0x4d2>
     a5c:	20 c2       	rjmp	.+1088   	; 0xe9e <AddDrink_Tick+0x912>
		case add_drink_init:
			if(add_drink_flag){
     a5e:	3d c2       	rjmp	.+1146   	; 0xeda <AddDrink_Tick+0x94e>
     a60:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     a64:	88 23       	and	r24, r24
				if(type_of_drink != 0){
     a66:	09 f4       	brne	.+2      	; 0xa6a <AddDrink_Tick+0x4de>
     a68:	50 c2       	rjmp	.+1184   	; 0xf0a <AddDrink_Tick+0x97e>
     a6a:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <type_of_drink>
					nokia_lcd_clear();
     a6e:	88 23       	and	r24, r24
     a70:	89 f0       	breq	.+34     	; 0xa94 <AddDrink_Tick+0x508>
					nokia_lcd_write_string("Can't add",1);
     a72:	dd d2       	rcall	.+1466   	; 0x102e <nokia_lcd_clear>
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	8f e6       	ldi	r24, 0x6F	; 111
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	bf d3       	rcall	.+1918   	; 0x11fa <nokia_lcd_write_string>
					nokia_lcd_set_cursor(0,10);
     a7c:	6a e0       	ldi	r22, 0x0A	; 10
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	ce d3       	rcall	.+1948   	; 0x121e <nokia_lcd_set_cursor>
					nokia_lcd_write_string("anymore drinks",1);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	89 e7       	ldi	r24, 0x79	; 121
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	b8 d3       	rcall	.+1904   	; 0x11fa <nokia_lcd_write_string>
     a8a:	ce d3       	rcall	.+1948   	; 0x1228 <nokia_lcd_render>
					nokia_lcd_render();
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <add_drink_state>
					add_drink_state = drink_exists;
     a92:	3b c2       	rjmp	.+1142   	; 0xf0a <AddDrink_Tick+0x97e>
     a94:	30 dd       	rcall	.-1440   	; 0x4f6 <add_drink_display>
				}
				
				else{
					add_drink_display();
     a96:	6e dd       	rcall	.-1316   	; 0x574 <add_drink_variable_reset>
     a98:	82 e0       	ldi	r24, 0x02	; 2
					add_drink_variable_reset();
     a9a:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <add_drink_state>
					add_drink_state = drink_type;
     a9e:	35 c2       	rjmp	.+1130   	; 0xf0a <AddDrink_Tick+0x97e>
     aa0:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <add_drink_selection>
     aa4:	83 32       	cpi	r24, 0x23	; 35
				}
			}
			break;
		
		case drink_exists:
			if(add_drink_selection == '#' && add_drink_flag){
     aa6:	51 f4       	brne	.+20     	; 0xabc <AddDrink_Tick+0x530>
     aa8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     aac:	88 23       	and	r24, r24
     aae:	51 f0       	breq	.+20     	; 0xac4 <AddDrink_Tick+0x538>
     ab0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <add_drink_flag>
     ab4:	5f dd       	rcall	.-1346   	; 0x574 <add_drink_variable_reset>
				add_drink_flag = 0;
     ab6:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				add_drink_variable_reset();
     aba:	27 c2       	rjmp	.+1102   	; 0xf0a <AddDrink_Tick+0x97e>
				add_drink_state = add_drink_init;
     abc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     ac0:	81 11       	cpse	r24, r1
			}
			
			else if(!add_drink_flag){
     ac2:	23 c2       	rjmp	.+1094   	; 0xf0a <AddDrink_Tick+0x97e>
     ac4:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <type_of_drink>
     ac8:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <volume_of_drink+0x1>
				type_of_drink = 0; //0=nodrink,1=beer, 2=wine,3=liquor,4=other
     acc:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <volume_of_drink>
				volume_of_drink = 0;
     ad0:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <drink_alcohol_content>
     ad4:	4f dd       	rcall	.-1378   	; 0x574 <add_drink_variable_reset>
				drink_alcohol_content = 0;
     ad6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <add_drink_flag>
				add_drink_variable_reset();
     ada:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				add_drink_flag = 0;
     ade:	15 c2       	rjmp	.+1066   	; 0xf0a <AddDrink_Tick+0x97e>
     ae0:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <add_drink_selection>
				add_drink_state = add_drink_init;
     ae4:	81 33       	cpi	r24, 0x31	; 49
			}
			
			break;
		
		case drink_type:
			if(add_drink_selection == '1' && add_drink_flag){
     ae6:	61 f4       	brne	.+24     	; 0xb00 <AddDrink_Tick+0x574>
     ae8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     aec:	88 23       	and	r24, r24
     aee:	a9 f1       	breq	.+106    	; 0xb5a <AddDrink_Tick+0x5ce>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <type_of_drink>
				type_of_drink = 1;
     af6:	22 dd       	rcall	.-1468   	; 0x53c <add_drink_volume_display>
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <add_drink_state>
				add_drink_volume_display();
     afe:	05 c2       	rjmp	.+1034   	; 0xf0a <AddDrink_Tick+0x97e>
				add_drink_state = drink_volume;
     b00:	82 33       	cpi	r24, 0x32	; 50
     b02:	61 f4       	brne	.+24     	; 0xb1c <AddDrink_Tick+0x590>
     b04:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
			}
			
			else if(add_drink_selection == '2' && add_drink_flag){
     b08:	88 23       	and	r24, r24
     b0a:	39 f1       	breq	.+78     	; 0xb5a <AddDrink_Tick+0x5ce>
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <type_of_drink>
				type_of_drink = 2;
     b12:	14 dd       	rcall	.-1496   	; 0x53c <add_drink_volume_display>
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <add_drink_state>
				add_drink_volume_display();
     b1a:	f7 c1       	rjmp	.+1006   	; 0xf0a <AddDrink_Tick+0x97e>
				add_drink_state = drink_volume;
     b1c:	83 33       	cpi	r24, 0x33	; 51
     b1e:	59 f4       	brne	.+22     	; 0xb36 <AddDrink_Tick+0x5aa>
     b20:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
			}
			
			else if(add_drink_selection == '3' && add_drink_flag){
     b24:	88 23       	and	r24, r24
     b26:	c9 f0       	breq	.+50     	; 0xb5a <AddDrink_Tick+0x5ce>
     b28:	c3 e0       	ldi	r28, 0x03	; 3
     b2a:	c0 93 9b 07 	sts	0x079B, r28	; 0x80079b <type_of_drink>
				type_of_drink = 3;
     b2e:	06 dd       	rcall	.-1524   	; 0x53c <add_drink_volume_display>
     b30:	c0 93 f2 09 	sts	0x09F2, r28	; 0x8009f2 <add_drink_state>
				add_drink_volume_display();
     b34:	ea c1       	rjmp	.+980    	; 0xf0a <AddDrink_Tick+0x97e>
     b36:	84 33       	cpi	r24, 0x34	; 52
				add_drink_state = drink_volume;
     b38:	61 f4       	brne	.+24     	; 0xb52 <AddDrink_Tick+0x5c6>
     b3a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
			}
			
			else if(add_drink_selection == '4'&& add_drink_flag){
     b3e:	88 23       	and	r24, r24
     b40:	61 f0       	breq	.+24     	; 0xb5a <AddDrink_Tick+0x5ce>
     b42:	84 e0       	ldi	r24, 0x04	; 4
     b44:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <type_of_drink>
				type_of_drink = 4;
     b48:	f9 dc       	rcall	.-1550   	; 0x53c <add_drink_volume_display>
     b4a:	83 e0       	ldi	r24, 0x03	; 3
				add_drink_volume_display();
     b4c:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <add_drink_state>
				add_drink_state = drink_volume;
     b50:	dc c1       	rjmp	.+952    	; 0xf0a <AddDrink_Tick+0x97e>
     b52:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     b56:	81 11       	cpse	r24, r1
			}
			
			else if(!add_drink_flag){
     b58:	d8 c1       	rjmp	.+944    	; 0xf0a <AddDrink_Tick+0x97e>
     b5a:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <type_of_drink>
     b5e:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <volume_of_drink+0x1>
				type_of_drink = 0; //0=nodrink,1=beer, 2=wine,3=liquor,4=other
     b62:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <volume_of_drink>
				volume_of_drink = 0;
     b66:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <drink_alcohol_content>
     b6a:	04 dd       	rcall	.-1528   	; 0x574 <add_drink_variable_reset>
				drink_alcohol_content = 0;
     b6c:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				add_drink_variable_reset();
     b70:	cc c1       	rjmp	.+920    	; 0xf0a <AddDrink_Tick+0x97e>
     b72:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <add_drink_selection>
				add_drink_state = add_drink_init;
     b76:	83 32       	cpi	r24, 0x23	; 35
     b78:	b1 f4       	brne	.+44     	; 0xba6 <AddDrink_Tick+0x61a>
			}
			
			break;
		
		case drink_volume:
			if(add_drink_selection == '#' && volume_of_drink != 0 && add_drink_flag){
     b7a:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <volume_of_drink>
     b7e:	90 91 9a 07 	lds	r25, 0x079A	; 0x80079a <volume_of_drink+0x1>
     b82:	89 2b       	or	r24, r25
     b84:	81 f0       	breq	.+32     	; 0xba6 <AddDrink_Tick+0x61a>
     b86:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     b8a:	88 23       	and	r24, r24
     b8c:	81 f0       	breq	.+32     	; 0xbae <AddDrink_Tick+0x622>
     b8e:	e0 e0       	ldi	r30, 0x00	; 0
     b90:	f1 e0       	ldi	r31, 0x01	; 1
     b92:	8f e5       	ldi	r24, 0x5F	; 95
     b94:	80 83       	st	Z, r24
				number_output[0] = '_';
     b96:	11 82       	std	Z+1, r1	; 0x01
     b98:	12 82       	std	Z+2, r1	; 0x02
     b9a:	13 82       	std	Z+3, r1	; 0x03
     b9c:	dd dc       	rcall	.-1606   	; 0x558 <add_drink_ac_display>
				number_output[1] = '\0';
     b9e:	84 e0       	ldi	r24, 0x04	; 4
				number_output[2] = '\0';
				number_output[3] = '\0';
     ba0:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <add_drink_state>
				add_drink_ac_display();
     ba4:	b2 c1       	rjmp	.+868    	; 0xf0a <AddDrink_Tick+0x97e>
				add_drink_state = drink_ac;
     ba6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     baa:	81 11       	cpse	r24, r1
     bac:	ae c1       	rjmp	.+860    	; 0xf0a <AddDrink_Tick+0x97e>
			}
			
			else if(!add_drink_flag){
     bae:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <type_of_drink>
     bb2:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <volume_of_drink+0x1>
				type_of_drink = 0; //0=nodrink,1=beer, 2=wine,3=liquor,4=other
     bb6:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <volume_of_drink>
				volume_of_drink = 0;
     bba:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <drink_alcohol_content>
     bbe:	da dc       	rcall	.-1612   	; 0x574 <add_drink_variable_reset>
				drink_alcohol_content = 0;
     bc0:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				add_drink_variable_reset();
     bc4:	a2 c1       	rjmp	.+836    	; 0xf0a <AddDrink_Tick+0x97e>
				add_drink_state = add_drink_init;
     bc6:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <add_drink_selection>
     bca:	83 32       	cpi	r24, 0x23	; 35
				add_drink_state = drink_volume;
			}
			break;
		
		case drink_ac:
			if(add_drink_selection == '#' && drink_alcohol_content != 0 && add_drink_flag){
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <AddDrink_Tick+0x644>
     bce:	57 c1       	rjmp	.+686    	; 0xe7e <AddDrink_Tick+0x8f2>
     bd0:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <drink_alcohol_content>
     bd4:	88 23       	and	r24, r24
     bd6:	09 f4       	brne	.+2      	; 0xbda <AddDrink_Tick+0x64e>
     bd8:	52 c1       	rjmp	.+676    	; 0xe7e <AddDrink_Tick+0x8f2>
     bda:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     bde:	88 23       	and	r24, r24
     be0:	09 f4       	brne	.+2      	; 0xbe4 <AddDrink_Tick+0x658>
     be2:	51 c1       	rjmp	.+674    	; 0xe86 <AddDrink_Tick+0x8fa>
     be4:	24 d2       	rcall	.+1096   	; 0x102e <nokia_lcd_clear>
				
				nokia_lcd_clear();
     be6:	e0 91 9b 07 	lds	r30, 0x079B	; 0x80079b <type_of_drink>
				nokia_lcd_write_string(drink_names[type_of_drink],1);
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	eb 5f       	subi	r30, 0xFB	; 251
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	80 81       	ld	r24, Z
     bf8:	91 81       	ldd	r25, Z+1	; 0x01
     bfa:	ff d2       	rcall	.+1534   	; 0x11fa <nokia_lcd_write_string>
     bfc:	6a e0       	ldi	r22, 0x0A	; 10
				nokia_lcd_set_cursor(0,10);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e d3       	rcall	.+1564   	; 0x121e <nokia_lcd_set_cursor>
     c02:	c0 91 99 07 	lds	r28, 0x0799	; 0x800799 <volume_of_drink>
				
				if(volume_of_drink > 999){
     c06:	d0 91 9a 07 	lds	r29, 0x079A	; 0x80079a <volume_of_drink+0x1>
     c0a:	c8 3e       	cpi	r28, 0xE8	; 232
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	d9 07       	cpc	r29, r25
     c10:	08 f4       	brcc	.+2      	; 0xc14 <AddDrink_Tick+0x688>
     c12:	7f c0       	rjmp	.+254    	; 0xd12 <AddDrink_Tick+0x786>
					unsigned char thousands = volume_of_drink / 1000;
					unsigned char hundreds = (volume_of_drink % 1000) / 100;
     c14:	fe 01       	movw	r30, r28
     c16:	f6 95       	lsr	r31
     c18:	e7 95       	ror	r30
     c1a:	f6 95       	lsr	r31
     c1c:	e7 95       	ror	r30
     c1e:	f6 95       	lsr	r31
     c20:	e7 95       	ror	r30
     c22:	9f 01       	movw	r18, r30
     c24:	a5 ec       	ldi	r26, 0xC5	; 197
     c26:	b0 e2       	ldi	r27, 0x20	; 32
     c28:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__umulhisi3>
     c2c:	8c 01       	movw	r16, r24
     c2e:	12 95       	swap	r17
     c30:	02 95       	swap	r16
     c32:	0f 70       	andi	r16, 0x0F	; 15
     c34:	01 27       	eor	r16, r17
     c36:	1f 70       	andi	r17, 0x0F	; 15
     c38:	01 27       	eor	r16, r17
     c3a:	28 ee       	ldi	r18, 0xE8	; 232
     c3c:	33 e0       	ldi	r19, 0x03	; 3
     c3e:	02 9f       	mul	r16, r18
     c40:	c0 01       	movw	r24, r0
     c42:	03 9f       	mul	r16, r19
     c44:	90 0d       	add	r25, r0
     c46:	12 9f       	mul	r17, r18
     c48:	90 0d       	add	r25, r0
     c4a:	11 24       	eor	r1, r1
					unsigned char tens = (volume_of_drink % 1000) / (volume_of_drink % 100) / 10;
     c4c:	8e 01       	movw	r16, r28
     c4e:	08 1b       	sub	r16, r24
     c50:	19 0b       	sbc	r17, r25
     c52:	9e 01       	movw	r18, r28
     c54:	36 95       	lsr	r19
     c56:	27 95       	ror	r18
     c58:	36 95       	lsr	r19
     c5a:	27 95       	ror	r18
     c5c:	ab e7       	ldi	r26, 0x7B	; 123
     c5e:	b4 e1       	ldi	r27, 0x14	; 20
     c60:	f6 d7       	rcall	.+4076   	; 0x1c4e <__umulhisi3>
     c62:	96 95       	lsr	r25
     c64:	87 95       	ror	r24
     c66:	44 e6       	ldi	r20, 0x64	; 100
     c68:	48 9f       	mul	r20, r24
     c6a:	90 01       	movw	r18, r0
     c6c:	49 9f       	mul	r20, r25
     c6e:	30 0d       	add	r19, r0
     c70:	11 24       	eor	r1, r1
     c72:	be 01       	movw	r22, r28
     c74:	62 1b       	sub	r22, r18
     c76:	73 0b       	sbc	r23, r19
					unsigned char ones = (volume_of_drink % 1000) / (volume_of_drink % 100) / (volume_of_drink % 10);
					nokia_lcd_write_char(thousands + '0',1);
     c78:	c8 01       	movw	r24, r16
     c7a:	c2 d7       	rcall	.+3972   	; 0x1c00 <__udivmodhi4>
     c7c:	7b 01       	movw	r14, r22
     c7e:	9f 01       	movw	r18, r30
     c80:	a5 ec       	ldi	r26, 0xC5	; 197
     c82:	b0 e2       	ldi	r27, 0x20	; 32
     c84:	e4 d7       	rcall	.+4040   	; 0x1c4e <__umulhisi3>
     c86:	92 95       	swap	r25
     c88:	82 95       	swap	r24
     c8a:	8f 70       	andi	r24, 0x0F	; 15
     c8c:	89 27       	eor	r24, r25
     c8e:	9f 70       	andi	r25, 0x0F	; 15
     c90:	89 27       	eor	r24, r25
					nokia_lcd_write_char(hundreds + '0',1);
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	80 5d       	subi	r24, 0xD0	; 208
     c96:	07 d2       	rcall	.+1038   	; 0x10a6 <nokia_lcd_write_char>
     c98:	98 01       	movw	r18, r16
     c9a:	36 95       	lsr	r19
     c9c:	27 95       	ror	r18
     c9e:	36 95       	lsr	r19
     ca0:	27 95       	ror	r18
     ca2:	ab e7       	ldi	r26, 0x7B	; 123
     ca4:	b4 e1       	ldi	r27, 0x14	; 20
     ca6:	d3 d7       	rcall	.+4006   	; 0x1c4e <__umulhisi3>
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_char(tens + '0',1);
     cae:	80 5d       	subi	r24, 0xD0	; 208
     cb0:	fa d1       	rcall	.+1012   	; 0x10a6 <nokia_lcd_write_char>
     cb2:	97 01       	movw	r18, r14
     cb4:	ad ec       	ldi	r26, 0xCD	; 205
     cb6:	bc ec       	ldi	r27, 0xCC	; 204
     cb8:	ca d7       	rcall	.+3988   	; 0x1c4e <__umulhisi3>
     cba:	96 95       	lsr	r25
     cbc:	87 95       	ror	r24
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	80 5d       	subi	r24, 0xD0	; 208
					nokia_lcd_write_char(ones + '0',1);
     cca:	ed d1       	rcall	.+986    	; 0x10a6 <nokia_lcd_write_char>
     ccc:	9e 01       	movw	r18, r28
     cce:	ad ec       	ldi	r26, 0xCD	; 205
     cd0:	bc ec       	ldi	r27, 0xCC	; 204
     cd2:	bd d7       	rcall	.+3962   	; 0x1c4e <__umulhisi3>
     cd4:	96 95       	lsr	r25
     cd6:	87 95       	ror	r24
     cd8:	96 95       	lsr	r25
     cda:	87 95       	ror	r24
     cdc:	96 95       	lsr	r25
     cde:	87 95       	ror	r24
     ce0:	9c 01       	movw	r18, r24
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	82 0f       	add	r24, r18
     cf4:	93 1f       	adc	r25, r19
     cf6:	be 01       	movw	r22, r28
     cf8:	68 1b       	sub	r22, r24
     cfa:	79 0b       	sbc	r23, r25
     cfc:	c7 01       	movw	r24, r14
     cfe:	80 d7       	rcall	.+3840   	; 0x1c00 <__udivmodhi4>
     d00:	86 2f       	mov	r24, r22
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	80 5d       	subi	r24, 0xD0	; 208
					nokia_lcd_write_string(" mL",1);
     d06:	cf d1       	rcall	.+926    	; 0x10a6 <nokia_lcd_write_char>
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	88 e8       	ldi	r24, 0x88	; 136
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	75 d2       	rcall	.+1258   	; 0x11fa <nokia_lcd_write_string>
     d10:	4b c0       	rjmp	.+150    	; 0xda8 <AddDrink_Tick+0x81c>
				}
				
				else{
					unsigned char hundreds = volume_of_drink / 100;
					unsigned char tens = (volume_of_drink % 100) / 10;
     d12:	ae 01       	movw	r20, r28
     d14:	56 95       	lsr	r21
     d16:	47 95       	ror	r20
     d18:	56 95       	lsr	r21
     d1a:	47 95       	ror	r20
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab e7       	ldi	r26, 0x7B	; 123
     d20:	b4 e1       	ldi	r27, 0x14	; 20
     d22:	95 d7       	rcall	.+3882   	; 0x1c4e <__umulhisi3>
     d24:	8c 01       	movw	r16, r24
     d26:	16 95       	lsr	r17
     d28:	07 95       	ror	r16
     d2a:	24 e6       	ldi	r18, 0x64	; 100
     d2c:	20 9f       	mul	r18, r16
     d2e:	c0 01       	movw	r24, r0
     d30:	21 9f       	mul	r18, r17
     d32:	90 0d       	add	r25, r0
     d34:	11 24       	eor	r1, r1
     d36:	8e 01       	movw	r16, r28
     d38:	08 1b       	sub	r16, r24
     d3a:	19 0b       	sbc	r17, r25
					unsigned char ones = (volume_of_drink % 100) / (volume_of_drink % 10);
					nokia_lcd_write_char(hundreds + '0',1);
     d3c:	9a 01       	movw	r18, r20
     d3e:	87 d7       	rcall	.+3854   	; 0x1c4e <__umulhisi3>
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	80 5d       	subi	r24, 0xD0	; 208
     d48:	ae d1       	rcall	.+860    	; 0x10a6 <nokia_lcd_write_char>
					nokia_lcd_write_char(tens + '0',1);
     d4a:	98 01       	movw	r18, r16
     d4c:	ad ec       	ldi	r26, 0xCD	; 205
     d4e:	bc ec       	ldi	r27, 0xCC	; 204
     d50:	7e d7       	rcall	.+3836   	; 0x1c4e <__umulhisi3>
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	80 5d       	subi	r24, 0xD0	; 208
     d62:	a1 d1       	rcall	.+834    	; 0x10a6 <nokia_lcd_write_char>
     d64:	9e 01       	movw	r18, r28
					nokia_lcd_write_char(ones + '0',1);
     d66:	ad ec       	ldi	r26, 0xCD	; 205
     d68:	bc ec       	ldi	r27, 0xCC	; 204
     d6a:	71 d7       	rcall	.+3810   	; 0x1c4e <__umulhisi3>
     d6c:	96 95       	lsr	r25
     d6e:	87 95       	ror	r24
     d70:	96 95       	lsr	r25
     d72:	87 95       	ror	r24
     d74:	96 95       	lsr	r25
     d76:	87 95       	ror	r24
     d78:	9c 01       	movw	r18, r24
     d7a:	22 0f       	add	r18, r18
     d7c:	33 1f       	adc	r19, r19
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	82 0f       	add	r24, r18
     d8c:	93 1f       	adc	r25, r19
     d8e:	be 01       	movw	r22, r28
     d90:	68 1b       	sub	r22, r24
     d92:	79 0b       	sbc	r23, r25
     d94:	c8 01       	movw	r24, r16
     d96:	34 d7       	rcall	.+3688   	; 0x1c00 <__udivmodhi4>
     d98:	86 2f       	mov	r24, r22
					nokia_lcd_write_string(" mL",1);
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	80 5d       	subi	r24, 0xD0	; 208
     d9e:	83 d1       	rcall	.+774    	; 0x10a6 <nokia_lcd_write_char>
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	88 e8       	ldi	r24, 0x88	; 136
				}
				
				nokia_lcd_set_cursor(0,20);
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	29 d2       	rcall	.+1106   	; 0x11fa <nokia_lcd_write_string>
     da8:	64 e1       	ldi	r22, 0x14	; 20
     daa:	80 e0       	ldi	r24, 0x00	; 0
				
				if(drink_alcohol_content > 99){
     dac:	38 d2       	rcall	.+1136   	; 0x121e <nokia_lcd_set_cursor>
     dae:	10 91 98 07 	lds	r17, 0x0798	; 0x800798 <drink_alcohol_content>
					unsigned char hundreds = drink_alcohol_content / 100;
					unsigned char tens = (drink_alcohol_content % 100) / 10;
     db2:	14 36       	cpi	r17, 0x64	; 100
     db4:	c0 f1       	brcs	.+112    	; 0xe26 <AddDrink_Tick+0x89a>
     db6:	89 e2       	ldi	r24, 0x29	; 41
     db8:	18 9f       	mul	r17, r24
     dba:	81 2d       	mov	r24, r1
     dbc:	11 24       	eor	r1, r1
     dbe:	d8 2f       	mov	r29, r24
     dc0:	d2 95       	swap	r29
     dc2:	df 70       	andi	r29, 0x0F	; 15
     dc4:	91 2f       	mov	r25, r17
     dc6:	24 e6       	ldi	r18, 0x64	; 100
     dc8:	d2 9f       	mul	r29, r18
					unsigned char ones = (drink_alcohol_content % 100) / (drink_alcohol_content % 10);
					nokia_lcd_write_char(hundreds + '0',1);
     dca:	90 19       	sub	r25, r0
     dcc:	11 24       	eor	r1, r1
     dce:	d9 2f       	mov	r29, r25
     dd0:	82 95       	swap	r24
     dd2:	8f 70       	andi	r24, 0x0F	; 15
     dd4:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_char(tens + '0',1);
     dd6:	80 5d       	subi	r24, 0xD0	; 208
     dd8:	66 d1       	rcall	.+716    	; 0x10a6 <nokia_lcd_write_char>
     dda:	cd ec       	ldi	r28, 0xCD	; 205
     ddc:	dc 9f       	mul	r29, r28
     dde:	81 2d       	mov	r24, r1
     de0:	11 24       	eor	r1, r1
     de2:	86 95       	lsr	r24
     de4:	86 95       	lsr	r24
     de6:	86 95       	lsr	r24
     de8:	61 e0       	ldi	r22, 0x01	; 1
					nokia_lcd_write_char(ones + '0',1);
     dea:	80 5d       	subi	r24, 0xD0	; 208
     dec:	5c d1       	rcall	.+696    	; 0x10a6 <nokia_lcd_write_char>
     dee:	2d 2f       	mov	r18, r29
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	1c 9f       	mul	r17, r28
     df4:	91 2d       	mov	r25, r1
     df6:	11 24       	eor	r1, r1
     df8:	96 95       	lsr	r25
     dfa:	96 95       	lsr	r25
     dfc:	96 95       	lsr	r25
     dfe:	99 0f       	add	r25, r25
     e00:	89 2f       	mov	r24, r25
     e02:	88 0f       	add	r24, r24
     e04:	88 0f       	add	r24, r24
     e06:	98 0f       	add	r25, r24
     e08:	81 2f       	mov	r24, r17
     e0a:	89 1b       	sub	r24, r25
     e0c:	68 2f       	mov	r22, r24
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	c9 01       	movw	r24, r18
     e12:	0a d7       	rcall	.+3604   	; 0x1c28 <__divmodhi4>
     e14:	86 2f       	mov	r24, r22
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	80 5d       	subi	r24, 0xD0	; 208
     e1a:	45 d1       	rcall	.+650    	; 0x10a6 <nokia_lcd_write_char>
					nokia_lcd_write_string(" %",1);
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	8c e6       	ldi	r24, 0x6C	; 108
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	eb d1       	rcall	.+982    	; 0x11fa <nokia_lcd_write_string>
     e24:	19 c0       	rjmp	.+50     	; 0xe58 <AddDrink_Tick+0x8cc>
     e26:	cd ec       	ldi	r28, 0xCD	; 205
				}
				
				else{
					unsigned char tens = drink_alcohol_content / 10;
					unsigned char ones = drink_alcohol_content % 10;
					nokia_lcd_write_char(tens + '0',1);
     e28:	1c 9f       	mul	r17, r28
     e2a:	c1 2d       	mov	r28, r1
     e2c:	11 24       	eor	r1, r1
     e2e:	c6 95       	lsr	r28
     e30:	c6 95       	lsr	r28
     e32:	c6 95       	lsr	r28
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	8c 0f       	add	r24, r28
     e3a:	35 d1       	rcall	.+618    	; 0x10a6 <nokia_lcd_write_char>
     e3c:	cc 0f       	add	r28, r28
     e3e:	8c 2f       	mov	r24, r28
					nokia_lcd_write_char(ones + '0',1);
     e40:	88 0f       	add	r24, r24
     e42:	88 0f       	add	r24, r24
     e44:	c8 0f       	add	r28, r24
     e46:	81 2f       	mov	r24, r17
     e48:	8c 1b       	sub	r24, r28
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	80 5d       	subi	r24, 0xD0	; 208
     e4e:	2b d1       	rcall	.+598    	; 0x10a6 <nokia_lcd_write_char>
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	8c e6       	ldi	r24, 0x6C	; 108
     e54:	91 e0       	ldi	r25, 0x01	; 1
					nokia_lcd_write_string(" %",1);
     e56:	d1 d1       	rcall	.+930    	; 0x11fa <nokia_lcd_write_string>
     e58:	6e e1       	ldi	r22, 0x1E	; 30
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	e0 d1       	rcall	.+960    	; 0x121e <nokia_lcd_set_cursor>
     e5e:	61 e0       	ldi	r22, 0x01	; 1
				}
				
				nokia_lcd_set_cursor(0,30);
     e60:	8c e8       	ldi	r24, 0x8C	; 140
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	ca d1       	rcall	.+916    	; 0x11fa <nokia_lcd_write_string>
     e66:	68 e2       	ldi	r22, 0x28	; 40
				nokia_lcd_write_string("* to Cancel",1);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	d9 d1       	rcall	.+946    	; 0x121e <nokia_lcd_set_cursor>
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	88 e9       	ldi	r24, 0x98	; 152
     e70:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_set_cursor(0,40);
     e72:	c3 d1       	rcall	.+902    	; 0x11fa <nokia_lcd_write_string>
     e74:	d9 d1       	rcall	.+946    	; 0x1228 <nokia_lcd_render>
     e76:	85 e0       	ldi	r24, 0x05	; 5
     e78:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <add_drink_state>
				nokia_lcd_write_string("# to Confirm",1);
     e7c:	46 c0       	rjmp	.+140    	; 0xf0a <AddDrink_Tick+0x97e>
     e7e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <add_drink_flag>
     e82:	81 11       	cpse	r24, r1
				nokia_lcd_render();
     e84:	42 c0       	rjmp	.+132    	; 0xf0a <AddDrink_Tick+0x97e>
     e86:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <type_of_drink>
				
				add_drink_state = drink_confirm;
     e8a:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <volume_of_drink+0x1>
     e8e:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <volume_of_drink>
			}
			
			else if(!add_drink_flag){
     e92:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <drink_alcohol_content>
     e96:	6e db       	rcall	.-2340   	; 0x574 <add_drink_variable_reset>
				type_of_drink = 0; //0=nodrink,1=beer, 2=wine,3=liquor,4=other
     e98:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				volume_of_drink = 0;
     e9c:	36 c0       	rjmp	.+108    	; 0xf0a <AddDrink_Tick+0x97e>
     e9e:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <add_drink_selection>
     ea2:	8a 32       	cpi	r24, 0x2A	; 42
				drink_alcohol_content = 0;
     ea4:	71 f4       	brne	.+28     	; 0xec2 <AddDrink_Tick+0x936>
     ea6:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <type_of_drink>
				add_drink_variable_reset();
     eaa:	10 92 9a 07 	sts	0x079A, r1	; 0x80079a <volume_of_drink+0x1>
				add_drink_state = add_drink_init;
     eae:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <volume_of_drink>
				add_drink_state = drink_ac;
			}
			break;
		
		case drink_confirm:
			if(add_drink_selection == '*'){
     eb2:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <drink_alcohol_content>
     eb6:	5e db       	rcall	.-2372   	; 0x574 <add_drink_variable_reset>
     eb8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <add_drink_flag>
				type_of_drink = 0; //0=nodrink,1=beer, 2=wine,3=liquor,4=other
     ebc:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				volume_of_drink = 0;
     ec0:	24 c0       	rjmp	.+72     	; 0xf0a <AddDrink_Tick+0x97e>
     ec2:	83 32       	cpi	r24, 0x23	; 35
     ec4:	31 f4       	brne	.+12     	; 0xed2 <AddDrink_Tick+0x946>
				drink_alcohol_content = 0;
     ec6:	56 db       	rcall	.-2388   	; 0x574 <add_drink_variable_reset>
     ec8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <add_drink_flag>
				add_drink_variable_reset();
     ecc:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				add_drink_flag = 0;
     ed0:	1c c0       	rjmp	.+56     	; 0xf0a <AddDrink_Tick+0x97e>
				add_drink_state = add_drink_init;
     ed2:	85 e0       	ldi	r24, 0x05	; 5
     ed4:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <add_drink_selection>
			} 
			
			else if(add_drink_selection == '#'){
     ed8:	18 c0       	rjmp	.+48     	; 0xf0a <AddDrink_Tick+0x97e>
     eda:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
				add_drink_variable_reset();
     ede:	15 c0       	rjmp	.+42     	; 0xf0a <AddDrink_Tick+0x97e>
				add_drink_flag = 0;
     ee0:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <add_drink_state>
				add_drink_state = add_drink_init;
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	09 f4       	brne	.+2      	; 0xeea <AddDrink_Tick+0x95e>
     ee8:	34 ce       	rjmp	.-920    	; 0xb52 <AddDrink_Tick+0x5c6>
			}
			
			else{
				add_drink_selection = drink_confirm;
     eea:	38 f4       	brcc	.+14     	; 0xefa <AddDrink_Tick+0x96e>
     eec:	88 23       	and	r24, r24
     eee:	09 f4       	brne	.+2      	; 0xef2 <AddDrink_Tick+0x966>
     ef0:	b7 cd       	rjmp	.-1170   	; 0xa60 <AddDrink_Tick+0x4d4>
			}
			
			break;
		
		default:
			add_drink_state = add_drink_init;
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	09 f4       	brne	.+2      	; 0xef8 <AddDrink_Tick+0x96c>
			break;
	}
}
     ef6:	d8 cd       	rjmp	.-1104   	; 0xaa8 <AddDrink_Tick+0x51c>
		default:
			break;
	}
	
	//Transitions
	switch(add_drink_state){
     ef8:	f0 cf       	rjmp	.-32     	; 0xeda <AddDrink_Tick+0x94e>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f4       	brne	.+2      	; 0xf00 <AddDrink_Tick+0x974>
     efe:	63 ce       	rjmp	.-826    	; 0xbc6 <AddDrink_Tick+0x63a>
     f00:	08 f4       	brcc	.+2      	; 0xf04 <AddDrink_Tick+0x978>
     f02:	37 ce       	rjmp	.-914    	; 0xb72 <AddDrink_Tick+0x5e6>
     f04:	85 30       	cpi	r24, 0x05	; 5
     f06:	59 f2       	breq	.-106    	; 0xe9e <AddDrink_Tick+0x912>
     f08:	e8 cf       	rjmp	.-48     	; 0xeda <AddDrink_Tick+0x94e>
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	08 95       	ret

00000f18 <AddDrinkTask>:
     f18:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <add_drink_state>
     f1c:	37 db       	rcall	.-2450   	; 0x58c <AddDrink_Tick>
     f1e:	84 e6       	ldi	r24, 0x64	; 100
     f20:	90 e0       	ldi	r25, 0x00	; 0
		
		default:
			add_drink_state = add_drink_init;
			break;
	}
}
     f22:	a1 d5       	rcall	.+2882   	; 0x1a66 <vTaskDelay>
     f24:	fb cf       	rjmp	.-10     	; 0xf1c <AddDrinkTask+0x4>

00000f26 <AddDrinkPulse>:
     f26:	af 92       	push	r10
     f28:	bf 92       	push	r11
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
		vTaskDelay(100); 
	} 
}

void AddDrinkPulse(unsigned portBASE_TYPE Priority)
{
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
	xTaskCreate(AddDrinkTask, (signed portCHAR *)"AddDrinkTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     f34:	a1 2c       	mov	r10, r1
     f36:	b1 2c       	mov	r11, r1
     f38:	c1 2c       	mov	r12, r1
     f3a:	d1 2c       	mov	r13, r1
     f3c:	e1 2c       	mov	r14, r1
     f3e:	f1 2c       	mov	r15, r1
     f40:	08 2f       	mov	r16, r24
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	45 e5       	ldi	r20, 0x55	; 85
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	65 ea       	ldi	r22, 0xA5	; 165
     f4c:	71 e0       	ldi	r23, 0x01	; 1
     f4e:	8c e8       	ldi	r24, 0x8C	; 140
     f50:	97 e0       	ldi	r25, 0x07	; 7
     f52:	11 d3       	rcall	.+1570   	; 0x1576 <xTaskGenericCreate>
}	
     f54:	0f 91       	pop	r16
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	bf 90       	pop	r11
     f60:	af 90       	pop	r10
     f62:	08 95       	ret

00000f64 <main>:
   /*
	when scaling by 1: 14 chars per line, 8 pixels in height
	when scaling by 2: 8 chars per line, 14 pixels in height
	when scaling by 3: 5 chars per line, 21 pixels in height
	*/
	DDRC = 0x0F;	//Set PC7...PC3 to input, PC2...PC0 to output [0000 1111]
     f64:	8f e0       	ldi	r24, 0x0F	; 15
     f66:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xF0;	//Init port C to 1s							[1111 0000]
     f68:	80 ef       	ldi	r24, 0xF0	; 240
     f6a:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;	//Set Port D to output
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//Init Port D to 0s
     f70:	1b b8       	out	0x0b, r1	; 11
	nokia_lcd_init();
     f72:	27 d0       	rcall	.+78     	; 0xfc2 <nokia_lcd_init>
	//Start Tasks  
	AddDrinkPulse(1);
     f74:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
	vTaskStartScheduler(); 
     f76:	d7 df       	rcall	.-82     	; 0xf26 <AddDrinkPulse>
     f78:	ff d3       	rcall	.+2046   	; 0x1778 <vTaskStartScheduler>
 
	return 0; 
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	08 95       	ret

00000f80 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     f80:	59 98       	cbi	0x0b, 1	; 11
     f82:	66 23       	and	r22, r22
     f84:	11 f0       	breq	.+4      	; 0xf8a <write+0xa>
     f86:	5b 9a       	sbi	0x0b, 3	; 11
     f88:	15 c0       	rjmp	.+42     	; 0xfb4 <write+0x34>
     f8a:	5b 98       	cbi	0x0b, 3	; 11
     f8c:	13 c0       	rjmp	.+38     	; 0xfb4 <write+0x34>
     f8e:	ac 01       	movw	r20, r24
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <write+0x18>
     f94:	55 95       	asr	r21
     f96:	47 95       	ror	r20
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <write+0x14>
     f9c:	40 ff       	sbrs	r20, 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <write+0x24>
     fa0:	5c 9a       	sbi	0x0b, 4	; 11
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <write+0x26>
     fa4:	5c 98       	cbi	0x0b, 4	; 11
     fa6:	5d 9a       	sbi	0x0b, 5	; 11
     fa8:	5d 98       	cbi	0x0b, 5	; 11
     faa:	21 50       	subi	r18, 0x01	; 1
     fac:	31 09       	sbc	r19, r1
     fae:	78 f7       	brcc	.-34     	; 0xf8e <write+0xe>
     fb0:	59 9a       	sbi	0x0b, 1	; 11
     fb2:	08 95       	ret
     fb4:	27 e0       	ldi	r18, 0x07	; 7
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	e9 cf       	rjmp	.-46     	; 0xf8e <write+0xe>

00000fbc <write_cmd>:
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	e0 cf       	rjmp	.-64     	; 0xf80 <write>
     fc0:	08 95       	ret

00000fc2 <nokia_lcd_init>:
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	51 9a       	sbi	0x0a, 1	; 10
     fc8:	52 9a       	sbi	0x0a, 2	; 10
     fca:	53 9a       	sbi	0x0a, 3	; 10
     fcc:	54 9a       	sbi	0x0a, 4	; 10
     fce:	55 9a       	sbi	0x0a, 5	; 10
     fd0:	5a 9a       	sbi	0x0b, 2	; 11
     fd2:	59 9a       	sbi	0x0b, 1	; 11
     fd4:	83 ec       	ldi	r24, 0xC3	; 195
     fd6:	99 e0       	ldi	r25, 0x09	; 9
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <nokia_lcd_init+0x16>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <nokia_lcd_init+0x1c>
     fde:	00 00       	nop
     fe0:	5a 98       	cbi	0x0b, 2	; 11
     fe2:	8b e5       	ldi	r24, 0x5B	; 91
     fe4:	94 e4       	ldi	r25, 0x44	; 68
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <nokia_lcd_init+0x24>
     fea:	00 c0       	rjmp	.+0      	; 0xfec <nokia_lcd_init+0x2a>
     fec:	00 00       	nop
     fee:	5a 9a       	sbi	0x0b, 2	; 11
     ff0:	59 98       	cbi	0x0b, 1	; 11
     ff2:	81 e2       	ldi	r24, 0x21	; 33
     ff4:	e3 df       	rcall	.-58     	; 0xfbc <write_cmd>
     ff6:	83 e1       	ldi	r24, 0x13	; 19
     ff8:	e1 df       	rcall	.-62     	; 0xfbc <write_cmd>
     ffa:	86 e0       	ldi	r24, 0x06	; 6
     ffc:	df df       	rcall	.-66     	; 0xfbc <write_cmd>
     ffe:	82 ec       	ldi	r24, 0xC2	; 194
    1000:	dd df       	rcall	.-70     	; 0xfbc <write_cmd>
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	db df       	rcall	.-74     	; 0xfbc <write_cmd>
    1006:	89 e0       	ldi	r24, 0x09	; 9
    1008:	d9 df       	rcall	.-78     	; 0xfbc <write_cmd>
    100a:	80 e8       	ldi	r24, 0x80	; 128
    100c:	d7 df       	rcall	.-82     	; 0xfbc <write_cmd>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	d5 df       	rcall	.-86     	; 0xfbc <write_cmd>
    1012:	c8 ef       	ldi	r28, 0xF8	; 248
    1014:	d1 e0       	ldi	r29, 0x01	; 1
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	b2 df       	rcall	.-156    	; 0xf80 <write>
    101c:	21 97       	sbiw	r28, 0x01	; 1
    101e:	d9 f7       	brne	.-10     	; 0x1016 <nokia_lcd_init+0x54>
    1020:	88 e0       	ldi	r24, 0x08	; 8
    1022:	cc df       	rcall	.-104    	; 0xfbc <write_cmd>
    1024:	8c e0       	ldi	r24, 0x0C	; 12
    1026:	ca df       	rcall	.-108    	; 0xfbc <write_cmd>
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <nokia_lcd_clear>:
    102e:	80 e8       	ldi	r24, 0x80	; 128
    1030:	c5 df       	rcall	.-118    	; 0xfbc <write_cmd>
    1032:	80 e4       	ldi	r24, 0x40	; 64
    1034:	c3 df       	rcall	.-122    	; 0xfbc <write_cmd>
    1036:	10 92 96 09 	sts	0x0996, r1	; 0x800996 <nokia_lcd+0x1f8>
    103a:	10 92 97 09 	sts	0x0997, r1	; 0x800997 <nokia_lcd+0x1f9>
    103e:	ee e9       	ldi	r30, 0x9E	; 158
    1040:	f7 e0       	ldi	r31, 0x07	; 7
    1042:	86 e9       	ldi	r24, 0x96	; 150
    1044:	99 e0       	ldi	r25, 0x09	; 9
    1046:	11 92       	st	Z+, r1
    1048:	e8 17       	cp	r30, r24
    104a:	f9 07       	cpc	r31, r25
    104c:	e1 f7       	brne	.-8      	; 0x1046 <nokia_lcd_clear+0x18>
    104e:	08 95       	ret

00001050 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    1050:	26 2f       	mov	r18, r22
    1052:	26 95       	lsr	r18
    1054:	26 95       	lsr	r18
    1056:	26 95       	lsr	r18
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	34 e5       	ldi	r19, 0x54	; 84
    105c:	23 9f       	mul	r18, r19
    105e:	80 0d       	add	r24, r0
    1060:	91 1d       	adc	r25, r1
    1062:	11 24       	eor	r1, r1
	if (value)
    1064:	44 23       	and	r20, r20
    1066:	79 f0       	breq	.+30     	; 0x1086 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
    1068:	fc 01       	movw	r30, r24
    106a:	e2 56       	subi	r30, 0x62	; 98
    106c:	f8 4f       	sbci	r31, 0xF8	; 248
    106e:	67 70       	andi	r22, 0x07	; 7
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <nokia_lcd_set_pixel+0x2a>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	6a 95       	dec	r22
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <nokia_lcd_set_pixel+0x26>
    107e:	90 81       	ld	r25, Z
    1080:	89 2b       	or	r24, r25
    1082:	80 83       	st	Z, r24
    1084:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
    1086:	fc 01       	movw	r30, r24
    1088:	e2 56       	subi	r30, 0x62	; 98
    108a:	f8 4f       	sbci	r31, 0xF8	; 248
    108c:	67 70       	andi	r22, 0x07	; 7
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <nokia_lcd_set_pixel+0x48>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	6a 95       	dec	r22
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <nokia_lcd_set_pixel+0x44>
    109c:	80 95       	com	r24
    109e:	90 81       	ld	r25, Z
    10a0:	89 23       	and	r24, r25
    10a2:	80 83       	st	Z, r24
    10a4:	08 95       	ret

000010a6 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    10a6:	5f 92       	push	r5
    10a8:	6f 92       	push	r6
    10aa:	7f 92       	push	r7
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    10c6:	26 2f       	mov	r18, r22
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	49 01       	movw	r8, r18
    10cc:	88 0c       	add	r8, r8
    10ce:	99 1c       	adc	r9, r9
    10d0:	88 0c       	add	r8, r8
    10d2:	99 1c       	adc	r9, r9
    10d4:	82 0e       	add	r8, r18
    10d6:	93 1e       	adc	r9, r19
    10d8:	18 14       	cp	r1, r8
    10da:	19 04       	cpc	r1, r9
    10dc:	0c f0       	brlt	.+2      	; 0x10e0 <nokia_lcd_write_char+0x3a>
    10de:	59 c0       	rjmp	.+178    	; 0x1192 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    10e0:	89 01       	movw	r16, r18
    10e2:	00 0f       	add	r16, r16
    10e4:	11 1f       	adc	r17, r17
    10e6:	00 0f       	add	r16, r16
    10e8:	11 1f       	adc	r17, r17
    10ea:	00 0f       	add	r16, r16
    10ec:	11 1f       	adc	r17, r17
    10ee:	02 1b       	sub	r16, r18
    10f0:	13 0b       	sbc	r17, r19
    10f2:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    10f4:	a8 2e       	mov	r10, r24
    10f6:	b1 2c       	mov	r11, r1
    10f8:	c5 01       	movw	r24, r10
    10fa:	80 97       	sbiw	r24, 0x20	; 32
    10fc:	5c 01       	movw	r10, r24
    10fe:	aa 0c       	add	r10, r10
    1100:	bb 1c       	adc	r11, r11
    1102:	aa 0c       	add	r10, r10
    1104:	bb 1c       	adc	r11, r11
    1106:	a8 0e       	add	r10, r24
    1108:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    110a:	0f 2e       	mov	r0, r31
    110c:	f7 e9       	ldi	r31, 0x97	; 151
    110e:	cf 2e       	mov	r12, r31
    1110:	f9 e0       	ldi	r31, 0x09	; 9
    1112:	df 2e       	mov	r13, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	0f 2e       	mov	r0, r31
    1118:	f6 e9       	ldi	r31, 0x96	; 150
    111a:	ef 2e       	mov	r14, r31
    111c:	f9 e0       	ldi	r31, 0x09	; 9
    111e:	ff 2e       	mov	r15, r31
    1120:	f0 2d       	mov	r31, r0
    1122:	2a c0       	rjmp	.+84     	; 0x1178 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1124:	fe 01       	movw	r30, r28
    1126:	24 91       	lpm	r18, Z
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	87 2d       	mov	r24, r7
    112c:	65 2d       	mov	r22, r5
    112e:	5c d5       	rcall	.+2744   	; 0x1be8 <__udivmodqi4>
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <nokia_lcd_write_char+0x90>
    1132:	35 95       	asr	r19
    1134:	27 95       	ror	r18
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <nokia_lcd_write_char+0x8c>
    113a:	20 ff       	sbrs	r18, 0
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    113e:	f6 01       	movw	r30, r12
    1140:	60 81       	ld	r22, Z
    1142:	67 0d       	add	r22, r7
    1144:	f7 01       	movw	r30, r14
    1146:	80 81       	ld	r24, Z
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	86 0d       	add	r24, r6
    114c:	81 df       	rcall	.-254    	; 0x1050 <nokia_lcd_set_pixel>
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1150:	f6 01       	movw	r30, r12
    1152:	60 81       	ld	r22, Z
    1154:	67 0d       	add	r22, r7
    1156:	f7 01       	movw	r30, r14
    1158:	80 81       	ld	r24, Z
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	86 0d       	add	r24, r6
    115e:	78 df       	rcall	.-272    	; 0x1050 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1160:	73 94       	inc	r7
    1162:	87 2d       	mov	r24, r7
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	80 17       	cp	r24, r16
    1168:	91 07       	cpc	r25, r17
    116a:	e4 f2       	brlt	.-72     	; 0x1124 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    116c:	63 94       	inc	r6
    116e:	86 2d       	mov	r24, r6
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	88 15       	cp	r24, r8
    1174:	99 05       	cpc	r25, r9
    1176:	6c f4       	brge	.+26     	; 0x1192 <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    1178:	10 16       	cp	r1, r16
    117a:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    117c:	bc f7       	brge	.-18     	; 0x116c <nokia_lcd_write_char+0xc6>
    117e:	86 2d       	mov	r24, r6
    1180:	65 2d       	mov	r22, r5
    1182:	32 d5       	rcall	.+2660   	; 0x1be8 <__udivmodqi4>
    1184:	e5 01       	movw	r28, r10
    1186:	c8 0f       	add	r28, r24
    1188:	d1 1d       	adc	r29, r1
    118a:	c4 57       	subi	r28, 0x74	; 116
    118c:	df 4f       	sbci	r29, 0xFF	; 255
    118e:	71 2c       	mov	r7, r1
    1190:	c9 cf       	rjmp	.-110    	; 0x1124 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1192:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <nokia_lcd+0x1f8>
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	98 0f       	add	r25, r24
    119a:	85 2d       	mov	r24, r5
    119c:	88 0f       	add	r24, r24
    119e:	88 0f       	add	r24, r24
    11a0:	85 0d       	add	r24, r5
    11a2:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
    11a4:	84 35       	cpi	r24, 0x54	; 84
    11a6:	18 f4       	brcc	.+6      	; 0x11ae <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    11a8:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <nokia_lcd+0x1f8>
    11ac:	0e c0       	rjmp	.+28     	; 0x11ca <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
    11ae:	10 92 96 09 	sts	0x0996, r1	; 0x800996 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    11b2:	e7 e9       	ldi	r30, 0x97	; 151
    11b4:	f9 e0       	ldi	r31, 0x09	; 9
    11b6:	80 81       	ld	r24, Z
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	98 0f       	add	r25, r24
    11bc:	85 2d       	mov	r24, r5
    11be:	88 0f       	add	r24, r24
    11c0:	88 0f       	add	r24, r24
    11c2:	88 0f       	add	r24, r24
    11c4:	85 19       	sub	r24, r5
    11c6:	89 0f       	add	r24, r25
    11c8:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    11ca:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <nokia_lcd+0x1f9>
    11ce:	80 33       	cpi	r24, 0x30	; 48
    11d0:	20 f0       	brcs	.+8      	; 0x11da <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
    11d2:	10 92 96 09 	sts	0x0996, r1	; 0x800996 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    11d6:	10 92 97 09 	sts	0x0997, r1	; 0x800997 <nokia_lcd+0x1f9>
	}
}
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	bf 90       	pop	r11
    11ec:	af 90       	pop	r10
    11ee:	9f 90       	pop	r9
    11f0:	8f 90       	pop	r8
    11f2:	7f 90       	pop	r7
    11f4:	6f 90       	pop	r6
    11f6:	5f 90       	pop	r5
    11f8:	08 95       	ret

000011fa <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	ec 01       	movw	r28, r24
	while(*str)
    1202:	88 81       	ld	r24, Y
    1204:	88 23       	and	r24, r24
    1206:	39 f0       	breq	.+14     	; 0x1216 <nokia_lcd_write_string+0x1c>
    1208:	16 2f       	mov	r17, r22
    120a:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
    120c:	61 2f       	mov	r22, r17
    120e:	4b df       	rcall	.-362    	; 0x10a6 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    1210:	89 91       	ld	r24, Y+
    1212:	81 11       	cpse	r24, r1
    1214:	fb cf       	rjmp	.-10     	; 0x120c <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	08 95       	ret

0000121e <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    121e:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1222:	60 93 97 09 	sts	0x0997, r22	; 0x800997 <nokia_lcd+0x1f9>
    1226:	08 95       	ret

00001228 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	c4 de       	rcall	.-632    	; 0xfbc <write_cmd>
	write_cmd(0x40);
    1234:	80 e4       	ldi	r24, 0x40	; 64
    1236:	c2 de       	rcall	.-636    	; 0xfbc <write_cmd>
    1238:	ce e9       	ldi	r28, 0x9E	; 158
    123a:	d7 e0       	ldi	r29, 0x07	; 7
    123c:	06 e9       	ldi	r16, 0x96	; 150
    123e:	19 e0       	ldi	r17, 0x09	; 9
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	89 91       	ld	r24, Y+
    1244:	9d de       	rcall	.-710    	; 0xf80 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1246:	c0 17       	cp	r28, r16
    1248:	d1 07       	cpc	r29, r17
    124a:	d1 f7       	brne	.-12     	; 0x1240 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	08 95       	ret

00001256 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1256:	31 e1       	ldi	r19, 0x11	; 17
    1258:	fc 01       	movw	r30, r24
    125a:	30 83       	st	Z, r19
    125c:	31 97       	sbiw	r30, 0x01	; 1
    125e:	22 e2       	ldi	r18, 0x22	; 34
    1260:	20 83       	st	Z, r18
    1262:	31 97       	sbiw	r30, 0x01	; 1
    1264:	a3 e3       	ldi	r26, 0x33	; 51
    1266:	a0 83       	st	Z, r26
    1268:	31 97       	sbiw	r30, 0x01	; 1
    126a:	60 83       	st	Z, r22
    126c:	31 97       	sbiw	r30, 0x01	; 1
    126e:	70 83       	st	Z, r23
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	10 82       	st	Z, r1
    1274:	31 97       	sbiw	r30, 0x01	; 1
    1276:	60 e8       	ldi	r22, 0x80	; 128
    1278:	60 83       	st	Z, r22
    127a:	31 97       	sbiw	r30, 0x01	; 1
    127c:	10 82       	st	Z, r1
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	62 e0       	ldi	r22, 0x02	; 2
    1282:	60 83       	st	Z, r22
    1284:	31 97       	sbiw	r30, 0x01	; 1
    1286:	63 e0       	ldi	r22, 0x03	; 3
    1288:	60 83       	st	Z, r22
    128a:	31 97       	sbiw	r30, 0x01	; 1
    128c:	64 e0       	ldi	r22, 0x04	; 4
    128e:	60 83       	st	Z, r22
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	65 e0       	ldi	r22, 0x05	; 5
    1294:	60 83       	st	Z, r22
    1296:	31 97       	sbiw	r30, 0x01	; 1
    1298:	66 e0       	ldi	r22, 0x06	; 6
    129a:	60 83       	st	Z, r22
    129c:	31 97       	sbiw	r30, 0x01	; 1
    129e:	67 e0       	ldi	r22, 0x07	; 7
    12a0:	60 83       	st	Z, r22
    12a2:	31 97       	sbiw	r30, 0x01	; 1
    12a4:	68 e0       	ldi	r22, 0x08	; 8
    12a6:	60 83       	st	Z, r22
    12a8:	31 97       	sbiw	r30, 0x01	; 1
    12aa:	69 e0       	ldi	r22, 0x09	; 9
    12ac:	60 83       	st	Z, r22
    12ae:	31 97       	sbiw	r30, 0x01	; 1
    12b0:	60 e1       	ldi	r22, 0x10	; 16
    12b2:	60 83       	st	Z, r22
    12b4:	31 97       	sbiw	r30, 0x01	; 1
    12b6:	30 83       	st	Z, r19
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	32 e1       	ldi	r19, 0x12	; 18
    12bc:	30 83       	st	Z, r19
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	33 e1       	ldi	r19, 0x13	; 19
    12c2:	30 83       	st	Z, r19
    12c4:	31 97       	sbiw	r30, 0x01	; 1
    12c6:	34 e1       	ldi	r19, 0x14	; 20
    12c8:	30 83       	st	Z, r19
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	35 e1       	ldi	r19, 0x15	; 21
    12ce:	30 83       	st	Z, r19
    12d0:	31 97       	sbiw	r30, 0x01	; 1
    12d2:	36 e1       	ldi	r19, 0x16	; 22
    12d4:	30 83       	st	Z, r19
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	37 e1       	ldi	r19, 0x17	; 23
    12da:	30 83       	st	Z, r19
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	38 e1       	ldi	r19, 0x18	; 24
    12e0:	30 83       	st	Z, r19
    12e2:	31 97       	sbiw	r30, 0x01	; 1
    12e4:	39 e1       	ldi	r19, 0x19	; 25
    12e6:	30 83       	st	Z, r19
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	30 e2       	ldi	r19, 0x20	; 32
    12ec:	30 83       	st	Z, r19
    12ee:	31 97       	sbiw	r30, 0x01	; 1
    12f0:	31 e2       	ldi	r19, 0x21	; 33
    12f2:	30 83       	st	Z, r19
    12f4:	31 97       	sbiw	r30, 0x01	; 1
    12f6:	20 83       	st	Z, r18
    12f8:	31 97       	sbiw	r30, 0x01	; 1
    12fa:	23 e2       	ldi	r18, 0x23	; 35
    12fc:	20 83       	st	Z, r18
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	40 83       	st	Z, r20
    1302:	31 97       	sbiw	r30, 0x01	; 1
    1304:	50 83       	st	Z, r21
    1306:	31 97       	sbiw	r30, 0x01	; 1
    1308:	26 e2       	ldi	r18, 0x26	; 38
    130a:	20 83       	st	Z, r18
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	27 e2       	ldi	r18, 0x27	; 39
    1310:	20 83       	st	Z, r18
    1312:	31 97       	sbiw	r30, 0x01	; 1
    1314:	28 e2       	ldi	r18, 0x28	; 40
    1316:	20 83       	st	Z, r18
    1318:	31 97       	sbiw	r30, 0x01	; 1
    131a:	29 e2       	ldi	r18, 0x29	; 41
    131c:	20 83       	st	Z, r18
    131e:	31 97       	sbiw	r30, 0x01	; 1
    1320:	20 e3       	ldi	r18, 0x30	; 48
    1322:	20 83       	st	Z, r18
    1324:	31 97       	sbiw	r30, 0x01	; 1
    1326:	21 e3       	ldi	r18, 0x31	; 49
    1328:	20 83       	st	Z, r18
    132a:	86 97       	sbiw	r24, 0x26	; 38
    132c:	08 95       	ret

0000132e <xPortStartScheduler>:
    132e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1332:	8c e7       	ldi	r24, 0x7C	; 124
    1334:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1338:	8b e0       	ldi	r24, 0x0B	; 11
    133a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    133e:	ef e6       	ldi	r30, 0x6F	; 111
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	80 83       	st	Z, r24
    1348:	a0 91 f0 09 	lds	r26, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    134c:	b0 91 f1 09 	lds	r27, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    1350:	cd 91       	ld	r28, X+
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	dd 91       	ld	r29, X+
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	9f 90       	pop	r9
    1386:	8f 90       	pop	r8
    1388:	7f 90       	pop	r7
    138a:	6f 90       	pop	r6
    138c:	5f 90       	pop	r5
    138e:	4f 90       	pop	r4
    1390:	3f 90       	pop	r3
    1392:	2f 90       	pop	r2
    1394:	1f 90       	pop	r1
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	08 95       	ret
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	08 95       	ret

000013a2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	0f 92       	push	r0
    13aa:	1f 92       	push	r1
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 92       	push	r2
    13b0:	3f 92       	push	r3
    13b2:	4f 92       	push	r4
    13b4:	5f 92       	push	r5
    13b6:	6f 92       	push	r6
    13b8:	7f 92       	push	r7
    13ba:	8f 92       	push	r8
    13bc:	9f 92       	push	r9
    13be:	af 92       	push	r10
    13c0:	bf 92       	push	r11
    13c2:	cf 92       	push	r12
    13c4:	df 92       	push	r13
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
    13ea:	a0 91 f0 09 	lds	r26, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    13ee:	b0 91 f1 09 	lds	r27, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    13f2:	0d b6       	in	r0, 0x3d	; 61
    13f4:	0d 92       	st	X+, r0
    13f6:	0e b6       	in	r0, 0x3e	; 62
    13f8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    13fa:	8a d3       	rcall	.+1812   	; 0x1b10 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    13fc:	a0 91 f0 09 	lds	r26, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    1400:	b0 91 f1 09 	lds	r27, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    1404:	cd 91       	ld	r28, X+
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	dd 91       	ld	r29, X+
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	ff 91       	pop	r31
    140e:	ef 91       	pop	r30
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	7f 91       	pop	r23
    141e:	6f 91       	pop	r22
    1420:	5f 91       	pop	r21
    1422:	4f 91       	pop	r20
    1424:	3f 91       	pop	r19
    1426:	2f 91       	pop	r18
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	9f 90       	pop	r9
    143a:	8f 90       	pop	r8
    143c:	7f 90       	pop	r7
    143e:	6f 90       	pop	r6
    1440:	5f 90       	pop	r5
    1442:	4f 90       	pop	r4
    1444:	3f 90       	pop	r3
    1446:	2f 90       	pop	r2
    1448:	1f 90       	pop	r1
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1450:	08 95       	ret

00001452 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	0f 92       	push	r0
    145a:	1f 92       	push	r1
    145c:	11 24       	eor	r1, r1
    145e:	2f 92       	push	r2
    1460:	3f 92       	push	r3
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	2f 93       	push	r18
    1480:	3f 93       	push	r19
    1482:	4f 93       	push	r20
    1484:	5f 93       	push	r21
    1486:	6f 93       	push	r22
    1488:	7f 93       	push	r23
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
    149a:	a0 91 f0 09 	lds	r26, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    149e:	b0 91 f1 09 	lds	r27, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    14a2:	0d b6       	in	r0, 0x3d	; 61
    14a4:	0d 92       	st	X+, r0
    14a6:	0e b6       	in	r0, 0x3e	; 62
    14a8:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    14aa:	95 d1       	rcall	.+810    	; 0x17d6 <vTaskIncrementTick>
	vTaskSwitchContext();
    14ac:	31 d3       	rcall	.+1634   	; 0x1b10 <vTaskSwitchContext>
    14ae:	a0 91 f0 09 	lds	r26, 0x09F0	; 0x8009f0 <pxCurrentTCB>
	portRESTORE_CONTEXT();
    14b2:	b0 91 f1 09 	lds	r27, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    14b6:	cd 91       	ld	r28, X+
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	dd 91       	ld	r29, X+
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	bf 90       	pop	r11
    14e8:	af 90       	pop	r10
    14ea:	9f 90       	pop	r9
    14ec:	8f 90       	pop	r8
    14ee:	7f 90       	pop	r7
    14f0:	6f 90       	pop	r6
    14f2:	5f 90       	pop	r5
    14f4:	4f 90       	pop	r4
    14f6:	3f 90       	pop	r3
    14f8:	2f 90       	pop	r2
    14fa:	1f 90       	pop	r1
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	08 95       	ret

00001504 <__vector_13>:

	asm volatile ( "ret" );
    1504:	a6 df       	rcall	.-180    	; 0x1452 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1506:	18 95       	reti

00001508 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	e0 91 f0 09 	lds	r30, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    1512:	f0 91 f1 09 	lds	r31, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    1516:	93 83       	std	Z+3, r25	; 0x03
    1518:	82 83       	std	Z+2, r24	; 0x02
    151a:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <xTickCount>
    151e:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <xTickCount+0x1>
    1522:	c8 17       	cp	r28, r24
    1524:	d9 07       	cpc	r29, r25
    1526:	68 f4       	brcc	.+26     	; 0x1542 <prvAddCurrentTaskToDelayedList+0x3a>
    1528:	60 91 f0 09 	lds	r22, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    152c:	70 91 f1 09 	lds	r23, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    1530:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <pxOverflowDelayedTaskList>
    1534:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <pxOverflowDelayedTaskList+0x1>
    1538:	6e 5f       	subi	r22, 0xFE	; 254
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	0e 94 b5 01 	call	0x36a	; 0x36a <vListInsert>
    1540:	17 c0       	rjmp	.+46     	; 0x1570 <prvAddCurrentTaskToDelayedList+0x68>
    1542:	60 91 f0 09 	lds	r22, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    1546:	70 91 f1 09 	lds	r23, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    154a:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    154e:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    1552:	6e 5f       	subi	r22, 0xFE	; 254
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	0e 94 b5 01 	call	0x36a	; 0x36a <vListInsert>
    155a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <xNextTaskUnblockTime>
    155e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <xNextTaskUnblockTime+0x1>
    1562:	c8 17       	cp	r28, r24
    1564:	d9 07       	cpc	r29, r25
    1566:	20 f4       	brcc	.+8      	; 0x1570 <prvAddCurrentTaskToDelayedList+0x68>
    1568:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <xNextTaskUnblockTime+0x1>
    156c:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <xNextTaskUnblockTime>
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <xTaskGenericCreate>:
    1576:	4f 92       	push	r4
    1578:	5f 92       	push	r5
    157a:	6f 92       	push	r6
    157c:	7f 92       	push	r7
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	5c 01       	movw	r10, r24
    1598:	4b 01       	movw	r8, r22
    159a:	3a 01       	movw	r6, r20
    159c:	29 01       	movw	r4, r18
    159e:	81 e2       	ldi	r24, 0x21	; 33
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 55 01 	call	0x2aa	; 0x2aa <pvPortMalloc>
    15a6:	ec 01       	movw	r28, r24
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f4       	brne	.+2      	; 0x15ae <xTaskGenericCreate+0x38>
    15ac:	d3 c0       	rjmp	.+422    	; 0x1754 <xTaskGenericCreate+0x1de>
    15ae:	c1 14       	cp	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <xTaskGenericCreate+0x40>
    15b4:	cb c0       	rjmp	.+406    	; 0x174c <xTaskGenericCreate+0x1d6>
    15b6:	c3 01       	movw	r24, r6
    15b8:	0e 94 55 01 	call	0x2aa	; 0x2aa <pvPortMalloc>
    15bc:	98 8f       	std	Y+24, r25	; 0x18
    15be:	8f 8b       	std	Y+23, r24	; 0x17
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	21 f4       	brne	.+8      	; 0x15cc <xTaskGenericCreate+0x56>
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vPortFree>
    15ca:	c4 c0       	rjmp	.+392    	; 0x1754 <xTaskGenericCreate+0x1de>
    15cc:	a3 01       	movw	r20, r6
    15ce:	65 ea       	ldi	r22, 0xA5	; 165
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	4c d3       	rcall	.+1688   	; 0x1c6c <memset>
    15d4:	93 01       	movw	r18, r6
    15d6:	21 50       	subi	r18, 0x01	; 1
    15d8:	31 09       	sbc	r19, r1
    15da:	8f 89       	ldd	r24, Y+23	; 0x17
    15dc:	98 8d       	ldd	r25, Y+24	; 0x18
    15de:	3c 01       	movw	r6, r24
    15e0:	62 0e       	add	r6, r18
    15e2:	73 1e       	adc	r7, r19
    15e4:	48 e0       	ldi	r20, 0x08	; 8
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	b4 01       	movw	r22, r8
    15ea:	ce 01       	movw	r24, r28
    15ec:	49 96       	adiw	r24, 0x19	; 25
    15ee:	45 d3       	rcall	.+1674   	; 0x1c7a <strncpy>
    15f0:	18 a2       	std	Y+32, r1	; 0x20
    15f2:	10 2f       	mov	r17, r16
    15f4:	04 30       	cpi	r16, 0x04	; 4
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <xTaskGenericCreate+0x84>
    15f8:	13 e0       	ldi	r17, 0x03	; 3
    15fa:	1e 8b       	std	Y+22, r17	; 0x16
    15fc:	6e 01       	movw	r12, r28
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	c8 0e       	add	r12, r24
    1602:	d1 1c       	adc	r13, r1
    1604:	c6 01       	movw	r24, r12
    1606:	0e 94 8a 01 	call	0x314	; 0x314 <vListInitialiseItem>
    160a:	ce 01       	movw	r24, r28
    160c:	0c 96       	adiw	r24, 0x0c	; 12
    160e:	0e 94 8a 01 	call	0x314	; 0x314 <vListInitialiseItem>
    1612:	d9 87       	std	Y+9, r29	; 0x09
    1614:	c8 87       	std	Y+8, r28	; 0x08
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	81 1b       	sub	r24, r17
    161c:	91 09       	sbc	r25, r1
    161e:	9d 87       	std	Y+13, r25	; 0x0d
    1620:	8c 87       	std	Y+12, r24	; 0x0c
    1622:	db 8b       	std	Y+19, r29	; 0x13
    1624:	ca 8b       	std	Y+18, r28	; 0x12
    1626:	a2 01       	movw	r20, r4
    1628:	b5 01       	movw	r22, r10
    162a:	c3 01       	movw	r24, r6
    162c:	14 de       	rcall	.-984    	; 0x1256 <pxPortInitialiseStack>
    162e:	99 83       	std	Y+1, r25	; 0x01
    1630:	88 83       	st	Y, r24
    1632:	e1 14       	cp	r14, r1
    1634:	f1 04       	cpc	r15, r1
    1636:	19 f0       	breq	.+6      	; 0x163e <xTaskGenericCreate+0xc8>
    1638:	f7 01       	movw	r30, r14
    163a:	d1 83       	std	Z+1, r29	; 0x01
    163c:	c0 83       	st	Z, r28
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	0f 92       	push	r0
    1644:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <uxCurrentNumberOfTasks>
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <uxCurrentNumberOfTasks>
    164e:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    1652:	90 91 f1 09 	lds	r25, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    1656:	89 2b       	or	r24, r25
    1658:	a9 f5       	brne	.+106    	; 0x16c4 <xTaskGenericCreate+0x14e>
    165a:	d0 93 f1 09 	sts	0x09F1, r29	; 0x8009f1 <pxCurrentTCB+0x1>
    165e:	c0 93 f0 09 	sts	0x09F0, r28	; 0x8009f0 <pxCurrentTCB>
    1662:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <uxCurrentNumberOfTasks>
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	e1 f5       	brne	.+120    	; 0x16e2 <xTaskGenericCreate+0x16c>
    166a:	8c ec       	ldi	r24, 0xCC	; 204
    166c:	99 e0       	ldi	r25, 0x09	; 9
    166e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    1672:	85 ed       	ldi	r24, 0xD5	; 213
    1674:	99 e0       	ldi	r25, 0x09	; 9
    1676:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    167a:	8e ed       	ldi	r24, 0xDE	; 222
    167c:	99 e0       	ldi	r25, 0x09	; 9
    167e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    1682:	87 ee       	ldi	r24, 0xE7	; 231
    1684:	99 e0       	ldi	r25, 0x09	; 9
    1686:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    168a:	83 ec       	ldi	r24, 0xC3	; 195
    168c:	99 e0       	ldi	r25, 0x09	; 9
    168e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    1692:	8a eb       	ldi	r24, 0xBA	; 186
    1694:	99 e0       	ldi	r25, 0x09	; 9
    1696:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    169a:	8d ea       	ldi	r24, 0xAD	; 173
    169c:	99 e0       	ldi	r25, 0x09	; 9
    169e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    16a2:	84 ea       	ldi	r24, 0xA4	; 164
    16a4:	99 e0       	ldi	r25, 0x09	; 9
    16a6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <vListInitialise>
    16aa:	83 ec       	ldi	r24, 0xC3	; 195
    16ac:	99 e0       	ldi	r25, 0x09	; 9
    16ae:	90 93 b9 09 	sts	0x09B9, r25	; 0x8009b9 <pxDelayedTaskList+0x1>
    16b2:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <pxDelayedTaskList>
    16b6:	8a eb       	ldi	r24, 0xBA	; 186
    16b8:	99 e0       	ldi	r25, 0x09	; 9
    16ba:	90 93 b7 09 	sts	0x09B7, r25	; 0x8009b7 <pxOverflowDelayedTaskList+0x1>
    16be:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <pxOverflowDelayedTaskList>
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <xTaskGenericCreate+0x16c>
    16c4:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xSchedulerRunning>
    16c8:	81 11       	cpse	r24, r1
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <xTaskGenericCreate+0x16c>
    16cc:	e0 91 f0 09 	lds	r30, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    16d0:	f0 91 f1 09 	lds	r31, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    16d4:	86 89       	ldd	r24, Z+22	; 0x16
    16d6:	08 17       	cp	r16, r24
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <xTaskGenericCreate+0x16c>
    16da:	d0 93 f1 09 	sts	0x09F1, r29	; 0x8009f1 <pxCurrentTCB+0x1>
    16de:	c0 93 f0 09 	sts	0x09F0, r28	; 0x8009f0 <pxCurrentTCB>
    16e2:	8e 89       	ldd	r24, Y+22	; 0x16
    16e4:	90 91 9f 09 	lds	r25, 0x099F	; 0x80099f <uxTopUsedPriority>
    16e8:	98 17       	cp	r25, r24
    16ea:	10 f4       	brcc	.+4      	; 0x16f0 <xTaskGenericCreate+0x17a>
    16ec:	80 93 9f 09 	sts	0x099F, r24	; 0x80099f <uxTopUsedPriority>
    16f0:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <uxTaskNumber>
    16f4:	9f 5f       	subi	r25, 0xFF	; 255
    16f6:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <uxTaskNumber>
    16fa:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <uxTopReadyPriority>
    16fe:	98 17       	cp	r25, r24
    1700:	10 f4       	brcc	.+4      	; 0x1706 <xTaskGenericCreate+0x190>
    1702:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <uxTopReadyPriority>
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9c 01       	movw	r18, r24
    170a:	22 0f       	add	r18, r18
    170c:	33 1f       	adc	r19, r19
    170e:	22 0f       	add	r18, r18
    1710:	33 1f       	adc	r19, r19
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	b6 01       	movw	r22, r12
    171c:	84 53       	subi	r24, 0x34	; 52
    171e:	96 4f       	sbci	r25, 0xF6	; 246
    1720:	0e 94 8e 01 	call	0x31c	; 0x31c <vListInsertEnd>
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <xSchedulerRunning>
    172c:	88 23       	and	r24, r24
    172e:	51 f0       	breq	.+20     	; 0x1744 <xTaskGenericCreate+0x1ce>
    1730:	e0 91 f0 09 	lds	r30, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    1734:	f0 91 f1 09 	lds	r31, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    1738:	86 89       	ldd	r24, Z+22	; 0x16
    173a:	80 17       	cp	r24, r16
    173c:	28 f4       	brcc	.+10     	; 0x1748 <xTaskGenericCreate+0x1d2>
    173e:	31 de       	rcall	.-926    	; 0x13a2 <vPortYield>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <xTaskGenericCreate+0x1e0>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <xTaskGenericCreate+0x1e0>
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <xTaskGenericCreate+0x1e0>
    174c:	d8 8e       	std	Y+24, r13	; 0x18
    174e:	cf 8a       	std	Y+23, r12	; 0x17
    1750:	c6 01       	movw	r24, r12
    1752:	3c cf       	rjmp	.-392    	; 0x15cc <xTaskGenericCreate+0x56>
    1754:	8f ef       	ldi	r24, 0xFF	; 255
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	bf 90       	pop	r11
    1768:	af 90       	pop	r10
    176a:	9f 90       	pop	r9
    176c:	8f 90       	pop	r8
    176e:	7f 90       	pop	r7
    1770:	6f 90       	pop	r6
    1772:	5f 90       	pop	r5
    1774:	4f 90       	pop	r4
    1776:	08 95       	ret

00001778 <vTaskStartScheduler>:
    1778:	af 92       	push	r10
    177a:	bf 92       	push	r11
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	a1 2c       	mov	r10, r1
    1788:	b1 2c       	mov	r11, r1
    178a:	c1 2c       	mov	r12, r1
    178c:	d1 2c       	mov	r13, r1
    178e:	e1 2c       	mov	r14, r1
    1790:	f1 2c       	mov	r15, r1
    1792:	00 e0       	ldi	r16, 0x00	; 0
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	45 e5       	ldi	r20, 0x55	; 85
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	64 eb       	ldi	r22, 0xB4	; 180
    179e:	71 e0       	ldi	r23, 0x01	; 1
    17a0:	8f e4       	ldi	r24, 0x4F	; 79
    17a2:	9d e0       	ldi	r25, 0x0D	; 13
    17a4:	e8 de       	rcall	.-560    	; 0x1576 <xTaskGenericCreate>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	41 f4       	brne	.+16     	; 0x17ba <vTaskStartScheduler+0x42>
    17aa:	f8 94       	cli
    17ac:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <xSchedulerRunning>
    17b0:	10 92 a1 09 	sts	0x09A1, r1	; 0x8009a1 <xTickCount+0x1>
    17b4:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <xTickCount>
    17b8:	ba dd       	rcall	.-1164   	; 0x132e <xPortStartScheduler>
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	bf 90       	pop	r11
    17c6:	af 90       	pop	r10
    17c8:	08 95       	ret

000017ca <vTaskSuspendAll>:
    17ca:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <uxSchedulerSuspended>
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	80 93 9c 09 	sts	0x099C, r24	; 0x80099c <uxSchedulerSuspended>
    17d4:	08 95       	ret

000017d6 <vTaskIncrementTick>:
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <uxSchedulerSuspended>
    17e2:	81 11       	cpse	r24, r1
    17e4:	b2 c0       	rjmp	.+356    	; 0x194a <vTaskIncrementTick+0x174>
    17e6:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <xTickCount>
    17ea:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <xTickCount+0x1>
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <xTickCount+0x1>
    17f4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <xTickCount>
    17f8:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <xTickCount>
    17fc:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <xTickCount+0x1>
    1800:	89 2b       	or	r24, r25
    1802:	99 f5       	brne	.+102    	; 0x186a <vTaskIncrementTick+0x94>
    1804:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    1808:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    180c:	20 91 b6 09 	lds	r18, 0x09B6	; 0x8009b6 <pxOverflowDelayedTaskList>
    1810:	30 91 b7 09 	lds	r19, 0x09B7	; 0x8009b7 <pxOverflowDelayedTaskList+0x1>
    1814:	30 93 b9 09 	sts	0x09B9, r19	; 0x8009b9 <pxDelayedTaskList+0x1>
    1818:	20 93 b8 09 	sts	0x09B8, r18	; 0x8009b8 <pxDelayedTaskList>
    181c:	90 93 b7 09 	sts	0x09B7, r25	; 0x8009b7 <pxOverflowDelayedTaskList+0x1>
    1820:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <pxOverflowDelayedTaskList>
    1824:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <xNumOfOverflows>
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <xNumOfOverflows>
    182e:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    1832:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    1836:	80 81       	ld	r24, Z
    1838:	81 11       	cpse	r24, r1
    183a:	07 c0       	rjmp	.+14     	; 0x184a <vTaskIncrementTick+0x74>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	9f ef       	ldi	r25, 0xFF	; 255
    1840:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextTaskUnblockTime+0x1>
    1844:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextTaskUnblockTime>
    1848:	10 c0       	rjmp	.+32     	; 0x186a <vTaskIncrementTick+0x94>
    184a:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    184e:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    1852:	05 80       	ldd	r0, Z+5	; 0x05
    1854:	f6 81       	ldd	r31, Z+6	; 0x06
    1856:	e0 2d       	mov	r30, r0
    1858:	06 80       	ldd	r0, Z+6	; 0x06
    185a:	f7 81       	ldd	r31, Z+7	; 0x07
    185c:	e0 2d       	mov	r30, r0
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextTaskUnblockTime+0x1>
    1866:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextTaskUnblockTime>
    186a:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <xTickCount>
    186e:	30 91 a1 09 	lds	r19, 0x09A1	; 0x8009a1 <xTickCount+0x1>
    1872:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <xNextTaskUnblockTime>
    1876:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <xNextTaskUnblockTime+0x1>
    187a:	28 17       	cp	r18, r24
    187c:	39 07       	cpc	r19, r25
    187e:	08 f4       	brcc	.+2      	; 0x1882 <vTaskIncrementTick+0xac>
    1880:	69 c0       	rjmp	.+210    	; 0x1954 <vTaskIncrementTick+0x17e>
    1882:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    1886:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    188a:	80 81       	ld	r24, Z
    188c:	88 23       	and	r24, r24
    188e:	99 f0       	breq	.+38     	; 0x18b6 <vTaskIncrementTick+0xe0>
    1890:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    1894:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    1898:	05 80       	ldd	r0, Z+5	; 0x05
    189a:	f6 81       	ldd	r31, Z+6	; 0x06
    189c:	e0 2d       	mov	r30, r0
    189e:	c6 81       	ldd	r28, Z+6	; 0x06
    18a0:	d7 81       	ldd	r29, Z+7	; 0x07
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	9b 81       	ldd	r25, Y+3	; 0x03
    18a6:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <xTickCount>
    18aa:	30 91 a1 09 	lds	r19, 0x09A1	; 0x8009a1 <xTickCount+0x1>
    18ae:	28 17       	cp	r18, r24
    18b0:	39 07       	cpc	r19, r25
    18b2:	f8 f4       	brcc	.+62     	; 0x18f2 <vTaskIncrementTick+0x11c>
    18b4:	19 c0       	rjmp	.+50     	; 0x18e8 <vTaskIncrementTick+0x112>
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	9f ef       	ldi	r25, 0xFF	; 255
    18ba:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextTaskUnblockTime+0x1>
    18be:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextTaskUnblockTime>
    18c2:	48 c0       	rjmp	.+144    	; 0x1954 <vTaskIncrementTick+0x17e>
    18c4:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    18c8:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    18cc:	05 80       	ldd	r0, Z+5	; 0x05
    18ce:	f6 81       	ldd	r31, Z+6	; 0x06
    18d0:	e0 2d       	mov	r30, r0
    18d2:	c6 81       	ldd	r28, Z+6	; 0x06
    18d4:	d7 81       	ldd	r29, Z+7	; 0x07
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	9b 81       	ldd	r25, Y+3	; 0x03
    18da:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <xTickCount>
    18de:	30 91 a1 09 	lds	r19, 0x09A1	; 0x8009a1 <xTickCount+0x1>
    18e2:	28 17       	cp	r18, r24
    18e4:	39 07       	cpc	r19, r25
    18e6:	28 f4       	brcc	.+10     	; 0x18f2 <vTaskIncrementTick+0x11c>
    18e8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextTaskUnblockTime+0x1>
    18ec:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextTaskUnblockTime>
    18f0:	31 c0       	rjmp	.+98     	; 0x1954 <vTaskIncrementTick+0x17e>
    18f2:	8e 01       	movw	r16, r28
    18f4:	0e 5f       	subi	r16, 0xFE	; 254
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <vListRemove>
    18fe:	8c 89       	ldd	r24, Y+20	; 0x14
    1900:	9d 89       	ldd	r25, Y+21	; 0x15
    1902:	89 2b       	or	r24, r25
    1904:	21 f0       	breq	.+8      	; 0x190e <vTaskIncrementTick+0x138>
    1906:	ce 01       	movw	r24, r28
    1908:	0c 96       	adiw	r24, 0x0c	; 12
    190a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <vListRemove>
    190e:	8e 89       	ldd	r24, Y+22	; 0x16
    1910:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <uxTopReadyPriority>
    1914:	98 17       	cp	r25, r24
    1916:	10 f4       	brcc	.+4      	; 0x191c <vTaskIncrementTick+0x146>
    1918:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <uxTopReadyPriority>
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9c 01       	movw	r18, r24
    1920:	22 0f       	add	r18, r18
    1922:	33 1f       	adc	r19, r19
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	22 0f       	add	r18, r18
    192a:	33 1f       	adc	r19, r19
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	b8 01       	movw	r22, r16
    1932:	84 53       	subi	r24, 0x34	; 52
    1934:	96 4f       	sbci	r25, 0xF6	; 246
    1936:	0e 94 8e 01 	call	0x31c	; 0x31c <vListInsertEnd>
    193a:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <pxDelayedTaskList>
    193e:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <pxDelayedTaskList+0x1>
    1942:	80 81       	ld	r24, Z
    1944:	81 11       	cpse	r24, r1
    1946:	be cf       	rjmp	.-132    	; 0x18c4 <vTaskIncrementTick+0xee>
    1948:	b6 cf       	rjmp	.-148    	; 0x18b6 <vTaskIncrementTick+0xe0>
    194a:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <uxMissedTicks>
    194e:	8f 5f       	subi	r24, 0xFF	; 255
    1950:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <uxMissedTicks>
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <xTaskResumeAll>:
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	0f 92       	push	r0
    1974:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <uxSchedulerSuspended>
    1978:	81 50       	subi	r24, 0x01	; 1
    197a:	80 93 9c 09 	sts	0x099C, r24	; 0x80099c <uxSchedulerSuspended>
    197e:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <uxSchedulerSuspended>
    1982:	81 11       	cpse	r24, r1
    1984:	62 c0       	rjmp	.+196    	; 0x1a4a <xTaskResumeAll+0xec>
    1986:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <uxCurrentNumberOfTasks>
    198a:	81 11       	cpse	r24, r1
    198c:	32 c0       	rjmp	.+100    	; 0x19f2 <xTaskResumeAll+0x94>
    198e:	60 c0       	rjmp	.+192    	; 0x1a50 <xTaskResumeAll+0xf2>
    1990:	d7 01       	movw	r26, r14
    1992:	15 96       	adiw	r26, 0x05	; 5
    1994:	ed 91       	ld	r30, X+
    1996:	fc 91       	ld	r31, X
    1998:	16 97       	sbiw	r26, 0x06	; 6
    199a:	c6 81       	ldd	r28, Z+6	; 0x06
    199c:	d7 81       	ldd	r29, Z+7	; 0x07
    199e:	ce 01       	movw	r24, r28
    19a0:	0c 96       	adiw	r24, 0x0c	; 12
    19a2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <vListRemove>
    19a6:	8e 01       	movw	r16, r28
    19a8:	0e 5f       	subi	r16, 0xFE	; 254
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	c8 01       	movw	r24, r16
    19ae:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <vListRemove>
    19b2:	8e 89       	ldd	r24, Y+22	; 0x16
    19b4:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <uxTopReadyPriority>
    19b8:	98 17       	cp	r25, r24
    19ba:	10 f4       	brcc	.+4      	; 0x19c0 <xTaskResumeAll+0x62>
    19bc:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <uxTopReadyPriority>
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9c 01       	movw	r18, r24
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	22 0f       	add	r18, r18
    19ca:	33 1f       	adc	r19, r19
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	82 0f       	add	r24, r18
    19d2:	93 1f       	adc	r25, r19
    19d4:	b8 01       	movw	r22, r16
    19d6:	84 53       	subi	r24, 0x34	; 52
    19d8:	96 4f       	sbci	r25, 0xF6	; 246
    19da:	0e 94 8e 01 	call	0x31c	; 0x31c <vListInsertEnd>
    19de:	e0 91 f0 09 	lds	r30, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    19e2:	f0 91 f1 09 	lds	r31, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    19e6:	9e 89       	ldd	r25, Y+22	; 0x16
    19e8:	86 89       	ldd	r24, Z+22	; 0x16
    19ea:	98 17       	cp	r25, r24
    19ec:	58 f0       	brcs	.+22     	; 0x1a04 <xTaskResumeAll+0xa6>
    19ee:	dc 2c       	mov	r13, r12
    19f0:	09 c0       	rjmp	.+18     	; 0x1a04 <xTaskResumeAll+0xa6>
    19f2:	d1 2c       	mov	r13, r1
    19f4:	0f 2e       	mov	r0, r31
    19f6:	fd ea       	ldi	r31, 0xAD	; 173
    19f8:	ef 2e       	mov	r14, r31
    19fa:	f9 e0       	ldi	r31, 0x09	; 9
    19fc:	ff 2e       	mov	r15, r31
    19fe:	f0 2d       	mov	r31, r0
    1a00:	cc 24       	eor	r12, r12
    1a02:	c3 94       	inc	r12
    1a04:	f7 01       	movw	r30, r14
    1a06:	80 81       	ld	r24, Z
    1a08:	81 11       	cpse	r24, r1
    1a0a:	c2 cf       	rjmp	.-124    	; 0x1990 <xTaskResumeAll+0x32>
    1a0c:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <uxMissedTicks>
    1a10:	88 23       	and	r24, r24
    1a12:	79 f0       	breq	.+30     	; 0x1a32 <xTaskResumeAll+0xd4>
    1a14:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <uxMissedTicks>
    1a18:	88 23       	and	r24, r24
    1a1a:	91 f0       	breq	.+36     	; 0x1a40 <xTaskResumeAll+0xe2>
    1a1c:	dc de       	rcall	.-584    	; 0x17d6 <vTaskIncrementTick>
    1a1e:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <uxMissedTicks>
    1a22:	81 50       	subi	r24, 0x01	; 1
    1a24:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <uxMissedTicks>
    1a28:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <uxMissedTicks>
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	f6 cf       	rjmp	.-20     	; 0x1a1c <xTaskResumeAll+0xbe>
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <xTaskResumeAll+0xe2>
    1a32:	f1 e0       	ldi	r31, 0x01	; 1
    1a34:	df 16       	cp	r13, r31
    1a36:	21 f0       	breq	.+8      	; 0x1a40 <xTaskResumeAll+0xe2>
    1a38:	80 91 9a 09 	lds	r24, 0x099A	; 0x80099a <xMissedYield>
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	39 f4       	brne	.+14     	; 0x1a4e <xTaskResumeAll+0xf0>
    1a40:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <xMissedYield>
    1a44:	ae dc       	rcall	.-1700   	; 0x13a2 <vPortYield>
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <xTaskResumeAll+0xf2>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <xTaskResumeAll+0xf2>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	08 95       	ret

00001a66 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1a6c:	89 2b       	or	r24, r25
    1a6e:	99 f0       	breq	.+38     	; 0x1a96 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    1a70:	ac de       	rcall	.-680    	; 0x17ca <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1a72:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <xTickCount>
    1a76:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <xTickCount+0x1>
    1a7a:	c8 0f       	add	r28, r24
    1a7c:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1a7e:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <pxCurrentTCB>
    1a82:	90 91 f1 09 	lds	r25, 0x09F1	; 0x8009f1 <pxCurrentTCB+0x1>
    1a86:	02 96       	adiw	r24, 0x02	; 2
    1a88:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1a8c:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    1a8e:	3c dd       	rcall	.-1416   	; 0x1508 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1a90:	66 df       	rcall	.-308    	; 0x195e <xTaskResumeAll>
    1a92:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    1a94:	01 c0       	rjmp	.+2      	; 0x1a98 <vTaskDelay+0x32>
    1a96:	85 dc       	rcall	.-1782   	; 0x13a2 <vPortYield>
		}
	}
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1a9e:	0f 2e       	mov	r0, r31
    1aa0:	f4 ea       	ldi	r31, 0xA4	; 164
    1aa2:	ef 2e       	mov	r14, r31
    1aa4:	f9 e0       	ldi	r31, 0x09	; 9
    1aa6:	ff 2e       	mov	r15, r31
    1aa8:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1aaa:	cc ec       	ldi	r28, 0xCC	; 204
    1aac:	d9 e0       	ldi	r29, 0x09	; 9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1aae:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <uxTasksDeleted>
    1ab2:	88 23       	and	r24, r24
    1ab4:	41 f1       	breq	.+80     	; 0x1b06 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    1ab6:	89 de       	rcall	.-750    	; 0x17ca <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1ab8:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    1aba:	1c 91       	ld	r17, X
    1abc:	50 df       	rcall	.-352    	; 0x195e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1abe:	11 23       	and	r17, r17
    1ac0:	11 f1       	breq	.+68     	; 0x1b06 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1ac8:	d7 01       	movw	r26, r14
    1aca:	15 96       	adiw	r26, 0x05	; 5
    1acc:	ed 91       	ld	r30, X+
    1ace:	fc 91       	ld	r31, X
    1ad0:	16 97       	sbiw	r26, 0x06	; 6
    1ad2:	06 81       	ldd	r16, Z+6	; 0x06
    1ad4:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	02 96       	adiw	r24, 0x02	; 2
    1ada:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <vListRemove>
					--uxCurrentNumberOfTasks;
    1ade:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <uxCurrentNumberOfTasks>
    1ae2:	81 50       	subi	r24, 0x01	; 1
    1ae4:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1ae8:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <uxTasksDeleted>
    1aec:	81 50       	subi	r24, 0x01	; 1
    1aee:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    1af2:	0f 90       	pop	r0
    1af4:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1af6:	f8 01       	movw	r30, r16
    1af8:	87 89       	ldd	r24, Z+23	; 0x17
    1afa:	90 8d       	ldd	r25, Z+24	; 0x18
    1afc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vPortFree>
		vPortFree( pxTCB );
    1b00:	c8 01       	movw	r24, r16
    1b02:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1b06:	88 81       	ld	r24, Y
    1b08:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    1b0a:	88 f2       	brcs	.-94     	; 0x1aae <prvIdleTask+0x10>
    1b0c:	4a dc       	rcall	.-1900   	; 0x13a2 <vPortYield>
    1b0e:	cf cf       	rjmp	.-98     	; 0x1aae <prvIdleTask+0x10>

00001b10 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1b10:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <uxSchedulerSuspended>
    1b14:	81 11       	cpse	r24, r1
    1b16:	13 c0       	rjmp	.+38     	; 0x1b3e <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1b18:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <uxTopReadyPriority>
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	fc 01       	movw	r30, r24
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	8e 0f       	add	r24, r30
    1b2e:	9f 1f       	adc	r25, r31
    1b30:	fc 01       	movw	r30, r24
    1b32:	e4 53       	subi	r30, 0x34	; 52
    1b34:	f6 4f       	sbci	r31, 0xF6	; 246
    1b36:	80 81       	ld	r24, Z
    1b38:	88 23       	and	r24, r24
    1b3a:	29 f0       	breq	.+10     	; 0x1b46 <vTaskSwitchContext+0x36>
    1b3c:	1b c0       	rjmp	.+54     	; 0x1b74 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <xMissedYield>
    1b44:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1b46:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <uxTopReadyPriority>
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1b50:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <uxTopReadyPriority>
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	fc 01       	movw	r30, r24
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	8e 0f       	add	r24, r30
    1b66:	9f 1f       	adc	r25, r31
    1b68:	fc 01       	movw	r30, r24
    1b6a:	e4 53       	subi	r30, 0x34	; 52
    1b6c:	f6 4f       	sbci	r31, 0xF6	; 246
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 23       	and	r24, r24
    1b72:	49 f3       	breq	.-46     	; 0x1b46 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1b74:	80 91 9e 09 	lds	r24, 0x099E	; 0x80099e <uxTopReadyPriority>
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	22 0f       	add	r18, r18
    1b86:	33 1f       	adc	r19, r19
    1b88:	28 0f       	add	r18, r24
    1b8a:	39 1f       	adc	r19, r25
    1b8c:	d9 01       	movw	r26, r18
    1b8e:	a4 53       	subi	r26, 0x34	; 52
    1b90:	b6 4f       	sbci	r27, 0xF6	; 246
    1b92:	11 96       	adiw	r26, 0x01	; 1
    1b94:	ed 91       	ld	r30, X+
    1b96:	fc 91       	ld	r31, X
    1b98:	12 97       	sbiw	r26, 0x02	; 2
    1b9a:	02 80       	ldd	r0, Z+2	; 0x02
    1b9c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b9e:	e0 2d       	mov	r30, r0
    1ba0:	12 96       	adiw	r26, 0x02	; 2
    1ba2:	fc 93       	st	X, r31
    1ba4:	ee 93       	st	-X, r30
    1ba6:	11 97       	sbiw	r26, 0x01	; 1
    1ba8:	21 53       	subi	r18, 0x31	; 49
    1baa:	36 4f       	sbci	r19, 0xF6	; 246
    1bac:	e2 17       	cp	r30, r18
    1bae:	f3 07       	cpc	r31, r19
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <vTaskSwitchContext+0xac>
    1bb2:	22 81       	ldd	r18, Z+2	; 0x02
    1bb4:	33 81       	ldd	r19, Z+3	; 0x03
    1bb6:	fd 01       	movw	r30, r26
    1bb8:	32 83       	std	Z+2, r19	; 0x02
    1bba:	21 83       	std	Z+1, r18	; 0x01
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	8e 0f       	add	r24, r30
    1bcc:	9f 1f       	adc	r25, r31
    1bce:	fc 01       	movw	r30, r24
    1bd0:	e4 53       	subi	r30, 0x34	; 52
    1bd2:	f6 4f       	sbci	r31, 0xF6	; 246
    1bd4:	01 80       	ldd	r0, Z+1	; 0x01
    1bd6:	f2 81       	ldd	r31, Z+2	; 0x02
    1bd8:	e0 2d       	mov	r30, r0
    1bda:	86 81       	ldd	r24, Z+6	; 0x06
    1bdc:	97 81       	ldd	r25, Z+7	; 0x07
    1bde:	90 93 f1 09 	sts	0x09F1, r25	; 0x8009f1 <pxCurrentTCB+0x1>
    1be2:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <pxCurrentTCB>
    1be6:	08 95       	ret

00001be8 <__udivmodqi4>:
    1be8:	99 1b       	sub	r25, r25
    1bea:	79 e0       	ldi	r23, 0x09	; 9
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <__udivmodqi4_ep>

00001bee <__udivmodqi4_loop>:
    1bee:	99 1f       	adc	r25, r25
    1bf0:	96 17       	cp	r25, r22
    1bf2:	08 f0       	brcs	.+2      	; 0x1bf6 <__udivmodqi4_ep>
    1bf4:	96 1b       	sub	r25, r22

00001bf6 <__udivmodqi4_ep>:
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	7a 95       	dec	r23
    1bfa:	c9 f7       	brne	.-14     	; 0x1bee <__udivmodqi4_loop>
    1bfc:	80 95       	com	r24
    1bfe:	08 95       	ret

00001c00 <__udivmodhi4>:
    1c00:	aa 1b       	sub	r26, r26
    1c02:	bb 1b       	sub	r27, r27
    1c04:	51 e1       	ldi	r21, 0x11	; 17
    1c06:	07 c0       	rjmp	.+14     	; 0x1c16 <__udivmodhi4_ep>

00001c08 <__udivmodhi4_loop>:
    1c08:	aa 1f       	adc	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	a6 17       	cp	r26, r22
    1c0e:	b7 07       	cpc	r27, r23
    1c10:	10 f0       	brcs	.+4      	; 0x1c16 <__udivmodhi4_ep>
    1c12:	a6 1b       	sub	r26, r22
    1c14:	b7 0b       	sbc	r27, r23

00001c16 <__udivmodhi4_ep>:
    1c16:	88 1f       	adc	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	5a 95       	dec	r21
    1c1c:	a9 f7       	brne	.-22     	; 0x1c08 <__udivmodhi4_loop>
    1c1e:	80 95       	com	r24
    1c20:	90 95       	com	r25
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	08 95       	ret

00001c28 <__divmodhi4>:
    1c28:	97 fb       	bst	r25, 7
    1c2a:	07 2e       	mov	r0, r23
    1c2c:	16 f4       	brtc	.+4      	; 0x1c32 <__divmodhi4+0xa>
    1c2e:	00 94       	com	r0
    1c30:	06 d0       	rcall	.+12     	; 0x1c3e <__divmodhi4_neg1>
    1c32:	77 fd       	sbrc	r23, 7
    1c34:	08 d0       	rcall	.+16     	; 0x1c46 <__divmodhi4_neg2>
    1c36:	e4 df       	rcall	.-56     	; 0x1c00 <__udivmodhi4>
    1c38:	07 fc       	sbrc	r0, 7
    1c3a:	05 d0       	rcall	.+10     	; 0x1c46 <__divmodhi4_neg2>
    1c3c:	3e f4       	brtc	.+14     	; 0x1c4c <__divmodhi4_exit>

00001c3e <__divmodhi4_neg1>:
    1c3e:	90 95       	com	r25
    1c40:	81 95       	neg	r24
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	08 95       	ret

00001c46 <__divmodhi4_neg2>:
    1c46:	70 95       	com	r23
    1c48:	61 95       	neg	r22
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c4c <__divmodhi4_exit>:
    1c4c:	08 95       	ret

00001c4e <__umulhisi3>:
    1c4e:	a2 9f       	mul	r26, r18
    1c50:	b0 01       	movw	r22, r0
    1c52:	b3 9f       	mul	r27, r19
    1c54:	c0 01       	movw	r24, r0
    1c56:	a3 9f       	mul	r26, r19
    1c58:	70 0d       	add	r23, r0
    1c5a:	81 1d       	adc	r24, r1
    1c5c:	11 24       	eor	r1, r1
    1c5e:	91 1d       	adc	r25, r1
    1c60:	b2 9f       	mul	r27, r18
    1c62:	70 0d       	add	r23, r0
    1c64:	81 1d       	adc	r24, r1
    1c66:	11 24       	eor	r1, r1
    1c68:	91 1d       	adc	r25, r1
    1c6a:	08 95       	ret

00001c6c <memset>:
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <memset+0x6>
    1c70:	6d 93       	st	X+, r22
    1c72:	41 50       	subi	r20, 0x01	; 1
    1c74:	50 40       	sbci	r21, 0x00	; 0
    1c76:	e0 f7       	brcc	.-8      	; 0x1c70 <memset+0x4>
    1c78:	08 95       	ret

00001c7a <strncpy>:
    1c7a:	fb 01       	movw	r30, r22
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	41 50       	subi	r20, 0x01	; 1
    1c80:	50 40       	sbci	r21, 0x00	; 0
    1c82:	48 f0       	brcs	.+18     	; 0x1c96 <strncpy+0x1c>
    1c84:	01 90       	ld	r0, Z+
    1c86:	0d 92       	st	X+, r0
    1c88:	00 20       	and	r0, r0
    1c8a:	c9 f7       	brne	.-14     	; 0x1c7e <strncpy+0x4>
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <strncpy+0x16>
    1c8e:	1d 92       	st	X+, r1
    1c90:	41 50       	subi	r20, 0x01	; 1
    1c92:	50 40       	sbci	r21, 0x00	; 0
    1c94:	e0 f7       	brcc	.-8      	; 0x1c8e <strncpy+0x14>
    1c96:	08 95       	ret

00001c98 <_exit>:
    1c98:	f8 94       	cli

00001c9a <__stop_program>:
    1c9a:	ff cf       	rjmp	.-2      	; 0x1c9a <__stop_program>
