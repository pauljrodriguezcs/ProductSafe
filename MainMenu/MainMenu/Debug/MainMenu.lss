
MainMenu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  0000178c  00001820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000178c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000083a  00800214  00800214  00001934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032d3  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001129  00000000  00000000  00004ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e34  00000000  00000000  00005ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  00007e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f97  00000000  00000000  00008414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001872  00000000  00000000  000093ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000ac1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c1       	rjmp	.+666    	; 0x29c <__ctors_end>
       2:	00 00       	nop
       4:	69 c1       	rjmp	.+722    	; 0x2d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c1       	rjmp	.+718    	; 0x2d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c1       	rjmp	.+714    	; 0x2d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c1       	rjmp	.+710    	; 0x2d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c1       	rjmp	.+706    	; 0x2d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c1       	rjmp	.+702    	; 0x2d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c1       	rjmp	.+698    	; 0x2d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c1       	rjmp	.+694    	; 0x2d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c1       	rjmp	.+690    	; 0x2d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c1       	rjmp	.+686    	; 0x2d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c1       	rjmp	.+682    	; 0x2d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c1       	rjmp	.+678    	; 0x2d8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_13>
      38:	4f c1       	rjmp	.+670    	; 0x2d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c1       	rjmp	.+666    	; 0x2d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c1       	rjmp	.+662    	; 0x2d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c1       	rjmp	.+658    	; 0x2d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c1       	rjmp	.+654    	; 0x2d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c1       	rjmp	.+650    	; 0x2d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c1       	rjmp	.+646    	; 0x2d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c1       	rjmp	.+642    	; 0x2d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c1       	rjmp	.+638    	; 0x2d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c1       	rjmp	.+634    	; 0x2d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c1       	rjmp	.+630    	; 0x2d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c1       	rjmp	.+626    	; 0x2d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c1       	rjmp	.+622    	; 0x2d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c1       	rjmp	.+618    	; 0x2d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c1       	rjmp	.+614    	; 0x2d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c1       	rjmp	.+610    	; 0x2d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c1       	rjmp	.+606    	; 0x2d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c1       	rjmp	.+602    	; 0x2d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c1       	rjmp	.+598    	; 0x2d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c1       	rjmp	.+594    	; 0x2d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c1       	rjmp	.+590    	; 0x2d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 03       	mulsu	r18, r18
      8e:	30 03       	mulsu	r19, r16
      90:	3e 03       	fmul	r19, r22
      92:	4c 03       	fmul	r20, r20
      94:	5a 03       	fmul	r21, r18
      96:	68 03       	fmul	r22, r16
      98:	76 03       	mulsu	r23, r22
      9a:	84 03       	fmuls	r16, r20
      9c:	92 03       	fmuls	r17, r18
      9e:	a0 03       	fmuls	r18, r16
      a0:	ae 03       	fmulsu	r18, r22
      a2:	bc 03       	fmulsu	r19, r20
      a4:	d5 03       	fmuls	r21, r21
      a6:	05 04       	cpc	r0, r5
      a8:	18 04       	cpc	r1, r8
      aa:	2b 04       	cpc	r2, r11
      ac:	5f 04       	cpc	r5, r15
      ae:	88 04       	cpc	r8, r8
      b0:	9b 04       	cpc	r9, r11
      b2:	ae 04       	cpc	r10, r14
      b4:	ea 04       	cpc	r14, r10
      b6:	fd 04       	cpc	r15, r13
      b8:	10 05       	cpc	r17, r0
      ba:	22 05       	cpc	r18, r2

000000bc <CHARSET>:
      bc:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      cc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      dc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      ec:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      fc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     10c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     11c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     12c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     13c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     14c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     15c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     16c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     17c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     18c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     19c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1ac:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1bc:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1cc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1dc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1ec:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1fc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     20c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     21c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     22c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     23c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     24c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     25c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     26c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     27c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     28c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000029c <__ctors_end>:
     29c:	11 24       	eor	r1, r1
     29e:	1f be       	out	0x3f, r1	; 63
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
     2a2:	d0 e4       	ldi	r29, 0x40	; 64
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	cd bf       	out	0x3d, r28	; 61

000002a8 <__do_copy_data>:
     2a8:	12 e0       	ldi	r17, 0x02	; 2
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	ec e8       	ldi	r30, 0x8C	; 140
     2b0:	f7 e1       	ldi	r31, 0x17	; 23
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	0b bf       	out	0x3b, r16	; 59
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x14>
     2b8:	07 90       	elpm	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	a4 31       	cpi	r26, 0x14	; 20
     2be:	b1 07       	cpc	r27, r17
     2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0x10>

000002c2 <__do_clear_bss>:
     2c2:	2a e0       	ldi	r18, 0x0A	; 10
     2c4:	a4 e1       	ldi	r26, 0x14	; 20
     2c6:	b2 e0       	ldi	r27, 0x02	; 2
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
     2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
     2cc:	ae 34       	cpi	r26, 0x4E	; 78
     2ce:	b2 07       	cpc	r27, r18
     2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>
     2d2:	fd d3       	rcall	.+2042   	; 0xace <main>
     2d4:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <_exit>

000002d8 <__bad_interrupt>:
     2d8:	93 ce       	rjmp	.-730    	; 0x0 <__vectors>

000002da <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     2e0:	0e 94 8a 09 	call	0x1314	; 0x1314 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     2e4:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__data_end>
     2e8:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__data_end+0x1>
     2ec:	c9 01       	movw	r24, r18
     2ee:	8c 0f       	add	r24, r28
     2f0:	9d 1f       	adc	r25, r29
     2f2:	8c 3d       	cpi	r24, 0xDC	; 220
     2f4:	45 e0       	ldi	r20, 0x05	; 5
     2f6:	94 07       	cpc	r25, r20
     2f8:	58 f4       	brcc	.+22     	; 0x310 <pvPortMalloc+0x36>
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	58 f4       	brcc	.+22     	; 0x316 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     300:	e9 01       	movw	r28, r18
     302:	ca 5e       	subi	r28, 0xEA	; 234
     304:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
     306:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x1>
     30a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
     30e:	05 c0       	rjmp	.+10     	; 0x31a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     310:	c0 e0       	ldi	r28, 0x00	; 0
     312:	d0 e0       	ldi	r29, 0x00	; 0
     314:	02 c0       	rjmp	.+4      	; 0x31a <pvPortMalloc+0x40>
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     31a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     31e:	ce 01       	movw	r24, r28
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     326:	08 95       	ret

00000328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     328:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     32a:	03 96       	adiw	r24, 0x03	; 3
     32c:	92 83       	std	Z+2, r25	; 0x02
     32e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     330:	2f ef       	ldi	r18, 0xFF	; 255
     332:	3f ef       	ldi	r19, 0xFF	; 255
     334:	34 83       	std	Z+4, r19	; 0x04
     336:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     338:	96 83       	std	Z+6, r25	; 0x06
     33a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     33c:	90 87       	std	Z+8, r25	; 0x08
     33e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     340:	10 82       	st	Z, r1
     342:	08 95       	ret

00000344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     344:	fc 01       	movw	r30, r24
     346:	11 86       	std	Z+9, r1	; 0x09
     348:	10 86       	std	Z+8, r1	; 0x08
     34a:	08 95       	ret

0000034c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	fc 01       	movw	r30, r24
     352:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     354:	21 81       	ldd	r18, Z+1	; 0x01
     356:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     358:	e9 01       	movw	r28, r18
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	9b 81       	ldd	r25, Y+3	; 0x03
     35e:	13 96       	adiw	r26, 0x03	; 3
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
     364:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     366:	81 81       	ldd	r24, Z+1	; 0x01
     368:	92 81       	ldd	r25, Z+2	; 0x02
     36a:	15 96       	adiw	r26, 0x05	; 5
     36c:	9c 93       	st	X, r25
     36e:	8e 93       	st	-X, r24
     370:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	9b 81       	ldd	r25, Y+3	; 0x03
     376:	ec 01       	movw	r28, r24
     378:	7d 83       	std	Y+5, r23	; 0x05
     37a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     37c:	e9 01       	movw	r28, r18
     37e:	7b 83       	std	Y+3, r23	; 0x03
     380:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     382:	72 83       	std	Z+2, r23	; 0x02
     384:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     386:	19 96       	adiw	r26, 0x09	; 9
     388:	fc 93       	st	X, r31
     38a:	ee 93       	st	-X, r30
     38c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     38e:	80 81       	ld	r24, Z
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 83       	st	Z, r24
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     3a0:	48 81       	ld	r20, Y
     3a2:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     3a4:	4f 3f       	cpi	r20, 0xFF	; 255
     3a6:	2f ef       	ldi	r18, 0xFF	; 255
     3a8:	52 07       	cpc	r21, r18
     3aa:	31 f4       	brne	.+12     	; 0x3b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     3ac:	dc 01       	movw	r26, r24
     3ae:	17 96       	adiw	r26, 0x07	; 7
     3b0:	ed 91       	ld	r30, X+
     3b2:	fc 91       	ld	r31, X
     3b4:	18 97       	sbiw	r26, 0x08	; 8
     3b6:	17 c0       	rjmp	.+46     	; 0x3e6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     3b8:	fc 01       	movw	r30, r24
     3ba:	33 96       	adiw	r30, 0x03	; 3
     3bc:	dc 01       	movw	r26, r24
     3be:	15 96       	adiw	r26, 0x05	; 5
     3c0:	2d 91       	ld	r18, X+
     3c2:	3c 91       	ld	r19, X
     3c4:	16 97       	sbiw	r26, 0x06	; 6
     3c6:	d9 01       	movw	r26, r18
     3c8:	2d 91       	ld	r18, X+
     3ca:	3c 91       	ld	r19, X
     3cc:	42 17       	cp	r20, r18
     3ce:	53 07       	cpc	r21, r19
     3d0:	50 f0       	brcs	.+20     	; 0x3e6 <vListInsert+0x4c>
     3d2:	02 80       	ldd	r0, Z+2	; 0x02
     3d4:	f3 81       	ldd	r31, Z+3	; 0x03
     3d6:	e0 2d       	mov	r30, r0
     3d8:	a2 81       	ldd	r26, Z+2	; 0x02
     3da:	b3 81       	ldd	r27, Z+3	; 0x03
     3dc:	2d 91       	ld	r18, X+
     3de:	3c 91       	ld	r19, X
     3e0:	42 17       	cp	r20, r18
     3e2:	53 07       	cpc	r21, r19
     3e4:	b0 f7       	brcc	.-20     	; 0x3d2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     3e6:	a2 81       	ldd	r26, Z+2	; 0x02
     3e8:	b3 81       	ldd	r27, Z+3	; 0x03
     3ea:	bb 83       	std	Y+3, r27	; 0x03
     3ec:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     3ee:	15 96       	adiw	r26, 0x05	; 5
     3f0:	dc 93       	st	X, r29
     3f2:	ce 93       	st	-X, r28
     3f4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     3f6:	fd 83       	std	Y+5, r31	; 0x05
     3f8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     3fa:	d3 83       	std	Z+3, r29	; 0x03
     3fc:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     3fe:	99 87       	std	Y+9, r25	; 0x09
     400:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     402:	fc 01       	movw	r30, r24
     404:	20 81       	ld	r18, Z
     406:	2f 5f       	subi	r18, 0xFF	; 255
     408:	20 83       	st	Z, r18
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     410:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     412:	a2 81       	ldd	r26, Z+2	; 0x02
     414:	b3 81       	ldd	r27, Z+3	; 0x03
     416:	84 81       	ldd	r24, Z+4	; 0x04
     418:	95 81       	ldd	r25, Z+5	; 0x05
     41a:	15 96       	adiw	r26, 0x05	; 5
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
     420:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     422:	a4 81       	ldd	r26, Z+4	; 0x04
     424:	b5 81       	ldd	r27, Z+5	; 0x05
     426:	82 81       	ldd	r24, Z+2	; 0x02
     428:	93 81       	ldd	r25, Z+3	; 0x03
     42a:	13 96       	adiw	r26, 0x03	; 3
     42c:	9c 93       	st	X, r25
     42e:	8e 93       	st	-X, r24
     430:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     432:	a0 85       	ldd	r26, Z+8	; 0x08
     434:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	8d 91       	ld	r24, X+
     43a:	9c 91       	ld	r25, X
     43c:	12 97       	sbiw	r26, 0x02	; 2
     43e:	e8 17       	cp	r30, r24
     440:	f9 07       	cpc	r31, r25
     442:	31 f4       	brne	.+12     	; 0x450 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     444:	84 81       	ldd	r24, Z+4	; 0x04
     446:	95 81       	ldd	r25, Z+5	; 0x05
     448:	12 96       	adiw	r26, 0x02	; 2
     44a:	9c 93       	st	X, r25
     44c:	8e 93       	st	-X, r24
     44e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     450:	11 86       	std	Z+9, r1	; 0x09
     452:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     454:	8c 91       	ld	r24, X
     456:	81 50       	subi	r24, 0x01	; 1
     458:	8c 93       	st	X, r24
     45a:	08 95       	ret

0000045c <main_menu_display>:
}

//x: 8-bit value.   K: bit position, range is 0-7 return value in location k
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
     45c:	9d d3       	rcall	.+1850   	; 0xb98 <nokia_lcd_clear>
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	7f d4       	rcall	.+2302   	; 0xd64 <nokia_lcd_write_string>
     466:	6a e0       	ldi	r22, 0x0A	; 10
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	8e d4       	rcall	.+2332   	; 0xd88 <nokia_lcd_set_cursor>
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	78 d4       	rcall	.+2288   	; 0xd64 <nokia_lcd_write_string>
     474:	64 e1       	ldi	r22, 0x14	; 20
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	87 d4       	rcall	.+2318   	; 0xd88 <nokia_lcd_set_cursor>
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	8c e0       	ldi	r24, 0x0C	; 12
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	71 d4       	rcall	.+2274   	; 0xd64 <nokia_lcd_write_string>
     482:	6e e1       	ldi	r22, 0x1E	; 30
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	80 d4       	rcall	.+2304   	; 0xd88 <nokia_lcd_set_cursor>
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	84 e1       	ldi	r24, 0x14	; 20
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	6a d4       	rcall	.+2260   	; 0xd64 <nokia_lcd_write_string>
     490:	80 c4       	rjmp	.+2304   	; 0xd92 <nokia_lcd_render>
     492:	08 95       	ret

00000494 <settings_submenu_display>:
     494:	81 d3       	rcall	.+1794   	; 0xb98 <nokia_lcd_clear>
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	87 e1       	ldi	r24, 0x17	; 23
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	63 d4       	rcall	.+2246   	; 0xd64 <nokia_lcd_write_string>
     49e:	6a e0       	ldi	r22, 0x0A	; 10
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	72 d4       	rcall	.+2276   	; 0xd88 <nokia_lcd_set_cursor>
     4a4:	61 e0       	ldi	r22, 0x01	; 1
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	5c d4       	rcall	.+2232   	; 0xd64 <nokia_lcd_write_string>
     4ac:	64 e1       	ldi	r22, 0x14	; 20
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	6b d4       	rcall	.+2262   	; 0xd88 <nokia_lcd_set_cursor>
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	8a e2       	ldi	r24, 0x2A	; 42
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	55 d4       	rcall	.+2218   	; 0xd64 <nokia_lcd_write_string>
     4ba:	6e e1       	ldi	r22, 0x1E	; 30
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	64 d4       	rcall	.+2248   	; 0xd88 <nokia_lcd_set_cursor>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	83 e3       	ldi	r24, 0x33	; 51
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	4e d4       	rcall	.+2204   	; 0xd64 <nokia_lcd_write_string>
     4c8:	68 e2       	ldi	r22, 0x28	; 40
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	5d d4       	rcall	.+2234   	; 0xd88 <nokia_lcd_set_cursor>
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	8d e3       	ldi	r24, 0x3D	; 61
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	47 d4       	rcall	.+2190   	; 0xd64 <nokia_lcd_write_string>
     4d6:	5d c4       	rjmp	.+2234   	; 0xd92 <nokia_lcd_render>
     4d8:	08 95       	ret

000004da <drinks_submenu_display>:
     4da:	5e d3       	rcall	.+1724   	; 0xb98 <nokia_lcd_clear>
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	83 e2       	ldi	r24, 0x23	; 35
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	40 d4       	rcall	.+2176   	; 0xd64 <nokia_lcd_write_string>
     4e4:	6a e0       	ldi	r22, 0x0A	; 10
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	4f d4       	rcall	.+2206   	; 0xd88 <nokia_lcd_set_cursor>
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	8a e4       	ldi	r24, 0x4A	; 74
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	39 d4       	rcall	.+2162   	; 0xd64 <nokia_lcd_write_string>
     4f2:	64 e1       	ldi	r22, 0x14	; 20
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	48 d4       	rcall	.+2192   	; 0xd88 <nokia_lcd_set_cursor>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	87 e5       	ldi	r24, 0x57	; 87
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	32 d4       	rcall	.+2148   	; 0xd64 <nokia_lcd_write_string>
     500:	6e e1       	ldi	r22, 0x1E	; 30
     502:	84 e1       	ldi	r24, 0x14	; 20
     504:	41 d4       	rcall	.+2178   	; 0xd88 <nokia_lcd_set_cursor>
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	81 e5       	ldi	r24, 0x51	; 81
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	2b d4       	rcall	.+2134   	; 0xd64 <nokia_lcd_write_string>
     50e:	41 c4       	rjmp	.+2178   	; 0xd92 <nokia_lcd_render>
     510:	08 95       	ret

00000512 <user_submenu_display>:
     512:	42 d3       	rcall	.+1668   	; 0xb98 <nokia_lcd_clear>
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8d e2       	ldi	r24, 0x2D	; 45
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	24 d4       	rcall	.+2120   	; 0xd64 <nokia_lcd_write_string>
     51c:	6a e0       	ldi	r22, 0x0A	; 10
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	33 d4       	rcall	.+2150   	; 0xd88 <nokia_lcd_set_cursor>
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	82 e6       	ldi	r24, 0x62	; 98
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	1d d4       	rcall	.+2106   	; 0xd64 <nokia_lcd_write_string>
     52a:	64 e1       	ldi	r22, 0x14	; 20
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	2c d4       	rcall	.+2136   	; 0xd88 <nokia_lcd_set_cursor>
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	8e e6       	ldi	r24, 0x6E	; 110
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	16 d4       	rcall	.+2092   	; 0xd64 <nokia_lcd_write_string>
     538:	6e e1       	ldi	r22, 0x1E	; 30
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	25 d4       	rcall	.+2122   	; 0xd88 <nokia_lcd_set_cursor>
     53e:	61 e0       	ldi	r22, 0x01	; 1
     540:	8d e7       	ldi	r24, 0x7D	; 125
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0f d4       	rcall	.+2078   	; 0xd64 <nokia_lcd_write_string>
     546:	68 e2       	ldi	r22, 0x28	; 40
     548:	83 e2       	ldi	r24, 0x23	; 35
     54a:	1e d4       	rcall	.+2108   	; 0xd88 <nokia_lcd_set_cursor>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	86 e8       	ldi	r24, 0x86	; 134
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	08 d4       	rcall	.+2064   	; 0xd64 <nokia_lcd_write_string>
     554:	1e c4       	rjmp	.+2108   	; 0xd92 <nokia_lcd_render>
     556:	08 95       	ret

00000558 <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = 0xFE; // Set Px0 to 0; others 1
     558:	8e ef       	ldi	r24, 0xFE	; 254
     55a:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     55c:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
     55e:	86 b1       	in	r24, 0x06	; 6
     560:	80 95       	com	r24
     562:	84 fd       	sbrc	r24, 4
     564:	46 c0       	rjmp	.+140    	; 0x5f2 <GetKeypadKey+0x9a>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
     566:	86 b1       	in	r24, 0x06	; 6
     568:	80 95       	com	r24
     56a:	85 fd       	sbrc	r24, 5
     56c:	44 c0       	rjmp	.+136    	; 0x5f6 <GetKeypadKey+0x9e>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
     56e:	86 b1       	in	r24, 0x06	; 6
     570:	80 95       	com	r24
     572:	86 fd       	sbrc	r24, 6
     574:	42 c0       	rjmp	.+132    	; 0x5fa <GetKeypadKey+0xa2>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
     576:	86 b1       	in	r24, 0x06	; 6
     578:	80 95       	com	r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	88 0f       	add	r24, r24
     57e:	89 2f       	mov	r24, r25
     580:	88 1f       	adc	r24, r24
     582:	99 0b       	sbc	r25, r25
     584:	91 95       	neg	r25
     586:	89 2b       	or	r24, r25
     588:	d1 f5       	brne	.+116    	; 0x5fe <GetKeypadKey+0xa6>

	// Check keys in col 2
	KEYPADPORT = 0xFD;; // Set Px1 to 0; others 1
     58a:	8d ef       	ldi	r24, 0xFD	; 253
     58c:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     58e:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
     590:	86 b1       	in	r24, 0x06	; 6
     592:	80 95       	com	r24
     594:	84 fd       	sbrc	r24, 4
     596:	35 c0       	rjmp	.+106    	; 0x602 <GetKeypadKey+0xaa>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
     598:	86 b1       	in	r24, 0x06	; 6
     59a:	80 95       	com	r24
     59c:	85 fd       	sbrc	r24, 5
     59e:	33 c0       	rjmp	.+102    	; 0x606 <GetKeypadKey+0xae>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
     5a0:	86 b1       	in	r24, 0x06	; 6
     5a2:	80 95       	com	r24
     5a4:	86 fd       	sbrc	r24, 6
     5a6:	31 c0       	rjmp	.+98     	; 0x60a <GetKeypadKey+0xb2>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
     5a8:	86 b1       	in	r24, 0x06	; 6
     5aa:	80 95       	com	r24
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	88 0f       	add	r24, r24
     5b0:	89 2f       	mov	r24, r25
     5b2:	88 1f       	adc	r24, r24
     5b4:	99 0b       	sbc	r25, r25
     5b6:	91 95       	neg	r25
     5b8:	89 2b       	or	r24, r25
     5ba:	49 f5       	brne	.+82     	; 0x60e <GetKeypadKey+0xb6>

	// Check keys in col 3
	KEYPADPORT = 0xFB;; // Set Px2 to 0; others 1
     5bc:	8b ef       	ldi	r24, 0xFB	; 251
     5be:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
     5c0:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
     5c2:	86 b1       	in	r24, 0x06	; 6
     5c4:	80 95       	com	r24
     5c6:	84 fd       	sbrc	r24, 4
     5c8:	24 c0       	rjmp	.+72     	; 0x612 <GetKeypadKey+0xba>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
     5ca:	86 b1       	in	r24, 0x06	; 6
     5cc:	80 95       	com	r24
     5ce:	85 fd       	sbrc	r24, 5
     5d0:	22 c0       	rjmp	.+68     	; 0x616 <GetKeypadKey+0xbe>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
     5d2:	86 b1       	in	r24, 0x06	; 6
     5d4:	80 95       	com	r24
     5d6:	86 fd       	sbrc	r24, 6
     5d8:	20 c0       	rjmp	.+64     	; 0x61a <GetKeypadKey+0xc2>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
     5da:	86 b1       	in	r24, 0x06	; 6
     5dc:	80 95       	com	r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	88 0f       	add	r24, r24
     5e2:	89 2f       	mov	r24, r25
     5e4:	88 1f       	adc	r24, r24
     5e6:	99 0b       	sbc	r25, r25
     5e8:	91 95       	neg	r25
     5ea:	89 2b       	or	r24, r25
     5ec:	c1 f4       	brne	.+48     	; 0x61e <GetKeypadKey+0xc6>
	
	return '\0';
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = 0xFE; // Set Px0 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
     5f2:	81 e3       	ldi	r24, 0x31	; 49
     5f4:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
     5f6:	84 e3       	ldi	r24, 0x34	; 52
     5f8:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
     5fa:	87 e3       	ldi	r24, 0x37	; 55
     5fc:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
     5fe:	8a e2       	ldi	r24, 0x2A	; 42
     600:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = 0xFD;; // Set Px1 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
     602:	82 e3       	ldi	r24, 0x32	; 50
     604:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
     606:	85 e3       	ldi	r24, 0x35	; 53
     608:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
     60a:	88 e3       	ldi	r24, 0x38	; 56
     60c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
     60e:	80 e3       	ldi	r24, 0x30	; 48
     610:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = 0xFB;; // Set Px2 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
     612:	83 e3       	ldi	r24, 0x33	; 51
     614:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
     616:	86 e3       	ldi	r24, 0x36	; 54
     618:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
     61a:	89 e3       	ldi	r24, 0x39	; 57
     61c:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
     61e:	83 e2       	ldi	r24, 0x23	; 35
	
	return '\0';
}
     620:	08 95       	ret

00000622 <MainMenu_Init>:
enum MainMenuState {MainMenu, get_drink, get_key, settings, drink_options, 
					add_drink, replace_drink, user_options, add_user, 
					remove_user, reset_password, system_options} mainmenu_state;

void MainMenu_Init(){
	mainmenu_state = MainMenu;
     622:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
	main_menu_display();
     626:	1a cf       	rjmp	.-460    	; 0x45c <main_menu_display>
     628:	08 95       	ret

0000062a <MainMenu_Tick>:
}

void MainMenu_Tick(){
	//Actions
	switch(mainmenu_state){
     62a:	e0 91 4d 0a 	lds	r30, 0x0A4D	; 0x800a4d <mainmenu_state>
     62e:	8e 2f       	mov	r24, r30
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	8c 30       	cpi	r24, 0x0C	; 12
     634:	91 05       	cpc	r25, r1
     636:	08 f0       	brcs	.+2      	; 0x63a <MainMenu_Tick+0x10>
     638:	ac c0       	rjmp	.+344    	; 0x792 <MainMenu_Tick+0x168>
     63a:	fc 01       	movw	r30, r24
     63c:	ea 5b       	subi	r30, 0xBA	; 186
     63e:	ff 4f       	sbci	r31, 0xFF	; 255
     640:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__tablejump2__>
		unsigned char pushed_key = GetKeypadKey();

		case MainMenu:
			main_menu_selection = GetKeypadKey();
     644:	89 df       	rcall	.-238    	; 0x558 <GetKeypadKey>
     646:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <main_menu_selection>
			pushed_key = GetKeypadKey();
     64a:	86 df       	rcall	.-244    	; 0x558 <GetKeypadKey>
     64c:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <main_menu_selection>
			
			while(main_menu_selection == pushed_key){
     650:	89 13       	cpse	r24, r25
     652:	9f c0       	rjmp	.+318    	; 0x792 <MainMenu_Tick+0x168>
				pushed_key = GetKeypadKey();
     654:	81 df       	rcall	.-254    	; 0x558 <GetKeypadKey>
     656:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <main_menu_selection>

		case MainMenu:
			main_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(main_menu_selection == pushed_key){
     65a:	98 17       	cp	r25, r24
     65c:	d9 f3       	breq	.-10     	; 0x654 <MainMenu_Tick+0x2a>
     65e:	99 c0       	rjmp	.+306    	; 0x792 <MainMenu_Tick+0x168>
			}
			
			break;
		
		case get_drink:
			temp_menu_selection = GetKeypadKey();
     660:	7b df       	rcall	.-266    	; 0x558 <GetKeypadKey>
     662:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
			pushed_key = GetKeypadKey();
     666:	78 df       	rcall	.-272    	; 0x558 <GetKeypadKey>
			
			while(temp_menu_selection == pushed_key){
     668:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
     66c:	89 13       	cpse	r24, r25
     66e:	91 c0       	rjmp	.+290    	; 0x792 <MainMenu_Tick+0x168>
				pushed_key = GetKeypadKey();
     670:	73 df       	rcall	.-282    	; 0x558 <GetKeypadKey>
		
		case get_drink:
			temp_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(temp_menu_selection == pushed_key){
     672:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
     676:	98 17       	cp	r25, r24
     678:	d9 f3       	breq	.-10     	; 0x670 <MainMenu_Tick+0x46>
			}
			
			break;
			
		case get_key:
			temp_menu_selection = GetKeypadKey();
     67a:	8b c0       	rjmp	.+278    	; 0x792 <MainMenu_Tick+0x168>
     67c:	6d df       	rcall	.-294    	; 0x558 <GetKeypadKey>
     67e:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
			pushed_key = GetKeypadKey();
     682:	6a df       	rcall	.-300    	; 0x558 <GetKeypadKey>
			
			while(temp_menu_selection == pushed_key){
     684:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
     688:	89 13       	cpse	r24, r25
				pushed_key = GetKeypadKey();
     68a:	83 c0       	rjmp	.+262    	; 0x792 <MainMenu_Tick+0x168>
			
		case get_key:
			temp_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(temp_menu_selection == pushed_key){
     68c:	65 df       	rcall	.-310    	; 0x558 <GetKeypadKey>
     68e:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
     692:	98 17       	cp	r25, r24
			}
			
			break;
			
		case settings:
			settings_menu_selection = GetKeypadKey();
     694:	d9 f3       	breq	.-10     	; 0x68c <MainMenu_Tick+0x62>
     696:	7d c0       	rjmp	.+250    	; 0x792 <MainMenu_Tick+0x168>
     698:	5f df       	rcall	.-322    	; 0x558 <GetKeypadKey>
     69a:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <settings_menu_selection>
			pushed_key = GetKeypadKey();
			
			while(settings_menu_selection == pushed_key){
     69e:	5c df       	rcall	.-328    	; 0x558 <GetKeypadKey>
     6a0:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <settings_menu_selection>
				pushed_key = GetKeypadKey();
     6a4:	89 13       	cpse	r24, r25
     6a6:	75 c0       	rjmp	.+234    	; 0x792 <MainMenu_Tick+0x168>
			
		case settings:
			settings_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(settings_menu_selection == pushed_key){
     6a8:	57 df       	rcall	.-338    	; 0x558 <GetKeypadKey>
     6aa:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <settings_menu_selection>
     6ae:	98 17       	cp	r25, r24
			}
			
			break;
			
		case drink_options:
			drink_menu_selection = GetKeypadKey();
     6b0:	d9 f3       	breq	.-10     	; 0x6a8 <MainMenu_Tick+0x7e>
     6b2:	6f c0       	rjmp	.+222    	; 0x792 <MainMenu_Tick+0x168>
     6b4:	51 df       	rcall	.-350    	; 0x558 <GetKeypadKey>
			pushed_key = GetKeypadKey();
     6b6:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <drink_menu_selection>
			
			while(drink_menu_selection == pushed_key){
     6ba:	4e df       	rcall	.-356    	; 0x558 <GetKeypadKey>
     6bc:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <drink_menu_selection>
				pushed_key = GetKeypadKey();
     6c0:	89 13       	cpse	r24, r25
			
		case drink_options:
			drink_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(drink_menu_selection == pushed_key){
     6c2:	67 c0       	rjmp	.+206    	; 0x792 <MainMenu_Tick+0x168>
     6c4:	49 df       	rcall	.-366    	; 0x558 <GetKeypadKey>
     6c6:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <drink_menu_selection>
			}
			
			break;
			
		case add_drink:
			temp_menu_selection = GetKeypadKey();
     6ca:	98 17       	cp	r25, r24
     6cc:	d9 f3       	breq	.-10     	; 0x6c4 <MainMenu_Tick+0x9a>
     6ce:	61 c0       	rjmp	.+194    	; 0x792 <MainMenu_Tick+0x168>
			pushed_key = GetKeypadKey();
     6d0:	43 df       	rcall	.-378    	; 0x558 <GetKeypadKey>
     6d2:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
			
			while(temp_menu_selection == pushed_key){
     6d6:	40 df       	rcall	.-384    	; 0x558 <GetKeypadKey>
     6d8:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
				pushed_key = GetKeypadKey();
     6dc:	89 13       	cpse	r24, r25
			
		case add_drink:
			temp_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(temp_menu_selection == pushed_key){
     6de:	59 c0       	rjmp	.+178    	; 0x792 <MainMenu_Tick+0x168>
     6e0:	3b df       	rcall	.-394    	; 0x558 <GetKeypadKey>
     6e2:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
			}
			
			break;
			
		case replace_drink:
			temp_menu_selection = GetKeypadKey();
     6e6:	98 17       	cp	r25, r24
     6e8:	d9 f3       	breq	.-10     	; 0x6e0 <MainMenu_Tick+0xb6>
     6ea:	53 c0       	rjmp	.+166    	; 0x792 <MainMenu_Tick+0x168>
     6ec:	35 df       	rcall	.-406    	; 0x558 <GetKeypadKey>
			pushed_key = GetKeypadKey();
     6ee:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
			
			while(temp_menu_selection == pushed_key){
     6f2:	32 df       	rcall	.-412    	; 0x558 <GetKeypadKey>
     6f4:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
				pushed_key = GetKeypadKey();
     6f8:	89 13       	cpse	r24, r25
			
		case replace_drink:
			temp_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(temp_menu_selection == pushed_key){
     6fa:	4b c0       	rjmp	.+150    	; 0x792 <MainMenu_Tick+0x168>
     6fc:	2d df       	rcall	.-422    	; 0x558 <GetKeypadKey>
     6fe:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
			}
			
			break;
			
		case user_options:
			user_menu_selection = GetKeypadKey();
     702:	98 17       	cp	r25, r24
     704:	d9 f3       	breq	.-10     	; 0x6fc <MainMenu_Tick+0xd2>
     706:	45 c0       	rjmp	.+138    	; 0x792 <MainMenu_Tick+0x168>
			pushed_key = GetKeypadKey();
     708:	27 df       	rcall	.-434    	; 0x558 <GetKeypadKey>
     70a:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <user_menu_selection>
			
			while(user_menu_selection == pushed_key){
     70e:	24 df       	rcall	.-440    	; 0x558 <GetKeypadKey>
     710:	90 91 f2 07 	lds	r25, 0x07F2	; 0x8007f2 <user_menu_selection>
     714:	89 13       	cpse	r24, r25
     716:	3d c0       	rjmp	.+122    	; 0x792 <MainMenu_Tick+0x168>
     718:	1f df       	rcall	.-450    	; 0x558 <GetKeypadKey>
     71a:	90 91 f2 07 	lds	r25, 0x07F2	; 0x8007f2 <user_menu_selection>
			}
			
			break;
			
		case add_user:
			temp_menu_selection = GetKeypadKey();
     71e:	98 17       	cp	r25, r24
     720:	d9 f3       	breq	.-10     	; 0x718 <MainMenu_Tick+0xee>
     722:	37 c0       	rjmp	.+110    	; 0x792 <MainMenu_Tick+0x168>
			pushed_key = GetKeypadKey();
     724:	19 df       	rcall	.-462    	; 0x558 <GetKeypadKey>
			
			while(temp_menu_selection == pushed_key){
     726:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
     72a:	16 df       	rcall	.-468    	; 0x558 <GetKeypadKey>
				pushed_key = GetKeypadKey();
     72c:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
			
		case add_user:
			temp_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(temp_menu_selection == pushed_key){
     730:	89 13       	cpse	r24, r25
     732:	2f c0       	rjmp	.+94     	; 0x792 <MainMenu_Tick+0x168>
     734:	11 df       	rcall	.-478    	; 0x558 <GetKeypadKey>
     736:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
			}
			
			break;
			
		case remove_user:
			temp_menu_selection = GetKeypadKey();
     73a:	98 17       	cp	r25, r24
     73c:	d9 f3       	breq	.-10     	; 0x734 <MainMenu_Tick+0x10a>
			pushed_key = GetKeypadKey();
     73e:	29 c0       	rjmp	.+82     	; 0x792 <MainMenu_Tick+0x168>
			
			while(temp_menu_selection == pushed_key){
     740:	0b df       	rcall	.-490    	; 0x558 <GetKeypadKey>
     742:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
				pushed_key = GetKeypadKey();
     746:	08 df       	rcall	.-496    	; 0x558 <GetKeypadKey>
     748:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
			
		case remove_user:
			temp_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(temp_menu_selection == pushed_key){
     74c:	89 13       	cpse	r24, r25
     74e:	21 c0       	rjmp	.+66     	; 0x792 <MainMenu_Tick+0x168>
     750:	03 df       	rcall	.-506    	; 0x558 <GetKeypadKey>
     752:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
			}
			
			break;
			
		case reset_password:
			temp_menu_selection = GetKeypadKey();
     756:	98 17       	cp	r25, r24
     758:	d9 f3       	breq	.-10     	; 0x750 <MainMenu_Tick+0x126>
     75a:	1b c0       	rjmp	.+54     	; 0x792 <MainMenu_Tick+0x168>
			pushed_key = GetKeypadKey();
     75c:	fd de       	rcall	.-518    	; 0x558 <GetKeypadKey>
     75e:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
			
			while(temp_menu_selection == pushed_key){
     762:	fa de       	rcall	.-524    	; 0x558 <GetKeypadKey>
     764:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
				pushed_key = GetKeypadKey();
     768:	89 13       	cpse	r24, r25
			
		case reset_password:
			temp_menu_selection = GetKeypadKey();
			pushed_key = GetKeypadKey();
			
			while(temp_menu_selection == pushed_key){
     76a:	13 c0       	rjmp	.+38     	; 0x792 <MainMenu_Tick+0x168>
     76c:	f5 de       	rcall	.-534    	; 0x558 <GetKeypadKey>
     76e:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
     772:	98 17       	cp	r25, r24
			}
			
			break;
			
		case system_options:
			temp_menu_selection = GetKeypadKey();
     774:	d9 f3       	breq	.-10     	; 0x76c <MainMenu_Tick+0x142>
     776:	0d c0       	rjmp	.+26     	; 0x792 <MainMenu_Tick+0x168>
     778:	ef de       	rcall	.-546    	; 0x558 <GetKeypadKey>
			pushed_key = GetKeypadKey();
     77a:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <temp_menu_selection>
			
			while(temp_menu_selection == pushed_key){
     77e:	ec de       	rcall	.-552    	; 0x558 <GetKeypadKey>
     780:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
     784:	89 13       	cpse	r24, r25
     786:	05 c0       	rjmp	.+10     	; 0x792 <MainMenu_Tick+0x168>
     788:	e7 de       	rcall	.-562    	; 0x558 <GetKeypadKey>
			
		default:
			break;
	}
	//Transitions
	switch(mainmenu_state){
     78a:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <temp_menu_selection>
     78e:	98 17       	cp	r25, r24
     790:	d9 f3       	breq	.-10     	; 0x788 <MainMenu_Tick+0x15e>
     792:	e0 91 4d 0a 	lds	r30, 0x0A4D	; 0x800a4d <mainmenu_state>
     796:	8e 2f       	mov	r24, r30
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	8c 30       	cpi	r24, 0x0C	; 12
     79c:	91 05       	cpc	r25, r1
		case MainMenu:
			if(main_menu_selection == '1'){
     79e:	08 f0       	brcs	.+2      	; 0x7a2 <MainMenu_Tick+0x178>
     7a0:	63 c1       	rjmp	.+710    	; 0xa68 <MainMenu_Tick+0x43e>
				mainmenu_state = get_drink;
     7a2:	fc 01       	movw	r30, r24
     7a4:	ee 5a       	subi	r30, 0xAE	; 174
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
				nokia_lcd_clear();
     7a8:	d0 c7       	rjmp	.+4000   	; 0x174a <__tablejump2__>
     7aa:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <main_menu_selection>
				nokia_lcd_write_string("*Drink stuff*",1);
     7ae:	81 33       	cpi	r24, 0x31	; 49
     7b0:	89 f4       	brne	.+34     	; 0x7d4 <MainMenu_Tick+0x1aa>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
				nokia_lcd_set_cursor(2,10);
     7b4:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
     7b8:	ef d1       	rcall	.+990    	; 0xb98 <nokia_lcd_clear>
     7ba:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_write_string("# to return",1);
     7bc:	8f e8       	ldi	r24, 0x8F	; 143
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	d1 d2       	rcall	.+1442   	; 0xd64 <nokia_lcd_write_string>
     7c2:	6a e0       	ldi	r22, 0x0A	; 10
     7c4:	82 e0       	ldi	r24, 0x02	; 2
				nokia_lcd_render();
     7c6:	e0 d2       	rcall	.+1472   	; 0xd88 <nokia_lcd_set_cursor>
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	8d e9       	ldi	r24, 0x9D	; 157
			}
			
			else if(main_menu_selection == '2'){
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	ca d2       	rcall	.+1428   	; 0xd64 <nokia_lcd_write_string>
				mainmenu_state = get_key;
     7d0:	e0 c2       	rjmp	.+1472   	; 0xd92 <nokia_lcd_render>
     7d2:	08 95       	ret
				nokia_lcd_clear();
     7d4:	82 33       	cpi	r24, 0x32	; 50
     7d6:	89 f4       	brne	.+34     	; 0x7fa <MainMenu_Tick+0x1d0>
				nokia_lcd_write_string("*Key Stuff*",1);
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
     7de:	dc d1       	rcall	.+952    	; 0xb98 <nokia_lcd_clear>
     7e0:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_set_cursor(2,10);
     7e2:	89 ea       	ldi	r24, 0xA9	; 169
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	be d2       	rcall	.+1404   	; 0xd64 <nokia_lcd_write_string>
     7e8:	6a e0       	ldi	r22, 0x0A	; 10
				nokia_lcd_write_string("# to return",1);
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	cd d2       	rcall	.+1434   	; 0xd88 <nokia_lcd_set_cursor>
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	8d e9       	ldi	r24, 0x9D	; 157
     7f2:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_render();
     7f4:	b7 d2       	rcall	.+1390   	; 0xd64 <nokia_lcd_write_string>
     7f6:	cd c2       	rjmp	.+1434   	; 0xd92 <nokia_lcd_render>
			}
			
			else if(main_menu_selection == '3'){
     7f8:	08 95       	ret
     7fa:	83 33       	cpi	r24, 0x33	; 51
     7fc:	09 f0       	breq	.+2      	; 0x800 <MainMenu_Tick+0x1d6>
				mainmenu_state = settings;
     7fe:	41 c1       	rjmp	.+642    	; 0xa82 <MainMenu_Tick+0x458>
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
				settings_submenu_display();
     806:	46 ce       	rjmp	.-884    	; 0x494 <settings_submenu_display>
			}
			
			break;
		
		case get_drink:
			if(temp_menu_selection == '#'){
     808:	08 95       	ret
     80a:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
     80e:	83 32       	cpi	r24, 0x23	; 35
     810:	09 f0       	breq	.+2      	; 0x814 <MainMenu_Tick+0x1ea>
				mainmenu_state = MainMenu;
     812:	37 c1       	rjmp	.+622    	; 0xa82 <MainMenu_Tick+0x458>
				main_menu_selection = '\0';
     814:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				temp_menu_selection = '\0';
     818:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				settings_menu_selection = '\0';
     81c:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				drink_menu_selection = '\0';
     820:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
				user_menu_selection = '\0';
				main_menu_display();
     824:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
			}
			
			break;
		
		case get_key:
			if(temp_menu_selection == '#'){
     828:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
     82c:	17 ce       	rjmp	.-978    	; 0x45c <main_menu_display>
     82e:	08 95       	ret
				mainmenu_state = MainMenu;
     830:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
				main_menu_selection = '\0';
     834:	83 32       	cpi	r24, 0x23	; 35
     836:	09 f0       	breq	.+2      	; 0x83a <MainMenu_Tick+0x210>
				temp_menu_selection = '\0';
     838:	24 c1       	rjmp	.+584    	; 0xa82 <MainMenu_Tick+0x458>
     83a:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				settings_menu_selection = '\0';
     83e:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				drink_menu_selection = '\0';
     842:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				user_menu_selection = '\0';
     846:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
				main_menu_display();
     84a:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
			}
			
			break;
			
		case settings:
			if(settings_menu_selection == '1'){
     84e:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
     852:	04 ce       	rjmp	.-1016   	; 0x45c <main_menu_display>
				mainmenu_state = drink_options;
     854:	08 95       	ret
     856:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <settings_menu_selection>
				drinks_submenu_display();
     85a:	81 33       	cpi	r24, 0x31	; 49
     85c:	29 f4       	brne	.+10     	; 0x868 <MainMenu_Tick+0x23e>
     85e:	84 e0       	ldi	r24, 0x04	; 4
			}
			
			else if(settings_menu_selection == '2'){
     860:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
				mainmenu_state = user_options;
     864:	3a ce       	rjmp	.-908    	; 0x4da <drinks_submenu_display>
				user_submenu_display();
     866:	08 95       	ret
     868:	82 33       	cpi	r24, 0x32	; 50
			}
			
			else if(settings_menu_selection == '3'){
     86a:	29 f4       	brne	.+10     	; 0x876 <MainMenu_Tick+0x24c>
     86c:	87 e0       	ldi	r24, 0x07	; 7
				mainmenu_state = system_options;
     86e:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
				nokia_lcd_clear();
     872:	4f ce       	rjmp	.-866    	; 0x512 <user_submenu_display>
     874:	08 95       	ret
				nokia_lcd_write_string("*Sttngs stuff*",1);
     876:	83 33       	cpi	r24, 0x33	; 51
     878:	89 f4       	brne	.+34     	; 0x89c <MainMenu_Tick+0x272>
     87a:	8b e0       	ldi	r24, 0x0B	; 11
     87c:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
				nokia_lcd_set_cursor(2,10);
     880:	8b d1       	rcall	.+790    	; 0xb98 <nokia_lcd_clear>
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	85 eb       	ldi	r24, 0xB5	; 181
				nokia_lcd_write_string("# to return",1);
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	6d d2       	rcall	.+1242   	; 0xd64 <nokia_lcd_write_string>
     88a:	6a e0       	ldi	r22, 0x0A	; 10
				nokia_lcd_render();
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	7c d2       	rcall	.+1272   	; 0xd88 <nokia_lcd_set_cursor>
			}
			
			else if(settings_menu_selection == '4'){
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	8d e9       	ldi	r24, 0x9D	; 157
				mainmenu_state = MainMenu;
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	66 d2       	rcall	.+1228   	; 0xd64 <nokia_lcd_write_string>
				main_menu_selection = '\0';
     898:	7c c2       	rjmp	.+1272   	; 0xd92 <nokia_lcd_render>
     89a:	08 95       	ret
				temp_menu_selection = '\0';
     89c:	84 33       	cpi	r24, 0x34	; 52
     89e:	09 f0       	breq	.+2      	; 0x8a2 <MainMenu_Tick+0x278>
				settings_menu_selection = '\0';
     8a0:	f0 c0       	rjmp	.+480    	; 0xa82 <MainMenu_Tick+0x458>
     8a2:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				drink_menu_selection = '\0';
     8a6:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				user_menu_selection = '\0';
     8aa:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				main_menu_display();
     8ae:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
			}
			
			break;
			
		case drink_options:
			if(drink_menu_selection == '1'){
     8b2:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
     8b6:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
				mainmenu_state = add_drink;
     8ba:	d0 cd       	rjmp	.-1120   	; 0x45c <main_menu_display>
     8bc:	08 95       	ret
				nokia_lcd_clear();
     8be:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <drink_menu_selection>
				nokia_lcd_write_string("*Add Drink*",1);
     8c2:	81 33       	cpi	r24, 0x31	; 49
     8c4:	89 f4       	brne	.+34     	; 0x8e8 <MainMenu_Tick+0x2be>
     8c6:	85 e0       	ldi	r24, 0x05	; 5
     8c8:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
				nokia_lcd_set_cursor(2,10);
     8cc:	65 d1       	rcall	.+714    	; 0xb98 <nokia_lcd_clear>
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	84 ec       	ldi	r24, 0xC4	; 196
     8d2:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_write_string("# to return",1);
     8d4:	47 d2       	rcall	.+1166   	; 0xd64 <nokia_lcd_write_string>
     8d6:	6a e0       	ldi	r22, 0x0A	; 10
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	56 d2       	rcall	.+1196   	; 0xd88 <nokia_lcd_set_cursor>
				nokia_lcd_render();
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	8d e9       	ldi	r24, 0x9D	; 157
     8e0:	91 e0       	ldi	r25, 0x01	; 1
			}
			
			else if(drink_menu_selection == '2'){
     8e2:	40 d2       	rcall	.+1152   	; 0xd64 <nokia_lcd_write_string>
     8e4:	56 c2       	rjmp	.+1196   	; 0xd92 <nokia_lcd_render>
     8e6:	08 95       	ret
				mainmenu_state = replace_drink;
     8e8:	82 33       	cpi	r24, 0x32	; 50
     8ea:	09 f0       	breq	.+2      	; 0x8ee <MainMenu_Tick+0x2c4>
				nokia_lcd_clear();
     8ec:	ca c0       	rjmp	.+404    	; 0xa82 <MainMenu_Tick+0x458>
				nokia_lcd_write_string("*Replce Drnk*",1);
     8ee:	86 e0       	ldi	r24, 0x06	; 6
     8f0:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
     8f4:	51 d1       	rcall	.+674    	; 0xb98 <nokia_lcd_clear>
				nokia_lcd_set_cursor(2,10);
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	80 ed       	ldi	r24, 0xD0	; 208
				nokia_lcd_write_string("# to return",1);
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	33 d2       	rcall	.+1126   	; 0xd64 <nokia_lcd_write_string>
     8fe:	6a e0       	ldi	r22, 0x0A	; 10
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	42 d2       	rcall	.+1156   	; 0xd88 <nokia_lcd_set_cursor>
				nokia_lcd_render();
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	8d e9       	ldi	r24, 0x9D	; 157
			}
			
			break;
			
		case add_drink:
			if(temp_menu_selection == '#'){
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	2c d2       	rcall	.+1112   	; 0xd64 <nokia_lcd_write_string>
     90c:	42 c2       	rjmp	.+1156   	; 0xd92 <nokia_lcd_render>
     90e:	08 95       	ret
				mainmenu_state = MainMenu;
     910:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
				main_menu_selection = '\0';
     914:	83 32       	cpi	r24, 0x23	; 35
				temp_menu_selection = '\0';
     916:	09 f0       	breq	.+2      	; 0x91a <MainMenu_Tick+0x2f0>
				settings_menu_selection = '\0';
     918:	b4 c0       	rjmp	.+360    	; 0xa82 <MainMenu_Tick+0x458>
     91a:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				drink_menu_selection = '\0';
     91e:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				user_menu_selection = '\0';
     922:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				main_menu_display();
     926:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
			}
			
			break;
			
		case replace_drink:
			if(temp_menu_selection == '#'){
     92a:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
     92e:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
				mainmenu_state = MainMenu;
     932:	94 cd       	rjmp	.-1240   	; 0x45c <main_menu_display>
				main_menu_selection = '\0';
     934:	08 95       	ret
				temp_menu_selection = '\0';
     936:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
				settings_menu_selection = '\0';
     93a:	83 32       	cpi	r24, 0x23	; 35
				drink_menu_selection = '\0';
     93c:	09 f0       	breq	.+2      	; 0x940 <MainMenu_Tick+0x316>
     93e:	a1 c0       	rjmp	.+322    	; 0xa82 <MainMenu_Tick+0x458>
				user_menu_selection = '\0';
     940:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				main_menu_display();
     944:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
     948:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
			}
			
			break;
			
		case user_options:
			if(user_menu_selection == '1'){
     94c:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
     950:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
				mainmenu_state = add_user;
     954:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
				nokia_lcd_clear();
     958:	81 cd       	rjmp	.-1278   	; 0x45c <main_menu_display>
				nokia_lcd_write_string("*Add User*",1);
     95a:	08 95       	ret
     95c:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <user_menu_selection>
     960:	81 33       	cpi	r24, 0x31	; 49
     962:	89 f4       	brne	.+34     	; 0x986 <MainMenu_Tick+0x35c>
				nokia_lcd_set_cursor(2,10);
     964:	88 e0       	ldi	r24, 0x08	; 8
     966:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
     96a:	16 d1       	rcall	.+556    	; 0xb98 <nokia_lcd_clear>
				nokia_lcd_write_string("# to return",1);
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	8e ed       	ldi	r24, 0xDE	; 222
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	f8 d1       	rcall	.+1008   	; 0xd64 <nokia_lcd_write_string>
     974:	6a e0       	ldi	r22, 0x0A	; 10
				nokia_lcd_render();
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	07 d2       	rcall	.+1038   	; 0xd88 <nokia_lcd_set_cursor>
     97a:	61 e0       	ldi	r22, 0x01	; 1
			}
			
			else if(user_menu_selection == '2'){
     97c:	8d e9       	ldi	r24, 0x9D	; 157
				mainmenu_state = remove_user;
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	f1 d1       	rcall	.+994    	; 0xd64 <nokia_lcd_write_string>
     982:	07 c2       	rjmp	.+1038   	; 0xd92 <nokia_lcd_render>
				nokia_lcd_clear();
     984:	08 95       	ret
     986:	82 33       	cpi	r24, 0x32	; 50
				nokia_lcd_write_string("*Remove Usr*",1);
     988:	89 f4       	brne	.+34     	; 0x9ac <MainMenu_Tick+0x382>
     98a:	89 e0       	ldi	r24, 0x09	; 9
     98c:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
     990:	03 d1       	rcall	.+518    	; 0xb98 <nokia_lcd_clear>
				nokia_lcd_set_cursor(2,10);
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	89 ee       	ldi	r24, 0xE9	; 233
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	e5 d1       	rcall	.+970    	; 0xd64 <nokia_lcd_write_string>
				nokia_lcd_write_string("# to return",1);
     99a:	6a e0       	ldi	r22, 0x0A	; 10
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	f4 d1       	rcall	.+1000   	; 0xd88 <nokia_lcd_set_cursor>
     9a0:	61 e0       	ldi	r22, 0x01	; 1
				nokia_lcd_render();
     9a2:	8d e9       	ldi	r24, 0x9D	; 157
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	de d1       	rcall	.+956    	; 0xd64 <nokia_lcd_write_string>
			}
			
			else if(user_menu_selection == '3'){
     9a8:	f4 c1       	rjmp	.+1000   	; 0xd92 <nokia_lcd_render>
     9aa:	08 95       	ret
     9ac:	83 33       	cpi	r24, 0x33	; 51
				mainmenu_state = reset_password;
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <MainMenu_Tick+0x388>
     9b0:	68 c0       	rjmp	.+208    	; 0xa82 <MainMenu_Tick+0x458>
     9b2:	8a e0       	ldi	r24, 0x0A	; 10
				nokia_lcd_clear();
     9b4:	80 93 4d 0a 	sts	0x0A4D, r24	; 0x800a4d <mainmenu_state>
				nokia_lcd_write_string("*Rst Pass*",1);
     9b8:	ef d0       	rcall	.+478    	; 0xb98 <nokia_lcd_clear>
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	86 ef       	ldi	r24, 0xF6	; 246
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	d1 d1       	rcall	.+930    	; 0xd64 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(2,10);
     9c2:	6a e0       	ldi	r22, 0x0A	; 10
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	e0 d1       	rcall	.+960    	; 0xd88 <nokia_lcd_set_cursor>
				nokia_lcd_write_string("# to return",1);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	8d e9       	ldi	r24, 0x9D	; 157
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	ca d1       	rcall	.+916    	; 0xd64 <nokia_lcd_write_string>
     9d0:	e0 c1       	rjmp	.+960    	; 0xd92 <nokia_lcd_render>
				nokia_lcd_render();
     9d2:	08 95       	ret
     9d4:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
			}
			
			break;
			
		case add_user:
			if(temp_menu_selection == '#'){
     9d8:	83 32       	cpi	r24, 0x23	; 35
     9da:	09 f0       	breq	.+2      	; 0x9de <MainMenu_Tick+0x3b4>
     9dc:	52 c0       	rjmp	.+164    	; 0xa82 <MainMenu_Tick+0x458>
     9de:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				mainmenu_state = MainMenu;
     9e2:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				main_menu_selection = '\0';
     9e6:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				temp_menu_selection = '\0';
     9ea:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
				settings_menu_selection = '\0';
     9ee:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
				drink_menu_selection = '\0';
     9f2:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
				user_menu_selection = '\0';
     9f6:	32 cd       	rjmp	.-1436   	; 0x45c <main_menu_display>
				main_menu_display();
     9f8:	08 95       	ret
     9fa:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
			}
			
			break;
			
		case remove_user:
			if(temp_menu_selection == '#'){
     9fe:	83 32       	cpi	r24, 0x23	; 35
     a00:	09 f0       	breq	.+2      	; 0xa04 <MainMenu_Tick+0x3da>
     a02:	3f c0       	rjmp	.+126    	; 0xa82 <MainMenu_Tick+0x458>
     a04:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				mainmenu_state = MainMenu;
     a08:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				main_menu_selection = '\0';
     a0c:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				temp_menu_selection = '\0';
     a10:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
				settings_menu_selection = '\0';
     a14:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
				drink_menu_selection = '\0';
     a18:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
				user_menu_selection = '\0';
     a1c:	1f cd       	rjmp	.-1474   	; 0x45c <main_menu_display>
     a1e:	08 95       	ret
				main_menu_display();
     a20:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
     a24:	83 32       	cpi	r24, 0x23	; 35
			}
			
			break;
			
		case reset_password:
			if(temp_menu_selection == '#'){
     a26:	69 f5       	brne	.+90     	; 0xa82 <MainMenu_Tick+0x458>
     a28:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
     a2c:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				mainmenu_state = MainMenu;
     a30:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				main_menu_selection = '\0';
     a34:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
				temp_menu_selection = '\0';
     a38:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
				settings_menu_selection = '\0';
     a3c:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
				drink_menu_selection = '\0';
     a40:	0d cd       	rjmp	.-1510   	; 0x45c <main_menu_display>
				user_menu_selection = '\0';
     a42:	08 95       	ret
     a44:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <temp_menu_selection>
				main_menu_display();
     a48:	83 32       	cpi	r24, 0x23	; 35
     a4a:	d9 f4       	brne	.+54     	; 0xa82 <MainMenu_Tick+0x458>
			}
			
			break;
			
		case system_options:
			if(temp_menu_selection == '#'){
     a4c:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
     a50:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
				mainmenu_state = MainMenu;
     a54:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
				main_menu_selection = '\0';
     a58:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
				temp_menu_selection = '\0';
     a5c:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
				settings_menu_selection = '\0';
     a60:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
				drink_menu_selection = '\0';
     a64:	fb cc       	rjmp	.-1546   	; 0x45c <main_menu_display>
     a66:	08 95       	ret
				user_menu_selection = '\0';
     a68:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <mainmenu_state>
				main_menu_display();
     a6c:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <main_menu_selection>
     a70:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <temp_menu_selection>
			}

			break;
		
		default:
			mainmenu_state = MainMenu;
     a74:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <settings_menu_selection>
			main_menu_selection = '\0';
     a78:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <drink_menu_selection>
			temp_menu_selection = '\0';
     a7c:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <user_menu_selection>
			settings_menu_selection = '\0';
     a80:	ed cc       	rjmp	.-1574   	; 0x45c <main_menu_display>
			drink_menu_selection = '\0';
     a82:	08 95       	ret

00000a84 <MainMenuTask>:
     a84:	ce dd       	rcall	.-1124   	; 0x622 <MainMenu_Init>
			user_menu_selection = '\0';
     a86:	d1 dd       	rcall	.-1118   	; 0x62a <MainMenu_Tick>
     a88:	8a e0       	ldi	r24, 0x0A	; 10
			main_menu_display();
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	91 d5       	rcall	.+2850   	; 0x15b0 <vTaskDelay>
     a8e:	fb cf       	rjmp	.-10     	; 0xa86 <MainMenuTask+0x2>

00000a90 <MainMenuPulse>:
{
	MainMenu_Init();
    for(;;) 
    { 	
		MainMenu_Tick();
		vTaskDelay(10); 
     a90:	af 92       	push	r10
   } 
}

void MainMenuPulse(unsigned portBASE_TYPE Priority)
{
     a92:	bf 92       	push	r11
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
	xTaskCreate(MainMenuTask, (signed portCHAR *)"MainMenuTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     a9e:	a1 2c       	mov	r10, r1
     aa0:	b1 2c       	mov	r11, r1
     aa2:	c1 2c       	mov	r12, r1
     aa4:	d1 2c       	mov	r13, r1
     aa6:	e1 2c       	mov	r14, r1
     aa8:	f1 2c       	mov	r15, r1
     aaa:	08 2f       	mov	r16, r24
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	45 e5       	ldi	r20, 0x55	; 85
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	82 e4       	ldi	r24, 0x42	; 66
     aba:	95 e0       	ldi	r25, 0x05	; 5
     abc:	0f d3       	rcall	.+1566   	; 0x10dc <xTaskGenericCreate>
}
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	08 95       	ret

00000ace <main>:
	/*
	when scaling by 1: 14 chars per line, 8 pixels in height
	when scaling by 2: 8 chars per line, 14 pixels in height
	when scaling by 3: 5 chars per line, 21 pixels in height
	*/
	DDRC = 0x0F;	//Set PC7...PC3 to input, PC2...PC0 to output [0000 1111]
     ace:	8f e0       	ldi	r24, 0x0F	; 15
     ad0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xF0;	//Init port C to 1s							[1111 0000]
     ad2:	80 ef       	ldi	r24, 0xF0	; 240
     ad4:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;	//Set Port D to output
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;	//Init Port D to 0s
     ada:	1b b8       	out	0x0b, r1	; 11
	nokia_lcd_init();
     adc:	27 d0       	rcall	.+78     	; 0xb2c <nokia_lcd_init>

	
    //Start Tasks  
    MainMenuPulse(1);
     ade:	81 e0       	ldi	r24, 0x01	; 1
    //RunSchedular 
    vTaskStartScheduler(); 
     ae0:	d7 df       	rcall	.-82     	; 0xa90 <MainMenuPulse>
     ae2:	ef d3       	rcall	.+2014   	; 0x12c2 <vTaskStartScheduler>
	return 0; 
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	08 95       	ret

00000aea <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     aea:	59 98       	cbi	0x0b, 1	; 11
     aec:	66 23       	and	r22, r22
     aee:	11 f0       	breq	.+4      	; 0xaf4 <write+0xa>
     af0:	5b 9a       	sbi	0x0b, 3	; 11
     af2:	15 c0       	rjmp	.+42     	; 0xb1e <write+0x34>
     af4:	5b 98       	cbi	0x0b, 3	; 11
     af6:	13 c0       	rjmp	.+38     	; 0xb1e <write+0x34>
     af8:	ac 01       	movw	r20, r24
     afa:	02 2e       	mov	r0, r18
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <write+0x18>
     afe:	55 95       	asr	r21
     b00:	47 95       	ror	r20
     b02:	0a 94       	dec	r0
     b04:	e2 f7       	brpl	.-8      	; 0xafe <write+0x14>
     b06:	40 ff       	sbrs	r20, 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <write+0x24>
     b0a:	5c 9a       	sbi	0x0b, 4	; 11
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <write+0x26>
     b0e:	5c 98       	cbi	0x0b, 4	; 11
     b10:	5d 9a       	sbi	0x0b, 5	; 11
     b12:	5d 98       	cbi	0x0b, 5	; 11
     b14:	21 50       	subi	r18, 0x01	; 1
     b16:	31 09       	sbc	r19, r1
     b18:	78 f7       	brcc	.-34     	; 0xaf8 <write+0xe>
     b1a:	59 9a       	sbi	0x0b, 1	; 11
     b1c:	08 95       	ret
     b1e:	27 e0       	ldi	r18, 0x07	; 7
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	e9 cf       	rjmp	.-46     	; 0xaf8 <write+0xe>

00000b26 <write_cmd>:
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	e0 cf       	rjmp	.-64     	; 0xaea <write>
     b2a:	08 95       	ret

00000b2c <nokia_lcd_init>:
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	51 9a       	sbi	0x0a, 1	; 10
     b32:	52 9a       	sbi	0x0a, 2	; 10
     b34:	53 9a       	sbi	0x0a, 3	; 10
     b36:	54 9a       	sbi	0x0a, 4	; 10
     b38:	55 9a       	sbi	0x0a, 5	; 10
     b3a:	5a 9a       	sbi	0x0b, 2	; 11
     b3c:	59 9a       	sbi	0x0b, 1	; 11
     b3e:	83 ec       	ldi	r24, 0xC3	; 195
     b40:	99 e0       	ldi	r25, 0x09	; 9
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <nokia_lcd_init+0x16>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <nokia_lcd_init+0x1c>
     b48:	00 00       	nop
     b4a:	5a 98       	cbi	0x0b, 2	; 11
     b4c:	8b e5       	ldi	r24, 0x5B	; 91
     b4e:	94 e4       	ldi	r25, 0x44	; 68
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <nokia_lcd_init+0x24>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <nokia_lcd_init+0x2a>
     b56:	00 00       	nop
     b58:	5a 9a       	sbi	0x0b, 2	; 11
     b5a:	59 98       	cbi	0x0b, 1	; 11
     b5c:	81 e2       	ldi	r24, 0x21	; 33
     b5e:	e3 df       	rcall	.-58     	; 0xb26 <write_cmd>
     b60:	83 e1       	ldi	r24, 0x13	; 19
     b62:	e1 df       	rcall	.-62     	; 0xb26 <write_cmd>
     b64:	86 e0       	ldi	r24, 0x06	; 6
     b66:	df df       	rcall	.-66     	; 0xb26 <write_cmd>
     b68:	82 ec       	ldi	r24, 0xC2	; 194
     b6a:	dd df       	rcall	.-70     	; 0xb26 <write_cmd>
     b6c:	80 e2       	ldi	r24, 0x20	; 32
     b6e:	db df       	rcall	.-74     	; 0xb26 <write_cmd>
     b70:	89 e0       	ldi	r24, 0x09	; 9
     b72:	d9 df       	rcall	.-78     	; 0xb26 <write_cmd>
     b74:	80 e8       	ldi	r24, 0x80	; 128
     b76:	d7 df       	rcall	.-82     	; 0xb26 <write_cmd>
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	d5 df       	rcall	.-86     	; 0xb26 <write_cmd>
     b7c:	c8 ef       	ldi	r28, 0xF8	; 248
     b7e:	d1 e0       	ldi	r29, 0x01	; 1
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	b2 df       	rcall	.-156    	; 0xaea <write>
     b86:	21 97       	sbiw	r28, 0x01	; 1
     b88:	d9 f7       	brne	.-10     	; 0xb80 <nokia_lcd_init+0x54>
     b8a:	88 e0       	ldi	r24, 0x08	; 8
     b8c:	cc df       	rcall	.-104    	; 0xb26 <write_cmd>
     b8e:	8c e0       	ldi	r24, 0x0C	; 12
     b90:	ca df       	rcall	.-108    	; 0xb26 <write_cmd>
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <nokia_lcd_clear>:
     b98:	80 e8       	ldi	r24, 0x80	; 128
     b9a:	c5 df       	rcall	.-118    	; 0xb26 <write_cmd>
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	c3 df       	rcall	.-122    	; 0xb26 <write_cmd>
     ba0:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <nokia_lcd+0x1f8>
     ba4:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <nokia_lcd+0x1f9>
     ba8:	e7 ef       	ldi	r30, 0xF7	; 247
     baa:	f7 e0       	ldi	r31, 0x07	; 7
     bac:	8f ee       	ldi	r24, 0xEF	; 239
     bae:	99 e0       	ldi	r25, 0x09	; 9
     bb0:	11 92       	st	Z+, r1
     bb2:	e8 17       	cp	r30, r24
     bb4:	f9 07       	cpc	r31, r25
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <nokia_lcd_clear+0x18>
     bb8:	08 95       	ret

00000bba <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     bba:	26 2f       	mov	r18, r22
     bbc:	26 95       	lsr	r18
     bbe:	26 95       	lsr	r18
     bc0:	26 95       	lsr	r18
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	34 e5       	ldi	r19, 0x54	; 84
     bc6:	23 9f       	mul	r18, r19
     bc8:	80 0d       	add	r24, r0
     bca:	91 1d       	adc	r25, r1
     bcc:	11 24       	eor	r1, r1
	if (value)
     bce:	44 23       	and	r20, r20
     bd0:	79 f0       	breq	.+30     	; 0xbf0 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     bd2:	fc 01       	movw	r30, r24
     bd4:	e9 50       	subi	r30, 0x09	; 9
     bd6:	f8 4f       	sbci	r31, 0xF8	; 248
     bd8:	67 70       	andi	r22, 0x07	; 7
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <nokia_lcd_set_pixel+0x2a>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	6a 95       	dec	r22
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <nokia_lcd_set_pixel+0x26>
     be8:	90 81       	ld	r25, Z
     bea:	89 2b       	or	r24, r25
     bec:	80 83       	st	Z, r24
     bee:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     bf0:	fc 01       	movw	r30, r24
     bf2:	e9 50       	subi	r30, 0x09	; 9
     bf4:	f8 4f       	sbci	r31, 0xF8	; 248
     bf6:	67 70       	andi	r22, 0x07	; 7
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <nokia_lcd_set_pixel+0x48>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	6a 95       	dec	r22
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <nokia_lcd_set_pixel+0x44>
     c06:	80 95       	com	r24
     c08:	90 81       	ld	r25, Z
     c0a:	89 23       	and	r24, r25
     c0c:	80 83       	st	Z, r24
     c0e:	08 95       	ret

00000c10 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     c10:	5f 92       	push	r5
     c12:	6f 92       	push	r6
     c14:	7f 92       	push	r7
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     c30:	26 2f       	mov	r18, r22
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	49 01       	movw	r8, r18
     c36:	88 0c       	add	r8, r8
     c38:	99 1c       	adc	r9, r9
     c3a:	88 0c       	add	r8, r8
     c3c:	99 1c       	adc	r9, r9
     c3e:	82 0e       	add	r8, r18
     c40:	93 1e       	adc	r9, r19
     c42:	18 14       	cp	r1, r8
     c44:	19 04       	cpc	r1, r9
     c46:	0c f0       	brlt	.+2      	; 0xc4a <nokia_lcd_write_char+0x3a>
     c48:	59 c0       	rjmp	.+178    	; 0xcfc <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
     c4a:	89 01       	movw	r16, r18
     c4c:	00 0f       	add	r16, r16
     c4e:	11 1f       	adc	r17, r17
     c50:	00 0f       	add	r16, r16
     c52:	11 1f       	adc	r17, r17
     c54:	00 0f       	add	r16, r16
     c56:	11 1f       	adc	r17, r17
     c58:	02 1b       	sub	r16, r18
     c5a:	13 0b       	sbc	r17, r19
     c5c:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     c5e:	a8 2e       	mov	r10, r24
     c60:	b1 2c       	mov	r11, r1
     c62:	c5 01       	movw	r24, r10
     c64:	80 97       	sbiw	r24, 0x20	; 32
     c66:	5c 01       	movw	r10, r24
     c68:	aa 0c       	add	r10, r10
     c6a:	bb 1c       	adc	r11, r11
     c6c:	aa 0c       	add	r10, r10
     c6e:	bb 1c       	adc	r11, r11
     c70:	a8 0e       	add	r10, r24
     c72:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     c74:	0f 2e       	mov	r0, r31
     c76:	f0 ef       	ldi	r31, 0xF0	; 240
     c78:	cf 2e       	mov	r12, r31
     c7a:	f9 e0       	ldi	r31, 0x09	; 9
     c7c:	df 2e       	mov	r13, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	0f 2e       	mov	r0, r31
     c82:	ff ee       	ldi	r31, 0xEF	; 239
     c84:	ef 2e       	mov	r14, r31
     c86:	f9 e0       	ldi	r31, 0x09	; 9
     c88:	ff 2e       	mov	r15, r31
     c8a:	f0 2d       	mov	r31, r0
     c8c:	2a c0       	rjmp	.+84     	; 0xce2 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     c8e:	fe 01       	movw	r30, r28
     c90:	24 91       	lpm	r18, Z
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	87 2d       	mov	r24, r7
     c96:	65 2d       	mov	r22, r5
     c98:	4c d5       	rcall	.+2712   	; 0x1732 <__udivmodqi4>
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <nokia_lcd_write_char+0x90>
     c9c:	35 95       	asr	r19
     c9e:	27 95       	ror	r18
     ca0:	8a 95       	dec	r24
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <nokia_lcd_write_char+0x8c>
     ca4:	20 ff       	sbrs	r18, 0
     ca6:	09 c0       	rjmp	.+18     	; 0xcba <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     ca8:	f6 01       	movw	r30, r12
     caa:	60 81       	ld	r22, Z
     cac:	67 0d       	add	r22, r7
     cae:	f7 01       	movw	r30, r14
     cb0:	80 81       	ld	r24, Z
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	86 0d       	add	r24, r6
     cb6:	81 df       	rcall	.-254    	; 0xbba <nokia_lcd_set_pixel>
     cb8:	08 c0       	rjmp	.+16     	; 0xcca <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     cba:	f6 01       	movw	r30, r12
     cbc:	60 81       	ld	r22, Z
     cbe:	67 0d       	add	r22, r7
     cc0:	f7 01       	movw	r30, r14
     cc2:	80 81       	ld	r24, Z
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	86 0d       	add	r24, r6
     cc8:	78 df       	rcall	.-272    	; 0xbba <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     cca:	73 94       	inc	r7
     ccc:	87 2d       	mov	r24, r7
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	80 17       	cp	r24, r16
     cd2:	91 07       	cpc	r25, r17
     cd4:	e4 f2       	brlt	.-72     	; 0xc8e <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     cd6:	63 94       	inc	r6
     cd8:	86 2d       	mov	r24, r6
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	88 15       	cp	r24, r8
     cde:	99 05       	cpc	r25, r9
     ce0:	6c f4       	brge	.+26     	; 0xcfc <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
     ce2:	10 16       	cp	r1, r16
     ce4:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     ce6:	bc f7       	brge	.-18     	; 0xcd6 <nokia_lcd_write_char+0xc6>
     ce8:	86 2d       	mov	r24, r6
     cea:	65 2d       	mov	r22, r5
     cec:	22 d5       	rcall	.+2628   	; 0x1732 <__udivmodqi4>
     cee:	e5 01       	movw	r28, r10
     cf0:	c8 0f       	add	r28, r24
     cf2:	d1 1d       	adc	r29, r1
     cf4:	c4 54       	subi	r28, 0x44	; 68
     cf6:	df 4f       	sbci	r29, 0xFF	; 255
     cf8:	71 2c       	mov	r7, r1
     cfa:	c9 cf       	rjmp	.-110    	; 0xc8e <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     cfc:	80 91 ef 09 	lds	r24, 0x09EF	; 0x8009ef <nokia_lcd+0x1f8>
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	98 0f       	add	r25, r24
     d04:	85 2d       	mov	r24, r5
     d06:	88 0f       	add	r24, r24
     d08:	88 0f       	add	r24, r24
     d0a:	85 0d       	add	r24, r5
     d0c:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
     d0e:	84 35       	cpi	r24, 0x54	; 84
     d10:	18 f4       	brcc	.+6      	; 0xd18 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     d12:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <nokia_lcd+0x1f8>
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
     d18:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     d1c:	e0 ef       	ldi	r30, 0xF0	; 240
     d1e:	f9 e0       	ldi	r31, 0x09	; 9
     d20:	80 81       	ld	r24, Z
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	98 0f       	add	r25, r24
     d26:	85 2d       	mov	r24, r5
     d28:	88 0f       	add	r24, r24
     d2a:	88 0f       	add	r24, r24
     d2c:	88 0f       	add	r24, r24
     d2e:	85 19       	sub	r24, r5
     d30:	89 0f       	add	r24, r25
     d32:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
     d34:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <nokia_lcd+0x1f9>
     d38:	80 33       	cpi	r24, 0x30	; 48
     d3a:	20 f0       	brcs	.+8      	; 0xd44 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
     d3c:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
     d40:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <nokia_lcd+0x1f9>
	}
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	bf 90       	pop	r11
     d56:	af 90       	pop	r10
     d58:	9f 90       	pop	r9
     d5a:	8f 90       	pop	r8
     d5c:	7f 90       	pop	r7
     d5e:	6f 90       	pop	r6
     d60:	5f 90       	pop	r5
     d62:	08 95       	ret

00000d64 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
	while(*str)
     d6c:	88 81       	ld	r24, Y
     d6e:	88 23       	and	r24, r24
     d70:	39 f0       	breq	.+14     	; 0xd80 <nokia_lcd_write_string+0x1c>
     d72:	16 2f       	mov	r17, r22
     d74:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
     d76:	61 2f       	mov	r22, r17
     d78:	4b df       	rcall	.-362    	; 0xc10 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
     d7a:	89 91       	ld	r24, Y+
     d7c:	81 11       	cpse	r24, r1
     d7e:	fb cf       	rjmp	.-10     	; 0xd76 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	08 95       	ret

00000d88 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
     d88:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
     d8c:	60 93 f0 09 	sts	0x09F0, r22	; 0x8009f0 <nokia_lcd+0x1f9>
     d90:	08 95       	ret

00000d92 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	c4 de       	rcall	.-632    	; 0xb26 <write_cmd>
	write_cmd(0x40);
     d9e:	80 e4       	ldi	r24, 0x40	; 64
     da0:	c2 de       	rcall	.-636    	; 0xb26 <write_cmd>
     da2:	c7 ef       	ldi	r28, 0xF7	; 247
     da4:	d7 e0       	ldi	r29, 0x07	; 7
     da6:	0f ee       	ldi	r16, 0xEF	; 239
     da8:	19 e0       	ldi	r17, 0x09	; 9
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	89 91       	ld	r24, Y+
     dae:	9d de       	rcall	.-710    	; 0xaea <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     db0:	c0 17       	cp	r28, r16
     db2:	d1 07       	cpc	r29, r17
     db4:	d1 f7       	brne	.-12     	; 0xdaa <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	08 95       	ret

00000dc0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     dc0:	31 e1       	ldi	r19, 0x11	; 17
     dc2:	fc 01       	movw	r30, r24
     dc4:	30 83       	st	Z, r19
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	22 e2       	ldi	r18, 0x22	; 34
     dca:	20 83       	st	Z, r18
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	a3 e3       	ldi	r26, 0x33	; 51
     dd0:	a0 83       	st	Z, r26
     dd2:	31 97       	sbiw	r30, 0x01	; 1
     dd4:	60 83       	st	Z, r22
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	70 83       	st	Z, r23
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	10 82       	st	Z, r1
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	60 e8       	ldi	r22, 0x80	; 128
     de2:	60 83       	st	Z, r22
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	10 82       	st	Z, r1
     de8:	31 97       	sbiw	r30, 0x01	; 1
     dea:	62 e0       	ldi	r22, 0x02	; 2
     dec:	60 83       	st	Z, r22
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	63 e0       	ldi	r22, 0x03	; 3
     df2:	60 83       	st	Z, r22
     df4:	31 97       	sbiw	r30, 0x01	; 1
     df6:	64 e0       	ldi	r22, 0x04	; 4
     df8:	60 83       	st	Z, r22
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	65 e0       	ldi	r22, 0x05	; 5
     dfe:	60 83       	st	Z, r22
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	66 e0       	ldi	r22, 0x06	; 6
     e04:	60 83       	st	Z, r22
     e06:	31 97       	sbiw	r30, 0x01	; 1
     e08:	67 e0       	ldi	r22, 0x07	; 7
     e0a:	60 83       	st	Z, r22
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	68 e0       	ldi	r22, 0x08	; 8
     e10:	60 83       	st	Z, r22
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	69 e0       	ldi	r22, 0x09	; 9
     e16:	60 83       	st	Z, r22
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	60 e1       	ldi	r22, 0x10	; 16
     e1c:	60 83       	st	Z, r22
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	30 83       	st	Z, r19
     e22:	31 97       	sbiw	r30, 0x01	; 1
     e24:	32 e1       	ldi	r19, 0x12	; 18
     e26:	30 83       	st	Z, r19
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	33 e1       	ldi	r19, 0x13	; 19
     e2c:	30 83       	st	Z, r19
     e2e:	31 97       	sbiw	r30, 0x01	; 1
     e30:	34 e1       	ldi	r19, 0x14	; 20
     e32:	30 83       	st	Z, r19
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	35 e1       	ldi	r19, 0x15	; 21
     e38:	30 83       	st	Z, r19
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	36 e1       	ldi	r19, 0x16	; 22
     e3e:	30 83       	st	Z, r19
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	37 e1       	ldi	r19, 0x17	; 23
     e44:	30 83       	st	Z, r19
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	38 e1       	ldi	r19, 0x18	; 24
     e4a:	30 83       	st	Z, r19
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	39 e1       	ldi	r19, 0x19	; 25
     e50:	30 83       	st	Z, r19
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	30 e2       	ldi	r19, 0x20	; 32
     e56:	30 83       	st	Z, r19
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	31 e2       	ldi	r19, 0x21	; 33
     e5c:	30 83       	st	Z, r19
     e5e:	31 97       	sbiw	r30, 0x01	; 1
     e60:	20 83       	st	Z, r18
     e62:	31 97       	sbiw	r30, 0x01	; 1
     e64:	23 e2       	ldi	r18, 0x23	; 35
     e66:	20 83       	st	Z, r18
     e68:	31 97       	sbiw	r30, 0x01	; 1
     e6a:	40 83       	st	Z, r20
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	50 83       	st	Z, r21
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	26 e2       	ldi	r18, 0x26	; 38
     e74:	20 83       	st	Z, r18
     e76:	31 97       	sbiw	r30, 0x01	; 1
     e78:	27 e2       	ldi	r18, 0x27	; 39
     e7a:	20 83       	st	Z, r18
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	28 e2       	ldi	r18, 0x28	; 40
     e80:	20 83       	st	Z, r18
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	29 e2       	ldi	r18, 0x29	; 41
     e86:	20 83       	st	Z, r18
     e88:	31 97       	sbiw	r30, 0x01	; 1
     e8a:	20 e3       	ldi	r18, 0x30	; 48
     e8c:	20 83       	st	Z, r18
     e8e:	31 97       	sbiw	r30, 0x01	; 1
     e90:	21 e3       	ldi	r18, 0x31	; 49
     e92:	20 83       	st	Z, r18
     e94:	86 97       	sbiw	r24, 0x26	; 38
     e96:	08 95       	ret

00000e98 <xPortStartScheduler>:
     e98:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e9c:	8c e7       	ldi	r24, 0x7C	; 124
     e9e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ea8:	ef e6       	ldi	r30, 0x6F	; 111
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	82 60       	ori	r24, 0x02	; 2
     eb0:	80 83       	st	Z, r24
     eb2:	a0 91 49 0a 	lds	r26, 0x0A49	; 0x800a49 <pxCurrentTCB>
     eb6:	b0 91 4a 0a 	lds	r27, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
     eba:	cd 91       	ld	r28, X+
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	dd 91       	ld	r29, X+
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	6f 90       	pop	r6
     ef6:	5f 90       	pop	r5
     ef8:	4f 90       	pop	r4
     efa:	3f 90       	pop	r3
     efc:	2f 90       	pop	r2
     efe:	1f 90       	pop	r1
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	08 95       	ret
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	08 95       	ret

00000f0c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	0f 92       	push	r0
     f14:	1f 92       	push	r1
     f16:	11 24       	eor	r1, r1
     f18:	2f 92       	push	r2
     f1a:	3f 92       	push	r3
     f1c:	4f 92       	push	r4
     f1e:	5f 92       	push	r5
     f20:	6f 92       	push	r6
     f22:	7f 92       	push	r7
     f24:	8f 92       	push	r8
     f26:	9f 92       	push	r9
     f28:	af 92       	push	r10
     f2a:	bf 92       	push	r11
     f2c:	cf 92       	push	r12
     f2e:	df 92       	push	r13
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	a0 91 49 0a 	lds	r26, 0x0A49	; 0x800a49 <pxCurrentTCB>
     f58:	b0 91 4a 0a 	lds	r27, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
     f5c:	0d b6       	in	r0, 0x3d	; 61
     f5e:	0d 92       	st	X+, r0
     f60:	0e b6       	in	r0, 0x3e	; 62
     f62:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     f64:	7a d3       	rcall	.+1780   	; 0x165a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f66:	a0 91 49 0a 	lds	r26, 0x0A49	; 0x800a49 <pxCurrentTCB>
     f6a:	b0 91 4a 0a 	lds	r27, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
     f6e:	cd 91       	ld	r28, X+
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	dd 91       	ld	r29, X+
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	ff 91       	pop	r31
     f78:	ef 91       	pop	r30
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	9f 90       	pop	r9
     fa4:	8f 90       	pop	r8
     fa6:	7f 90       	pop	r7
     fa8:	6f 90       	pop	r6
     faa:	5f 90       	pop	r5
     fac:	4f 90       	pop	r4
     fae:	3f 90       	pop	r3
     fb0:	2f 90       	pop	r2
     fb2:	1f 90       	pop	r1
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     fba:	08 95       	ret

00000fbc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	0f 92       	push	r0
     fc4:	1f 92       	push	r1
     fc6:	11 24       	eor	r1, r1
     fc8:	2f 92       	push	r2
     fca:	3f 92       	push	r3
     fcc:	4f 92       	push	r4
     fce:	5f 92       	push	r5
     fd0:	6f 92       	push	r6
     fd2:	7f 92       	push	r7
     fd4:	8f 92       	push	r8
     fd6:	9f 92       	push	r9
     fd8:	af 92       	push	r10
     fda:	bf 92       	push	r11
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	a0 91 49 0a 	lds	r26, 0x0A49	; 0x800a49 <pxCurrentTCB>
    1008:	b0 91 4a 0a 	lds	r27, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    100c:	0d b6       	in	r0, 0x3d	; 61
    100e:	0d 92       	st	X+, r0
    1010:	0e b6       	in	r0, 0x3e	; 62
    1012:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1014:	85 d1       	rcall	.+778    	; 0x1320 <vTaskIncrementTick>
	vTaskSwitchContext();
    1016:	21 d3       	rcall	.+1602   	; 0x165a <vTaskSwitchContext>
    1018:	a0 91 49 0a 	lds	r26, 0x0A49	; 0x800a49 <pxCurrentTCB>
	portRESTORE_CONTEXT();
    101c:	b0 91 4a 0a 	lds	r27, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    1020:	cd 91       	ld	r28, X+
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	dd 91       	ld	r29, X+
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	ff 91       	pop	r31
    102a:	ef 91       	pop	r30
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	9f 90       	pop	r9
    1056:	8f 90       	pop	r8
    1058:	7f 90       	pop	r7
    105a:	6f 90       	pop	r6
    105c:	5f 90       	pop	r5
    105e:	4f 90       	pop	r4
    1060:	3f 90       	pop	r3
    1062:	2f 90       	pop	r2
    1064:	1f 90       	pop	r1
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	08 95       	ret

0000106e <__vector_13>:

	asm volatile ( "ret" );
    106e:	a6 df       	rcall	.-180    	; 0xfbc <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
    1070:	18 95       	reti

00001072 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    1078:	e0 91 49 0a 	lds	r30, 0x0A49	; 0x800a49 <pxCurrentTCB>
    107c:	f0 91 4a 0a 	lds	r31, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    1080:	93 83       	std	Z+3, r25	; 0x03
    1082:	82 83       	std	Z+2, r24	; 0x02
    1084:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <xTickCount>
    1088:	90 91 fa 09 	lds	r25, 0x09FA	; 0x8009fa <xTickCount+0x1>
    108c:	c8 17       	cp	r28, r24
    108e:	d9 07       	cpc	r29, r25
    1090:	60 f4       	brcc	.+24     	; 0x10aa <prvAddCurrentTaskToDelayedList+0x38>
    1092:	60 91 49 0a 	lds	r22, 0x0A49	; 0x800a49 <pxCurrentTCB>
    1096:	70 91 4a 0a 	lds	r23, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    109a:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <pxOverflowDelayedTaskList>
    109e:	90 91 10 0a 	lds	r25, 0x0A10	; 0x800a10 <pxOverflowDelayedTaskList+0x1>
    10a2:	6e 5f       	subi	r22, 0xFE	; 254
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	79 d9       	rcall	.-3342   	; 0x39a <vListInsert>
    10a8:	16 c0       	rjmp	.+44     	; 0x10d6 <prvAddCurrentTaskToDelayedList+0x64>
    10aa:	60 91 49 0a 	lds	r22, 0x0A49	; 0x800a49 <pxCurrentTCB>
    10ae:	70 91 4a 0a 	lds	r23, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    10b2:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    10b6:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    10ba:	6e 5f       	subi	r22, 0xFE	; 254
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	6d d9       	rcall	.-3366   	; 0x39a <vListInsert>
    10c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    10c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10c8:	c8 17       	cp	r28, r24
    10ca:	d9 07       	cpc	r29, r25
    10cc:	20 f4       	brcc	.+8      	; 0x10d6 <prvAddCurrentTaskToDelayedList+0x64>
    10ce:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
    10d2:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <xTaskGenericCreate>:
    10dc:	4f 92       	push	r4
    10de:	5f 92       	push	r5
    10e0:	6f 92       	push	r6
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	5c 01       	movw	r10, r24
    10fe:	4b 01       	movw	r8, r22
    1100:	3a 01       	movw	r6, r20
    1102:	29 01       	movw	r4, r18
    1104:	81 e2       	ldi	r24, 0x21	; 33
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	e8 d8       	rcall	.-3632   	; 0x2da <pvPortMalloc>
    110a:	ec 01       	movw	r28, r24
    110c:	89 2b       	or	r24, r25
    110e:	09 f4       	brne	.+2      	; 0x1112 <xTaskGenericCreate+0x36>
    1110:	c6 c0       	rjmp	.+396    	; 0x129e <xTaskGenericCreate+0x1c2>
    1112:	c1 14       	cp	r12, r1
    1114:	d1 04       	cpc	r13, r1
    1116:	09 f0       	breq	.+2      	; 0x111a <xTaskGenericCreate+0x3e>
    1118:	be c0       	rjmp	.+380    	; 0x1296 <xTaskGenericCreate+0x1ba>
    111a:	c3 01       	movw	r24, r6
    111c:	de d8       	rcall	.-3652   	; 0x2da <pvPortMalloc>
    111e:	98 8f       	std	Y+24, r25	; 0x18
    1120:	8f 8b       	std	Y+23, r24	; 0x17
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	19 f4       	brne	.+6      	; 0x112c <xTaskGenericCreate+0x50>
    1126:	ce 01       	movw	r24, r28
    1128:	fe d8       	rcall	.-3588   	; 0x326 <vPortFree>
    112a:	b9 c0       	rjmp	.+370    	; 0x129e <xTaskGenericCreate+0x1c2>
    112c:	a3 01       	movw	r20, r6
    112e:	65 ea       	ldi	r22, 0xA5	; 165
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	14 d3       	rcall	.+1576   	; 0x175c <memset>
    1134:	93 01       	movw	r18, r6
    1136:	21 50       	subi	r18, 0x01	; 1
    1138:	31 09       	sbc	r19, r1
    113a:	8f 89       	ldd	r24, Y+23	; 0x17
    113c:	98 8d       	ldd	r25, Y+24	; 0x18
    113e:	3c 01       	movw	r6, r24
    1140:	62 0e       	add	r6, r18
    1142:	73 1e       	adc	r7, r19
    1144:	48 e0       	ldi	r20, 0x08	; 8
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	b4 01       	movw	r22, r8
    114a:	ce 01       	movw	r24, r28
    114c:	49 96       	adiw	r24, 0x19	; 25
    114e:	0d d3       	rcall	.+1562   	; 0x176a <strncpy>
    1150:	18 a2       	std	Y+32, r1	; 0x20
    1152:	10 2f       	mov	r17, r16
    1154:	04 30       	cpi	r16, 0x04	; 4
    1156:	08 f0       	brcs	.+2      	; 0x115a <xTaskGenericCreate+0x7e>
    1158:	13 e0       	ldi	r17, 0x03	; 3
    115a:	1e 8b       	std	Y+22, r17	; 0x16
    115c:	6e 01       	movw	r12, r28
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	c8 0e       	add	r12, r24
    1162:	d1 1c       	adc	r13, r1
    1164:	c6 01       	movw	r24, r12
    1166:	ee d8       	rcall	.-3620   	; 0x344 <vListInitialiseItem>
    1168:	ce 01       	movw	r24, r28
    116a:	0c 96       	adiw	r24, 0x0c	; 12
    116c:	eb d8       	rcall	.-3626   	; 0x344 <vListInitialiseItem>
    116e:	d9 87       	std	Y+9, r29	; 0x09
    1170:	c8 87       	std	Y+8, r28	; 0x08
    1172:	84 e0       	ldi	r24, 0x04	; 4
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	81 1b       	sub	r24, r17
    1178:	91 09       	sbc	r25, r1
    117a:	9d 87       	std	Y+13, r25	; 0x0d
    117c:	8c 87       	std	Y+12, r24	; 0x0c
    117e:	db 8b       	std	Y+19, r29	; 0x13
    1180:	ca 8b       	std	Y+18, r28	; 0x12
    1182:	a2 01       	movw	r20, r4
    1184:	b5 01       	movw	r22, r10
    1186:	c3 01       	movw	r24, r6
    1188:	1b de       	rcall	.-970    	; 0xdc0 <pxPortInitialiseStack>
    118a:	99 83       	std	Y+1, r25	; 0x01
    118c:	88 83       	st	Y, r24
    118e:	e1 14       	cp	r14, r1
    1190:	f1 04       	cpc	r15, r1
    1192:	19 f0       	breq	.+6      	; 0x119a <xTaskGenericCreate+0xbe>
    1194:	f7 01       	movw	r30, r14
    1196:	d1 83       	std	Z+1, r29	; 0x01
    1198:	c0 83       	st	Z, r28
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	0f 92       	push	r0
    11a0:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <uxCurrentNumberOfTasks>
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <uxCurrentNumberOfTasks>
    11aa:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <pxCurrentTCB>
    11ae:	90 91 4a 0a 	lds	r25, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    11b2:	89 2b       	or	r24, r25
    11b4:	69 f5       	brne	.+90     	; 0x1210 <xTaskGenericCreate+0x134>
    11b6:	d0 93 4a 0a 	sts	0x0A4A, r29	; 0x800a4a <pxCurrentTCB+0x1>
    11ba:	c0 93 49 0a 	sts	0x0A49, r28	; 0x800a49 <pxCurrentTCB>
    11be:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <uxCurrentNumberOfTasks>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	a1 f5       	brne	.+104    	; 0x122e <xTaskGenericCreate+0x152>
    11c6:	85 e2       	ldi	r24, 0x25	; 37
    11c8:	9a e0       	ldi	r25, 0x0A	; 10
    11ca:	ae d8       	rcall	.-3748   	; 0x328 <vListInitialise>
    11cc:	8e e2       	ldi	r24, 0x2E	; 46
    11ce:	9a e0       	ldi	r25, 0x0A	; 10
    11d0:	ab d8       	rcall	.-3754   	; 0x328 <vListInitialise>
    11d2:	87 e3       	ldi	r24, 0x37	; 55
    11d4:	9a e0       	ldi	r25, 0x0A	; 10
    11d6:	a8 d8       	rcall	.-3760   	; 0x328 <vListInitialise>
    11d8:	80 e4       	ldi	r24, 0x40	; 64
    11da:	9a e0       	ldi	r25, 0x0A	; 10
    11dc:	a5 d8       	rcall	.-3766   	; 0x328 <vListInitialise>
    11de:	8c e1       	ldi	r24, 0x1C	; 28
    11e0:	9a e0       	ldi	r25, 0x0A	; 10
    11e2:	a2 d8       	rcall	.-3772   	; 0x328 <vListInitialise>
    11e4:	83 e1       	ldi	r24, 0x13	; 19
    11e6:	9a e0       	ldi	r25, 0x0A	; 10
    11e8:	9f d8       	rcall	.-3778   	; 0x328 <vListInitialise>
    11ea:	86 e0       	ldi	r24, 0x06	; 6
    11ec:	9a e0       	ldi	r25, 0x0A	; 10
    11ee:	9c d8       	rcall	.-3784   	; 0x328 <vListInitialise>
    11f0:	8d ef       	ldi	r24, 0xFD	; 253
    11f2:	99 e0       	ldi	r25, 0x09	; 9
    11f4:	99 d8       	rcall	.-3790   	; 0x328 <vListInitialise>
    11f6:	8c e1       	ldi	r24, 0x1C	; 28
    11f8:	9a e0       	ldi	r25, 0x0A	; 10
    11fa:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <pxDelayedTaskList+0x1>
    11fe:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <pxDelayedTaskList>
    1202:	83 e1       	ldi	r24, 0x13	; 19
    1204:	9a e0       	ldi	r25, 0x0A	; 10
    1206:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <pxOverflowDelayedTaskList+0x1>
    120a:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <pxOverflowDelayedTaskList>
    120e:	0f c0       	rjmp	.+30     	; 0x122e <xTaskGenericCreate+0x152>
    1210:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <xSchedulerRunning>
    1214:	81 11       	cpse	r24, r1
    1216:	0b c0       	rjmp	.+22     	; 0x122e <xTaskGenericCreate+0x152>
    1218:	e0 91 49 0a 	lds	r30, 0x0A49	; 0x800a49 <pxCurrentTCB>
    121c:	f0 91 4a 0a 	lds	r31, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    1220:	86 89       	ldd	r24, Z+22	; 0x16
    1222:	08 17       	cp	r16, r24
    1224:	20 f0       	brcs	.+8      	; 0x122e <xTaskGenericCreate+0x152>
    1226:	d0 93 4a 0a 	sts	0x0A4A, r29	; 0x800a4a <pxCurrentTCB+0x1>
    122a:	c0 93 49 0a 	sts	0x0A49, r28	; 0x800a49 <pxCurrentTCB>
    122e:	8e 89       	ldd	r24, Y+22	; 0x16
    1230:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <uxTopUsedPriority>
    1234:	98 17       	cp	r25, r24
    1236:	10 f4       	brcc	.+4      	; 0x123c <xTaskGenericCreate+0x160>
    1238:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <uxTopUsedPriority>
    123c:	90 91 f1 09 	lds	r25, 0x09F1	; 0x8009f1 <uxTaskNumber>
    1240:	9f 5f       	subi	r25, 0xFF	; 255
    1242:	90 93 f1 09 	sts	0x09F1, r25	; 0x8009f1 <uxTaskNumber>
    1246:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <uxTopReadyPriority>
    124a:	98 17       	cp	r25, r24
    124c:	10 f4       	brcc	.+4      	; 0x1252 <xTaskGenericCreate+0x176>
    124e:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <uxTopReadyPriority>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c 01       	movw	r18, r24
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	22 0f       	add	r18, r18
    125c:	33 1f       	adc	r19, r19
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	b6 01       	movw	r22, r12
    1268:	8b 5d       	subi	r24, 0xDB	; 219
    126a:	95 4f       	sbci	r25, 0xF5	; 245
    126c:	6f d8       	rcall	.-3874   	; 0x34c <vListInsertEnd>
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <xSchedulerRunning>
    1276:	88 23       	and	r24, r24
    1278:	51 f0       	breq	.+20     	; 0x128e <xTaskGenericCreate+0x1b2>
    127a:	e0 91 49 0a 	lds	r30, 0x0A49	; 0x800a49 <pxCurrentTCB>
    127e:	f0 91 4a 0a 	lds	r31, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    1282:	86 89       	ldd	r24, Z+22	; 0x16
    1284:	80 17       	cp	r24, r16
    1286:	28 f4       	brcc	.+10     	; 0x1292 <xTaskGenericCreate+0x1b6>
    1288:	41 de       	rcall	.-894    	; 0xf0c <vPortYield>
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	09 c0       	rjmp	.+18     	; 0x12a0 <xTaskGenericCreate+0x1c4>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <xTaskGenericCreate+0x1c4>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <xTaskGenericCreate+0x1c4>
    1296:	d8 8e       	std	Y+24, r13	; 0x18
    1298:	cf 8a       	std	Y+23, r12	; 0x17
    129a:	c6 01       	movw	r24, r12
    129c:	47 cf       	rjmp	.-370    	; 0x112c <xTaskGenericCreate+0x50>
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	8f 90       	pop	r8
    12b8:	7f 90       	pop	r7
    12ba:	6f 90       	pop	r6
    12bc:	5f 90       	pop	r5
    12be:	4f 90       	pop	r4
    12c0:	08 95       	ret

000012c2 <vTaskStartScheduler>:
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	a1 2c       	mov	r10, r1
    12d2:	b1 2c       	mov	r11, r1
    12d4:	c1 2c       	mov	r12, r1
    12d6:	d1 2c       	mov	r13, r1
    12d8:	e1 2c       	mov	r14, r1
    12da:	f1 2c       	mov	r15, r1
    12dc:	00 e0       	ldi	r16, 0x00	; 0
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	45 e5       	ldi	r20, 0x55	; 85
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	6e e0       	ldi	r22, 0x0E	; 14
    12e8:	72 e0       	ldi	r23, 0x02	; 2
    12ea:	84 ef       	ldi	r24, 0xF4	; 244
    12ec:	9a e0       	ldi	r25, 0x0A	; 10
    12ee:	f6 de       	rcall	.-532    	; 0x10dc <xTaskGenericCreate>
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	41 f4       	brne	.+16     	; 0x1304 <vTaskStartScheduler+0x42>
    12f4:	f8 94       	cli
    12f6:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <xSchedulerRunning>
    12fa:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <xTickCount+0x1>
    12fe:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <xTickCount>
    1302:	ca dd       	rcall	.-1132   	; 0xe98 <xPortStartScheduler>
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	bf 90       	pop	r11
    1310:	af 90       	pop	r10
    1312:	08 95       	ret

00001314 <vTaskSuspendAll>:
    1314:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <uxSchedulerSuspended>
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <uxSchedulerSuspended>
    131e:	08 95       	ret

00001320 <vTaskIncrementTick>:
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <uxSchedulerSuspended>
    132c:	81 11       	cpse	r24, r1
    132e:	b2 c0       	rjmp	.+356    	; 0x1494 <vTaskIncrementTick+0x174>
    1330:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <xTickCount>
    1334:	90 91 fa 09 	lds	r25, 0x09FA	; 0x8009fa <xTickCount+0x1>
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	90 93 fa 09 	sts	0x09FA, r25	; 0x8009fa <xTickCount+0x1>
    133e:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <xTickCount>
    1342:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <xTickCount>
    1346:	90 91 fa 09 	lds	r25, 0x09FA	; 0x8009fa <xTickCount+0x1>
    134a:	89 2b       	or	r24, r25
    134c:	99 f5       	brne	.+102    	; 0x13b4 <vTaskIncrementTick+0x94>
    134e:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    1352:	90 91 12 0a 	lds	r25, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    1356:	20 91 0f 0a 	lds	r18, 0x0A0F	; 0x800a0f <pxOverflowDelayedTaskList>
    135a:	30 91 10 0a 	lds	r19, 0x0A10	; 0x800a10 <pxOverflowDelayedTaskList+0x1>
    135e:	30 93 12 0a 	sts	0x0A12, r19	; 0x800a12 <pxDelayedTaskList+0x1>
    1362:	20 93 11 0a 	sts	0x0A11, r18	; 0x800a11 <pxDelayedTaskList>
    1366:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <pxOverflowDelayedTaskList+0x1>
    136a:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <pxOverflowDelayedTaskList>
    136e:	80 91 f2 09 	lds	r24, 0x09F2	; 0x8009f2 <xNumOfOverflows>
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <xNumOfOverflows>
    1378:	e0 91 11 0a 	lds	r30, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    137c:	f0 91 12 0a 	lds	r31, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    1380:	80 81       	ld	r24, Z
    1382:	81 11       	cpse	r24, r1
    1384:	07 c0       	rjmp	.+14     	; 0x1394 <vTaskIncrementTick+0x74>
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    138e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1392:	10 c0       	rjmp	.+32     	; 0x13b4 <vTaskIncrementTick+0x94>
    1394:	e0 91 11 0a 	lds	r30, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    1398:	f0 91 12 0a 	lds	r31, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    139c:	05 80       	ldd	r0, Z+5	; 0x05
    139e:	f6 81       	ldd	r31, Z+6	; 0x06
    13a0:	e0 2d       	mov	r30, r0
    13a2:	06 80       	ldd	r0, Z+6	; 0x06
    13a4:	f7 81       	ldd	r31, Z+7	; 0x07
    13a6:	e0 2d       	mov	r30, r0
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    13b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    13b4:	20 91 f9 09 	lds	r18, 0x09F9	; 0x8009f9 <xTickCount>
    13b8:	30 91 fa 09 	lds	r19, 0x09FA	; 0x8009fa <xTickCount+0x1>
    13bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    13c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    13c4:	28 17       	cp	r18, r24
    13c6:	39 07       	cpc	r19, r25
    13c8:	08 f4       	brcc	.+2      	; 0x13cc <vTaskIncrementTick+0xac>
    13ca:	69 c0       	rjmp	.+210    	; 0x149e <vTaskIncrementTick+0x17e>
    13cc:	e0 91 11 0a 	lds	r30, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    13d0:	f0 91 12 0a 	lds	r31, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    13d4:	80 81       	ld	r24, Z
    13d6:	88 23       	and	r24, r24
    13d8:	99 f0       	breq	.+38     	; 0x1400 <vTaskIncrementTick+0xe0>
    13da:	e0 91 11 0a 	lds	r30, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    13de:	f0 91 12 0a 	lds	r31, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    13e2:	05 80       	ldd	r0, Z+5	; 0x05
    13e4:	f6 81       	ldd	r31, Z+6	; 0x06
    13e6:	e0 2d       	mov	r30, r0
    13e8:	c6 81       	ldd	r28, Z+6	; 0x06
    13ea:	d7 81       	ldd	r29, Z+7	; 0x07
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	20 91 f9 09 	lds	r18, 0x09F9	; 0x8009f9 <xTickCount>
    13f4:	30 91 fa 09 	lds	r19, 0x09FA	; 0x8009fa <xTickCount+0x1>
    13f8:	28 17       	cp	r18, r24
    13fa:	39 07       	cpc	r19, r25
    13fc:	f8 f4       	brcc	.+62     	; 0x143c <vTaskIncrementTick+0x11c>
    13fe:	19 c0       	rjmp	.+50     	; 0x1432 <vTaskIncrementTick+0x112>
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	9f ef       	ldi	r25, 0xFF	; 255
    1404:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1408:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    140c:	48 c0       	rjmp	.+144    	; 0x149e <vTaskIncrementTick+0x17e>
    140e:	e0 91 11 0a 	lds	r30, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    1412:	f0 91 12 0a 	lds	r31, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    1416:	05 80       	ldd	r0, Z+5	; 0x05
    1418:	f6 81       	ldd	r31, Z+6	; 0x06
    141a:	e0 2d       	mov	r30, r0
    141c:	c6 81       	ldd	r28, Z+6	; 0x06
    141e:	d7 81       	ldd	r29, Z+7	; 0x07
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9b 81       	ldd	r25, Y+3	; 0x03
    1424:	20 91 f9 09 	lds	r18, 0x09F9	; 0x8009f9 <xTickCount>
    1428:	30 91 fa 09 	lds	r19, 0x09FA	; 0x8009fa <xTickCount+0x1>
    142c:	28 17       	cp	r18, r24
    142e:	39 07       	cpc	r19, r25
    1430:	28 f4       	brcc	.+10     	; 0x143c <vTaskIncrementTick+0x11c>
    1432:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1436:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    143a:	31 c0       	rjmp	.+98     	; 0x149e <vTaskIncrementTick+0x17e>
    143c:	8e 01       	movw	r16, r28
    143e:	0e 5f       	subi	r16, 0xFE	; 254
    1440:	1f 4f       	sbci	r17, 0xFF	; 255
    1442:	c8 01       	movw	r24, r16
    1444:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    1448:	8c 89       	ldd	r24, Y+20	; 0x14
    144a:	9d 89       	ldd	r25, Y+21	; 0x15
    144c:	89 2b       	or	r24, r25
    144e:	21 f0       	breq	.+8      	; 0x1458 <vTaskIncrementTick+0x138>
    1450:	ce 01       	movw	r24, r28
    1452:	0c 96       	adiw	r24, 0x0c	; 12
    1454:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    1458:	8e 89       	ldd	r24, Y+22	; 0x16
    145a:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <uxTopReadyPriority>
    145e:	98 17       	cp	r25, r24
    1460:	10 f4       	brcc	.+4      	; 0x1466 <vTaskIncrementTick+0x146>
    1462:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <uxTopReadyPriority>
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9c 01       	movw	r18, r24
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	22 0f       	add	r18, r18
    1470:	33 1f       	adc	r19, r19
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	82 0f       	add	r24, r18
    1478:	93 1f       	adc	r25, r19
    147a:	b8 01       	movw	r22, r16
    147c:	8b 5d       	subi	r24, 0xDB	; 219
    147e:	95 4f       	sbci	r25, 0xF5	; 245
    1480:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    1484:	e0 91 11 0a 	lds	r30, 0x0A11	; 0x800a11 <pxDelayedTaskList>
    1488:	f0 91 12 0a 	lds	r31, 0x0A12	; 0x800a12 <pxDelayedTaskList+0x1>
    148c:	80 81       	ld	r24, Z
    148e:	81 11       	cpse	r24, r1
    1490:	be cf       	rjmp	.-132    	; 0x140e <vTaskIncrementTick+0xee>
    1492:	b6 cf       	rjmp	.-148    	; 0x1400 <vTaskIncrementTick+0xe0>
    1494:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <uxMissedTicks>
    1498:	8f 5f       	subi	r24, 0xFF	; 255
    149a:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <uxMissedTicks>
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <xTaskResumeAll>:
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	0f 92       	push	r0
    14be:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <uxSchedulerSuspended>
    14c2:	81 50       	subi	r24, 0x01	; 1
    14c4:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <uxSchedulerSuspended>
    14c8:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <uxSchedulerSuspended>
    14cc:	81 11       	cpse	r24, r1
    14ce:	62 c0       	rjmp	.+196    	; 0x1594 <xTaskResumeAll+0xec>
    14d0:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <uxCurrentNumberOfTasks>
    14d4:	81 11       	cpse	r24, r1
    14d6:	32 c0       	rjmp	.+100    	; 0x153c <xTaskResumeAll+0x94>
    14d8:	60 c0       	rjmp	.+192    	; 0x159a <xTaskResumeAll+0xf2>
    14da:	d7 01       	movw	r26, r14
    14dc:	15 96       	adiw	r26, 0x05	; 5
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	16 97       	sbiw	r26, 0x06	; 6
    14e4:	c6 81       	ldd	r28, Z+6	; 0x06
    14e6:	d7 81       	ldd	r29, Z+7	; 0x07
    14e8:	ce 01       	movw	r24, r28
    14ea:	0c 96       	adiw	r24, 0x0c	; 12
    14ec:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    14f0:	8e 01       	movw	r16, r28
    14f2:	0e 5f       	subi	r16, 0xFE	; 254
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	c8 01       	movw	r24, r16
    14f8:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
    14fc:	8e 89       	ldd	r24, Y+22	; 0x16
    14fe:	90 91 f7 09 	lds	r25, 0x09F7	; 0x8009f7 <uxTopReadyPriority>
    1502:	98 17       	cp	r25, r24
    1504:	10 f4       	brcc	.+4      	; 0x150a <xTaskResumeAll+0x62>
    1506:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <uxTopReadyPriority>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9c 01       	movw	r18, r24
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	22 0f       	add	r18, r18
    1514:	33 1f       	adc	r19, r19
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	82 0f       	add	r24, r18
    151c:	93 1f       	adc	r25, r19
    151e:	b8 01       	movw	r22, r16
    1520:	8b 5d       	subi	r24, 0xDB	; 219
    1522:	95 4f       	sbci	r25, 0xF5	; 245
    1524:	0e 94 a6 01 	call	0x34c	; 0x34c <vListInsertEnd>
    1528:	e0 91 49 0a 	lds	r30, 0x0A49	; 0x800a49 <pxCurrentTCB>
    152c:	f0 91 4a 0a 	lds	r31, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    1530:	9e 89       	ldd	r25, Y+22	; 0x16
    1532:	86 89       	ldd	r24, Z+22	; 0x16
    1534:	98 17       	cp	r25, r24
    1536:	58 f0       	brcs	.+22     	; 0x154e <xTaskResumeAll+0xa6>
    1538:	dc 2c       	mov	r13, r12
    153a:	09 c0       	rjmp	.+18     	; 0x154e <xTaskResumeAll+0xa6>
    153c:	d1 2c       	mov	r13, r1
    153e:	0f 2e       	mov	r0, r31
    1540:	f6 e0       	ldi	r31, 0x06	; 6
    1542:	ef 2e       	mov	r14, r31
    1544:	fa e0       	ldi	r31, 0x0A	; 10
    1546:	ff 2e       	mov	r15, r31
    1548:	f0 2d       	mov	r31, r0
    154a:	cc 24       	eor	r12, r12
    154c:	c3 94       	inc	r12
    154e:	f7 01       	movw	r30, r14
    1550:	80 81       	ld	r24, Z
    1552:	81 11       	cpse	r24, r1
    1554:	c2 cf       	rjmp	.-124    	; 0x14da <xTaskResumeAll+0x32>
    1556:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <uxMissedTicks>
    155a:	88 23       	and	r24, r24
    155c:	79 f0       	breq	.+30     	; 0x157c <xTaskResumeAll+0xd4>
    155e:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <uxMissedTicks>
    1562:	88 23       	and	r24, r24
    1564:	91 f0       	breq	.+36     	; 0x158a <xTaskResumeAll+0xe2>
    1566:	dc de       	rcall	.-584    	; 0x1320 <vTaskIncrementTick>
    1568:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <uxMissedTicks>
    156c:	81 50       	subi	r24, 0x01	; 1
    156e:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <uxMissedTicks>
    1572:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <uxMissedTicks>
    1576:	81 11       	cpse	r24, r1
    1578:	f6 cf       	rjmp	.-20     	; 0x1566 <xTaskResumeAll+0xbe>
    157a:	07 c0       	rjmp	.+14     	; 0x158a <xTaskResumeAll+0xe2>
    157c:	f1 e0       	ldi	r31, 0x01	; 1
    157e:	df 16       	cp	r13, r31
    1580:	21 f0       	breq	.+8      	; 0x158a <xTaskResumeAll+0xe2>
    1582:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <xMissedYield>
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	39 f4       	brne	.+14     	; 0x1598 <xTaskResumeAll+0xf0>
    158a:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <xMissedYield>
    158e:	be dc       	rcall	.-1668   	; 0xf0c <vPortYield>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	03 c0       	rjmp	.+6      	; 0x159a <xTaskResumeAll+0xf2>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	01 c0       	rjmp	.+2      	; 0x159a <xTaskResumeAll+0xf2>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	0f 90       	pop	r0
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	08 95       	ret

000015b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    15b6:	89 2b       	or	r24, r25
    15b8:	99 f0       	breq	.+38     	; 0x15e0 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    15ba:	ac de       	rcall	.-680    	; 0x1314 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    15bc:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <xTickCount>
    15c0:	90 91 fa 09 	lds	r25, 0x09FA	; 0x8009fa <xTickCount+0x1>
    15c4:	c8 0f       	add	r28, r24
    15c6:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    15c8:	80 91 49 0a 	lds	r24, 0x0A49	; 0x800a49 <pxCurrentTCB>
    15cc:	90 91 4a 0a 	lds	r25, 0x0A4A	; 0x800a4a <pxCurrentTCB+0x1>
    15d0:	02 96       	adiw	r24, 0x02	; 2
    15d2:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    15d6:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
    15d8:	4c dd       	rcall	.-1384   	; 0x1072 <prvAddCurrentTaskToDelayedList>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    15da:	66 df       	rcall	.-308    	; 0x14a8 <xTaskResumeAll>
    15dc:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <vTaskDelay+0x32>
    15e0:	95 dc       	rcall	.-1750   	; 0xf0c <vPortYield>
		}
	}
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    15e8:	0f 2e       	mov	r0, r31
    15ea:	fd ef       	ldi	r31, 0xFD	; 253
    15ec:	ef 2e       	mov	r14, r31
    15ee:	f9 e0       	ldi	r31, 0x09	; 9
    15f0:	ff 2e       	mov	r15, r31
    15f2:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    15f4:	c5 e2       	ldi	r28, 0x25	; 37
    15f6:	da e0       	ldi	r29, 0x0A	; 10
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    15f8:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <uxTasksDeleted>
    15fc:	88 23       	and	r24, r24
    15fe:	41 f1       	breq	.+80     	; 0x1650 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    1600:	89 de       	rcall	.-750    	; 0x1314 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1602:	d7 01       	movw	r26, r14
			xTaskResumeAll();
    1604:	1c 91       	ld	r17, X
    1606:	50 df       	rcall	.-352    	; 0x14a8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1608:	11 23       	and	r17, r17
    160a:	11 f1       	breq	.+68     	; 0x1650 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1612:	d7 01       	movw	r26, r14
    1614:	15 96       	adiw	r26, 0x05	; 5
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	16 97       	sbiw	r26, 0x06	; 6
    161c:	06 81       	ldd	r16, Z+6	; 0x06
    161e:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    1620:	c8 01       	movw	r24, r16
    1622:	02 96       	adiw	r24, 0x02	; 2
    1624:	0e 94 08 02 	call	0x410	; 0x410 <vListRemove>
					--uxCurrentNumberOfTasks;
    1628:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <uxCurrentNumberOfTasks>
    162c:	81 50       	subi	r24, 0x01	; 1
    162e:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    1632:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <uxTasksDeleted>
    1636:	81 50       	subi	r24, 0x01	; 1
    1638:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1640:	f8 01       	movw	r30, r16
    1642:	87 89       	ldd	r24, Z+23	; 0x17
    1644:	90 8d       	ldd	r25, Z+24	; 0x18
    1646:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>
		vPortFree( pxTCB );
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 93 01 	call	0x326	; 0x326 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1650:	88 81       	ld	r24, Y
    1652:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
    1654:	88 f2       	brcs	.-94     	; 0x15f8 <prvIdleTask+0x10>
    1656:	5a dc       	rcall	.-1868   	; 0xf0c <vPortYield>
    1658:	cf cf       	rjmp	.-98     	; 0x15f8 <prvIdleTask+0x10>

0000165a <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    165a:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <uxSchedulerSuspended>
    165e:	81 11       	cpse	r24, r1
    1660:	13 c0       	rjmp	.+38     	; 0x1688 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1662:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <uxTopReadyPriority>
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	fc 01       	movw	r30, r24
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	8e 0f       	add	r24, r30
    1678:	9f 1f       	adc	r25, r31
    167a:	fc 01       	movw	r30, r24
    167c:	eb 5d       	subi	r30, 0xDB	; 219
    167e:	f5 4f       	sbci	r31, 0xF5	; 245
    1680:	80 81       	ld	r24, Z
    1682:	88 23       	and	r24, r24
    1684:	29 f0       	breq	.+10     	; 0x1690 <vTaskSwitchContext+0x36>
    1686:	1b c0       	rjmp	.+54     	; 0x16be <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <xMissedYield>
    168e:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1690:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <uxTopReadyPriority>
    1694:	81 50       	subi	r24, 0x01	; 1
    1696:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    169a:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <uxTopReadyPriority>
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	fc 01       	movw	r30, r24
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	8e 0f       	add	r24, r30
    16b0:	9f 1f       	adc	r25, r31
    16b2:	fc 01       	movw	r30, r24
    16b4:	eb 5d       	subi	r30, 0xDB	; 219
    16b6:	f5 4f       	sbci	r31, 0xF5	; 245
    16b8:	80 81       	ld	r24, Z
    16ba:	88 23       	and	r24, r24
    16bc:	49 f3       	breq	.-46     	; 0x1690 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    16be:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <uxTopReadyPriority>
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c 01       	movw	r18, r24
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	28 0f       	add	r18, r24
    16d4:	39 1f       	adc	r19, r25
    16d6:	d9 01       	movw	r26, r18
    16d8:	ab 5d       	subi	r26, 0xDB	; 219
    16da:	b5 4f       	sbci	r27, 0xF5	; 245
    16dc:	11 96       	adiw	r26, 0x01	; 1
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	12 97       	sbiw	r26, 0x02	; 2
    16e4:	02 80       	ldd	r0, Z+2	; 0x02
    16e6:	f3 81       	ldd	r31, Z+3	; 0x03
    16e8:	e0 2d       	mov	r30, r0
    16ea:	12 96       	adiw	r26, 0x02	; 2
    16ec:	fc 93       	st	X, r31
    16ee:	ee 93       	st	-X, r30
    16f0:	11 97       	sbiw	r26, 0x01	; 1
    16f2:	28 5d       	subi	r18, 0xD8	; 216
    16f4:	35 4f       	sbci	r19, 0xF5	; 245
    16f6:	e2 17       	cp	r30, r18
    16f8:	f3 07       	cpc	r31, r19
    16fa:	29 f4       	brne	.+10     	; 0x1706 <vTaskSwitchContext+0xac>
    16fc:	22 81       	ldd	r18, Z+2	; 0x02
    16fe:	33 81       	ldd	r19, Z+3	; 0x03
    1700:	fd 01       	movw	r30, r26
    1702:	32 83       	std	Z+2, r19	; 0x02
    1704:	21 83       	std	Z+1, r18	; 0x01
    1706:	fc 01       	movw	r30, r24
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	8e 0f       	add	r24, r30
    1716:	9f 1f       	adc	r25, r31
    1718:	fc 01       	movw	r30, r24
    171a:	eb 5d       	subi	r30, 0xDB	; 219
    171c:	f5 4f       	sbci	r31, 0xF5	; 245
    171e:	01 80       	ldd	r0, Z+1	; 0x01
    1720:	f2 81       	ldd	r31, Z+2	; 0x02
    1722:	e0 2d       	mov	r30, r0
    1724:	86 81       	ldd	r24, Z+6	; 0x06
    1726:	97 81       	ldd	r25, Z+7	; 0x07
    1728:	90 93 4a 0a 	sts	0x0A4A, r25	; 0x800a4a <pxCurrentTCB+0x1>
    172c:	80 93 49 0a 	sts	0x0A49, r24	; 0x800a49 <pxCurrentTCB>
    1730:	08 95       	ret

00001732 <__udivmodqi4>:
    1732:	99 1b       	sub	r25, r25
    1734:	79 e0       	ldi	r23, 0x09	; 9
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <__udivmodqi4_ep>

00001738 <__udivmodqi4_loop>:
    1738:	99 1f       	adc	r25, r25
    173a:	96 17       	cp	r25, r22
    173c:	08 f0       	brcs	.+2      	; 0x1740 <__udivmodqi4_ep>
    173e:	96 1b       	sub	r25, r22

00001740 <__udivmodqi4_ep>:
    1740:	88 1f       	adc	r24, r24
    1742:	7a 95       	dec	r23
    1744:	c9 f7       	brne	.-14     	; 0x1738 <__udivmodqi4_loop>
    1746:	80 95       	com	r24
    1748:	08 95       	ret

0000174a <__tablejump2__>:
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	00 24       	eor	r0, r0
    1750:	00 1c       	adc	r0, r0
    1752:	0b be       	out	0x3b, r0	; 59
    1754:	07 90       	elpm	r0, Z+
    1756:	f6 91       	elpm	r31, Z
    1758:	e0 2d       	mov	r30, r0
    175a:	09 94       	ijmp

0000175c <memset>:
    175c:	dc 01       	movw	r26, r24
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <memset+0x6>
    1760:	6d 93       	st	X+, r22
    1762:	41 50       	subi	r20, 0x01	; 1
    1764:	50 40       	sbci	r21, 0x00	; 0
    1766:	e0 f7       	brcc	.-8      	; 0x1760 <memset+0x4>
    1768:	08 95       	ret

0000176a <strncpy>:
    176a:	fb 01       	movw	r30, r22
    176c:	dc 01       	movw	r26, r24
    176e:	41 50       	subi	r20, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	48 f0       	brcs	.+18     	; 0x1786 <strncpy+0x1c>
    1774:	01 90       	ld	r0, Z+
    1776:	0d 92       	st	X+, r0
    1778:	00 20       	and	r0, r0
    177a:	c9 f7       	brne	.-14     	; 0x176e <strncpy+0x4>
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <strncpy+0x16>
    177e:	1d 92       	st	X+, r1
    1780:	41 50       	subi	r20, 0x01	; 1
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	e0 f7       	brcc	.-8      	; 0x177e <strncpy+0x14>
    1786:	08 95       	ret

00001788 <_exit>:
    1788:	f8 94       	cli

0000178a <__stop_program>:
    178a:	ff cf       	rjmp	.-2      	; 0x178a <__stop_program>
